{
  "Chart_2": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A collection of useful static methods relating to datasets.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_2/source/org/jfree/data/general/DatasetUtilities.java",
        "span_end": 760,
        "name": "DatasetUtilities",
        "start_line": 162,
        "span_start": 755,
        "bug_name": "Chart_2",
        "type": "class",
        "end_line": 2166
      },
      {
        "javadoc": "/**\n * A collection of useful static methods relating to datasets.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_2/source/org/jfree/data/general/DatasetUtilities.java",
        "span_end": 1247,
        "name": "DatasetUtilities",
        "start_line": 162,
        "span_start": 1242,
        "bug_name": "Chart_2",
        "type": "class",
        "end_line": 2166
      }
    ]
  },
  "Chart_4": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A general class for plotting data in the form of (x, y) pairs.  This plot can\n * use data from any class that implements the {@link XYDataset} interface.\n * <P>\n * <code>XYPlot</code> makes use of an {@link XYItemRenderer} to draw each point\n * on the plot.  By using different renderers, various chart types can be\n * produced.\n * <p>\n * The {@link org.jfree.chart.ChartFactory} class contains static methods for\n * creating pre-configured charts.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_4/source/org/jfree/chart/plot/XYPlot.java",
        "span_end": 4492,
        "name": "XYPlot",
        "start_line": 313,
        "span_start": 4493,
        "bug_name": "Chart_4",
        "type": "class",
        "end_line": 5864
      },
      {
        "javadoc": "/**\n * A general class for plotting data in the form of (x, y) pairs.  This plot can\n * use data from any class that implements the {@link XYDataset} interface.\n * <P>\n * <code>XYPlot</code> makes use of an {@link XYItemRenderer} to draw each point\n * on the plot.  By using different renderers, various chart types can be\n * produced.\n * <p>\n * The {@link org.jfree.chart.ChartFactory} class contains static methods for\n * creating pre-configured charts.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_4/source/org/jfree/chart/plot/XYPlot.java",
        "span_end": 4500,
        "name": "XYPlot",
        "start_line": 313,
        "span_start": 4501,
        "bug_name": "Chart_4",
        "type": "class",
        "end_line": 5864
      }
    ]
  },
  "Chart_14": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * A general plotting class that uses data from a {@link CategoryDataset} and\n * renders each data item using a {@link CategoryItemRenderer}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_14/source/org/jfree/chart/plot/CategoryPlot.java",
        "span_end": 2165,
        "name": "CategoryPlot",
        "start_line": 231,
        "span_start": 2166,
        "bug_name": "Chart_14",
        "type": "class",
        "end_line": 4117
      },
      {
        "javadoc": "/**\n * A general plotting class that uses data from a {@link CategoryDataset} and\n * renders each data item using a {@link CategoryItemRenderer}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_14/source/org/jfree/chart/plot/CategoryPlot.java",
        "span_end": 2447,
        "name": "CategoryPlot",
        "start_line": 231,
        "span_start": 2448,
        "bug_name": "Chart_14",
        "type": "class",
        "end_line": 4117
      },
      {
        "javadoc": "/**\n * A general class for plotting data in the form of (x, y) pairs.  This plot can\n * use data from any class that implements the {@link XYDataset} interface.\n * <P>\n * <code>XYPlot</code> makes use of an {@link XYItemRenderer} to draw each point\n * on the plot.  By using different renderers, various chart types can be\n * produced.\n * <p>\n * The {@link org.jfree.chart.ChartFactory} class contains static methods for\n * creating pre-configured charts.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_14/source/org/jfree/chart/plot/XYPlot.java",
        "span_end": 2292,
        "name": "XYPlot",
        "start_line": 277,
        "span_start": 2293,
        "bug_name": "Chart_14",
        "type": "class",
        "end_line": 5063
      },
      {
        "javadoc": "/**\n * A general class for plotting data in the form of (x, y) pairs.  This plot can\n * use data from any class that implements the {@link XYDataset} interface.\n * <P>\n * <code>XYPlot</code> makes use of an {@link XYItemRenderer} to draw each point\n * on the plot.  By using different renderers, various chart types can be\n * produced.\n * <p>\n * The {@link org.jfree.chart.ChartFactory} class contains static methods for\n * creating pre-configured charts.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_14/source/org/jfree/chart/plot/XYPlot.java",
        "span_end": 2528,
        "name": "XYPlot",
        "start_line": 277,
        "span_start": 2529,
        "bug_name": "Chart_14",
        "type": "class",
        "end_line": 5063
      }
    ]
  },
  "Chart_15": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A plot that displays data in the form of a pie chart, using data from any\n * class that implements the {@link PieDataset} interface.\n * <P>\n * Special notes:\n * <ol>\n * <li>the default starting point is 12 o'clock and the pie sections proceed\n * in a clockwise direction, but these settings can be changed;</li>\n * <li>negative values in the dataset are ignored;</li>\n * <li>there are utility methods for creating a {@link PieDataset} from a\n * {@link org.jfree.data.category.CategoryDataset};</li>\n * </ol>\n *\n * @see Plot\n * @see PieDataset\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_15/source/org/jfree/chart/plot/PiePlot.java",
        "span_end": 1377,
        "name": "PiePlot",
        "start_line": 231,
        "span_start": 1378,
        "bug_name": "Chart_15",
        "type": "class",
        "end_line": 3035
      },
      {
        "javadoc": "/**\n * A plot that displays data in the form of a pie chart, using data from any\n * class that implements the {@link PieDataset} interface.\n * <P>\n * Special notes:\n * <ol>\n * <li>the default starting point is 12 o'clock and the pie sections proceed\n * in a clockwise direction, but these settings can be changed;</li>\n * <li>negative values in the dataset are ignored;</li>\n * <li>there are utility methods for creating a {@link PieDataset} from a\n * {@link org.jfree.data.category.CategoryDataset};</li>\n * </ol>\n *\n * @see Plot\n * @see PieDataset\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_15/source/org/jfree/chart/plot/PiePlot.java",
        "span_end": 2052,
        "name": "PiePlot",
        "start_line": 231,
        "span_start": 2051,
        "bug_name": "Chart_15",
        "type": "class",
        "end_line": 3035
      }
    ]
  },
  "Chart_16": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A convenience class that provides a default implementation of the\n * {@link IntervalCategoryDataset} interface.\n * <p>\n * The standard constructor accepts data in a two dimensional array where the\n * first dimension is the series, and the second dimension is the category.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_16/source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "span_end": 208,
        "name": "DefaultIntervalCategoryDataset",
        "start_line": 66,
        "span_start": 207,
        "bug_name": "Chart_16",
        "type": "class",
        "end_line": 802
      },
      {
        "javadoc": "/**\n * A convenience class that provides a default implementation of the\n * {@link IntervalCategoryDataset} interface.\n * <p>\n * The standard constructor accepts data in a two dimensional array where the\n * first dimension is the series, and the second dimension is the category.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_16/source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "span_end": 338,
        "name": "DefaultIntervalCategoryDataset",
        "start_line": 66,
        "span_start": 338,
        "bug_name": "Chart_16",
        "type": "class",
        "end_line": 802
      }
    ]
  },
  "Chart_18": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * An ordered list of (key, value) items.  This class provides a default\n * implementation of the {@link KeyedValues} interface.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_18/source/org/jfree/data/DefaultKeyedValues.java",
        "span_end": 320,
        "name": "DefaultKeyedValues",
        "start_line": 76,
        "span_start": 318,
        "bug_name": "Chart_18",
        "type": "class",
        "end_line": 471
      },
      {
        "javadoc": "/**\n * An ordered list of (key, value) items.  This class provides a default\n * implementation of the {@link KeyedValues} interface.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_18/source/org/jfree/data/DefaultKeyedValues.java",
        "span_end": 335,
        "name": "DefaultKeyedValues",
        "start_line": 76,
        "span_start": 335,
        "bug_name": "Chart_18",
        "type": "class",
        "end_line": 471
      },
      {
        "javadoc": "/**\n * A data structure that stores zero, one or many values, where each value\n * is associated with two keys (a 'row' key and a 'column' key).  The keys\n * should be (a) instances of {@link Comparable} and (b) immutable.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_18/source/org/jfree/data/DefaultKeyedValues2D.java",
        "span_end": 458,
        "name": "DefaultKeyedValues2D",
        "start_line": 72,
        "span_start": 455,
        "bug_name": "Chart_18",
        "type": "class",
        "end_line": 560
      }
    ]
  },
  "Chart_19": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A general plotting class that uses data from a {@link CategoryDataset} and\n * renders each data item using a {@link CategoryItemRenderer}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_19/source/org/jfree/chart/plot/CategoryPlot.java",
        "span_end": 697,
        "name": "CategoryPlot",
        "start_line": 222,
        "span_start": 698,
        "bug_name": "Chart_19",
        "type": "class",
        "end_line": 3807
      },
      {
        "javadoc": "/**\n * A general plotting class that uses data from a {@link CategoryDataset} and\n * renders each data item using a {@link CategoryItemRenderer}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_19/source/org/jfree/chart/plot/CategoryPlot.java",
        "span_end": 972,
        "name": "CategoryPlot",
        "start_line": 222,
        "span_start": 973,
        "bug_name": "Chart_19",
        "type": "class",
        "end_line": 3807
      }
    ]
  },
  "Chart_21": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * A convenience class that provides a default implementation of the\n * {@link BoxAndWhiskerCategoryDataset} interface.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_21/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "span_end": 156,
        "name": "DefaultBoxAndWhiskerCategoryDataset",
        "start_line": 72,
        "span_start": 157,
        "bug_name": "Chart_21",
        "type": "class",
        "end_line": 777
      },
      {
        "javadoc": "/**\n * A convenience class that provides a default implementation of the\n * {@link BoxAndWhiskerCategoryDataset} interface.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_21/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "span_end": 187,
        "name": "DefaultBoxAndWhiskerCategoryDataset",
        "start_line": 72,
        "span_start": 188,
        "bug_name": "Chart_21",
        "type": "class",
        "end_line": 777
      },
      {
        "javadoc": "/**\n * A convenience class that provides a default implementation of the\n * {@link BoxAndWhiskerCategoryDataset} interface.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_21/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "span_end": 741,
        "name": "DefaultBoxAndWhiskerCategoryDataset",
        "start_line": 72,
        "span_start": 741,
        "bug_name": "Chart_21",
        "type": "class",
        "end_line": 777
      }
    ]
  },
  "Chart_22": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * A data structure that stores zero, one or many objects, where each object is\n * associated with two keys (a 'row' key and a 'column' key).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_22/source/org/jfree/data/KeyedObjects2D.java",
        "span_end": 233,
        "name": "KeyedObjects2D",
        "start_line": 57,
        "span_start": 231,
        "bug_name": "Chart_22",
        "type": "class",
        "end_line": 466
      },
      {
        "javadoc": "/**\n * A data structure that stores zero, one or many objects, where each object is\n * associated with two keys (a 'row' key and a 'column' key).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_22/source/org/jfree/data/KeyedObjects2D.java",
        "span_end": 319,
        "name": "KeyedObjects2D",
        "start_line": 57,
        "span_start": 318,
        "bug_name": "Chart_22",
        "type": "class",
        "end_line": 466
      },
      {
        "javadoc": "/**\n * A data structure that stores zero, one or many objects, where each object is\n * associated with two keys (a 'row' key and a 'column' key).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_22/source/org/jfree/data/KeyedObjects2D.java",
        "span_end": 344,
        "name": "KeyedObjects2D",
        "start_line": 57,
        "span_start": 345,
        "bug_name": "Chart_22",
        "type": "class",
        "end_line": 466
      },
      {
        "javadoc": "/**\n * A data structure that stores zero, one or many objects, where each object is\n * associated with two keys (a 'row' key and a 'column' key).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_22/source/org/jfree/data/KeyedObjects2D.java",
        "span_end": 378,
        "name": "KeyedObjects2D",
        "start_line": 57,
        "span_start": 378,
        "bug_name": "Chart_22",
        "type": "class",
        "end_line": 466
      }
    ]
  },
  "Chart_25": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * A renderer that handles the drawing a bar plot where\n * each bar has a mean value and a standard deviation line.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 258,
        "name": "StatisticalBarRenderer",
        "start_line": 93,
        "span_start": 259,
        "bug_name": "Chart_25",
        "type": "class",
        "end_line": 555
      },
      {
        "javadoc": "/**\n * A renderer that handles the drawing a bar plot where\n * each bar has a mean value and a standard deviation line.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 315,
        "name": "StatisticalBarRenderer",
        "start_line": 93,
        "span_start": 315,
        "bug_name": "Chart_25",
        "type": "class",
        "end_line": 555
      },
      {
        "javadoc": "/**\n * A renderer that handles the drawing a bar plot where\n * each bar has a mean value and a standard deviation line.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 343,
        "name": "StatisticalBarRenderer",
        "start_line": 93,
        "span_start": 344,
        "bug_name": "Chart_25",
        "type": "class",
        "end_line": 555
      },
      {
        "javadoc": "/**\n * A renderer that handles the drawing a bar plot where\n * each bar has a mean value and a standard deviation line.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 402,
        "name": "StatisticalBarRenderer",
        "start_line": 93,
        "span_start": 403,
        "bug_name": "Chart_25",
        "type": "class",
        "end_line": 555
      },
      {
        "javadoc": "/**\n * A renderer that handles the drawing a bar plot where\n * each bar has a mean value and a standard deviation line.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 459,
        "name": "StatisticalBarRenderer",
        "start_line": 93,
        "span_start": 459,
        "bug_name": "Chart_25",
        "type": "class",
        "end_line": 555
      },
      {
        "javadoc": "/**\n * A renderer that handles the drawing a bar plot where\n * each bar has a mean value and a standard deviation line.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 486,
        "name": "StatisticalBarRenderer",
        "start_line": 93,
        "span_start": 487,
        "bug_name": "Chart_25",
        "type": "class",
        "end_line": 555
      }
    ]
  },
  "Cli_1": {
    "bug_count": 9,
    "entries": [
      {
        "javadoc": "/**\n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 51,
        "name": "CommandLine",
        "start_line": 40,
        "span_start": 46,
        "bug_name": "Cli_1",
        "type": "class",
        "end_line": 316
      },
      {
        "javadoc": "/**\n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 69,
        "name": "CommandLine",
        "start_line": 40,
        "span_start": 69,
        "bug_name": "Cli_1",
        "type": "class",
        "end_line": 316
      },
      {
        "javadoc": "/**\n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 98,
        "name": "CommandLine",
        "start_line": 40,
        "span_start": 93,
        "bug_name": "Cli_1",
        "type": "class",
        "end_line": 316
      },
      {
        "javadoc": "/**\n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 158,
        "name": "CommandLine",
        "start_line": 40,
        "span_start": 149,
        "bug_name": "Cli_1",
        "type": "class",
        "end_line": 316
      },
      {
        "javadoc": "/**\n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 169,
        "name": "CommandLine",
        "start_line": 40,
        "span_start": 169,
        "bug_name": "Cli_1",
        "type": "class",
        "end_line": 316
      },
      {
        "javadoc": "/**\n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 287,
        "name": "CommandLine",
        "start_line": 40,
        "span_start": 277,
        "bug_name": "Cli_1",
        "type": "class",
        "end_line": 316
      },
      {
        "javadoc": "/**\n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 298,
        "name": "CommandLine",
        "start_line": 40,
        "span_start": 298,
        "bug_name": "Cli_1",
        "type": "class",
        "end_line": 316
      },
      {
        "javadoc": "/**\n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 308,
        "name": "CommandLine",
        "start_line": 40,
        "span_start": 308,
        "bug_name": "Cli_1",
        "type": "class",
        "end_line": 316
      },
      {
        "javadoc": "/**\n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 316,
        "name": "CommandLine",
        "start_line": 40,
        "span_start": 316,
        "bug_name": "Cli_1",
        "type": "class",
        "end_line": 316
      }
    ]
  },
  "Cli_7": {
    "bug_count": 1,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Cli_7/src/java/org/apache/commons/cli2/builder/PatternBuilder.java",
        "span_end": 67,
        "name": "PatternBuilder",
        "start_line": 36,
        "span_start": 67,
        "bug_name": "Cli_7",
        "type": "class",
        "end_line": 202
      }
    ]
  },
  "Cli_10": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * <p><code>Parser</code> creates {@link CommandLine}s.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_10/src/java/org/apache/commons/cli/Parser.java",
        "span_end": 46,
        "name": "Parser",
        "start_line": 33,
        "span_start": 46,
        "bug_name": "Cli_10",
        "type": "class",
        "end_line": 431
      }
    ]
  },
  "Cli_13": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * A CommandLine that detected values and options can be written to.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_13/src/java/org/apache/commons/cli2/WriteableCommandLine.java",
        "span_end": 46,
        "name": "WriteableCommandLine",
        "start_line": 24,
        "span_start": 47,
        "bug_name": "Cli_13",
        "type": "interface",
        "end_line": 85
      },
      {
        "javadoc": "/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
        "span_end": 134,
        "name": "WriteableCommandLineImpl",
        "start_line": 38,
        "span_start": 132,
        "bug_name": "Cli_13",
        "type": "class",
        "end_line": 230
      },
      {
        "javadoc": "/**\n * An implementation of an Argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java",
        "span_end": 144,
        "name": "ArgumentImpl",
        "start_line": 40,
        "span_start": 144,
        "bug_name": "Cli_13",
        "type": "class",
        "end_line": 375
      }
    ]
  },
  "Cli_14": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * An implementation of Group\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_14/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "span_end": 252,
        "name": "GroupImpl",
        "start_line": 44,
        "span_start": 250,
        "bug_name": "Cli_14",
        "type": "class",
        "end_line": 489
      },
      {
        "javadoc": "/**\n * An implementation of Group\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_14/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "span_end": 261,
        "name": "GroupImpl",
        "start_line": 44,
        "span_start": 261,
        "bug_name": "Cli_14",
        "type": "class",
        "end_line": 489
      }
    ]
  },
  "Cli_16": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * The super type of all options representing a particular element of the\n * command line interface.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_16/src/java/org/apache/commons/cli2/Option.java",
        "span_end": 205,
        "name": "Option",
        "start_line": 28,
        "span_start": 206,
        "bug_name": "Cli_16",
        "type": "interface",
        "end_line": 216
      },
      {
        "javadoc": "/**\n * The super type of all options representing a particular element of the\n * command line interface.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_16/src/java/org/apache/commons/cli2/Option.java",
        "span_end": 216,
        "name": "Option",
        "start_line": 28,
        "span_start": 216,
        "bug_name": "Cli_16",
        "type": "interface",
        "end_line": 216
      },
      {
        "javadoc": "/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_16/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
        "span_end": 73,
        "name": "WriteableCommandLineImpl",
        "start_line": 39,
        "span_start": 74,
        "bug_name": "Cli_16",
        "type": "class",
        "end_line": 276
      },
      {
        "javadoc": "/**\n * An implementation of Group\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_16/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "span_end": 91,
        "name": "GroupImpl",
        "start_line": 44,
        "span_start": 92,
        "bug_name": "Cli_16",
        "type": "class",
        "end_line": 489
      },
      {
        "javadoc": "/**\n * A base implementation of Option providing limited ground work for further\n * Option implementations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_16/src/java/org/apache/commons/cli2/option/OptionImpl.java",
        "span_end": 35,
        "name": "OptionImpl",
        "start_line": 33,
        "span_start": 36,
        "bug_name": "Cli_16",
        "type": "class",
        "end_line": 163
      },
      {
        "javadoc": "/**\n * A base implementation of Option providing limited ground work for further\n * Option implementations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_16/src/java/org/apache/commons/cli2/option/OptionImpl.java",
        "span_end": 128,
        "name": "OptionImpl",
        "start_line": 33,
        "span_start": 128,
        "bug_name": "Cli_16",
        "type": "class",
        "end_line": 163
      }
    ]
  },
  "Cli_18": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_18/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 128,
        "name": "PosixParser",
        "start_line": 33,
        "span_start": 128,
        "bug_name": "Cli_18",
        "type": "class",
        "end_line": 300
      },
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_18/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 216,
        "name": "PosixParser",
        "start_line": 33,
        "span_start": 213,
        "bug_name": "Cli_18",
        "type": "class",
        "end_line": 300
      },
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @see Parser\n * @version $Revision$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_18/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 240,
        "name": "PosixParser",
        "start_line": 33,
        "span_start": 241,
        "bug_name": "Cli_18",
        "type": "class",
        "end_line": 300
      }
    ]
  },
  "Cli_21": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * A CommandLine that detected values and options can be written to.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_21/src/java/org/apache/commons/cli2/WriteableCommandLine.java",
        "span_end": 101,
        "name": "WriteableCommandLine",
        "start_line": 24,
        "span_start": 102,
        "bug_name": "Cli_21",
        "type": "interface",
        "end_line": 110
      },
      {
        "javadoc": "/**\n * A CommandLine that detected values and options can be written to.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_21/src/java/org/apache/commons/cli2/WriteableCommandLine.java",
        "span_end": 110,
        "name": "WriteableCommandLine",
        "start_line": 24,
        "span_start": 110,
        "bug_name": "Cli_21",
        "type": "interface",
        "end_line": 110
      },
      {
        "javadoc": "/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_21/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
        "span_end": 50,
        "name": "WriteableCommandLineImpl",
        "start_line": 39,
        "span_start": 51,
        "bug_name": "Cli_21",
        "type": "class",
        "end_line": 298
      },
      {
        "javadoc": "/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_21/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
        "span_end": 65,
        "name": "WriteableCommandLineImpl",
        "start_line": 39,
        "span_start": 63,
        "bug_name": "Cli_21",
        "type": "class",
        "end_line": 298
      },
      {
        "javadoc": "/**\n * A WriteableCommandLine implementation allowing Options to write their\n * processed information to a CommandLine.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_21/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
        "span_end": 245,
        "name": "WriteableCommandLineImpl",
        "start_line": 39,
        "span_start": 234,
        "bug_name": "Cli_21",
        "type": "class",
        "end_line": 298
      },
      {
        "javadoc": "/**\n * An implementation of Group\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_21/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "span_end": 513,
        "name": "GroupImpl",
        "start_line": 44,
        "span_start": 513,
        "bug_name": "Cli_21",
        "type": "class",
        "end_line": 515
      }
    ]
  },
  "Cli_22": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 40,
        "name": "PosixParser",
        "start_line": 32,
        "span_start": 41,
        "bug_name": "Cli_22",
        "type": "class",
        "end_line": 272
      },
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 119,
        "name": "PosixParser",
        "start_line": 32,
        "span_start": 116,
        "bug_name": "Cli_22",
        "type": "class",
        "end_line": 272
      },
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 152,
        "name": "PosixParser",
        "start_line": 32,
        "span_start": 146,
        "bug_name": "Cli_22",
        "type": "class",
        "end_line": 272
      },
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 187,
        "name": "PosixParser",
        "start_line": 32,
        "span_start": 184,
        "bug_name": "Cli_22",
        "type": "class",
        "end_line": 272
      },
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 210,
        "name": "PosixParser",
        "start_line": 32,
        "span_start": 211,
        "bug_name": "Cli_22",
        "type": "class",
        "end_line": 272
      },
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 243,
        "name": "PosixParser",
        "start_line": 32,
        "span_start": 243,
        "bug_name": "Cli_22",
        "type": "class",
        "end_line": 272
      },
      {
        "javadoc": "/**\n * The class PosixParser provides an implementation of the\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 262,
        "name": "PosixParser",
        "start_line": 32,
        "span_start": 262,
        "bug_name": "Cli_22",
        "type": "class",
        "end_line": 272
      }
    ]
  },
  "Cli_23": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_23/src/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 824,
        "name": "HelpFormatter",
        "start_line": 35,
        "span_start": 824,
        "bug_name": "Cli_23",
        "type": "class",
        "end_line": 974
      },
      {
        "javadoc": "/**\n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_23/src/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 836,
        "name": "HelpFormatter",
        "start_line": 35,
        "span_start": 833,
        "bug_name": "Cli_23",
        "type": "class",
        "end_line": 974
      }
    ]
  },
  "Cli_26": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_26/src/java/org/apache/commons/cli/OptionBuilder.java",
        "span_end": 349,
        "name": "OptionBuilder",
        "start_line": 31,
        "span_start": 348,
        "bug_name": "Cli_26",
        "type": "class",
        "end_line": 365
      },
      {
        "javadoc": "/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_26/src/java/org/apache/commons/cli/OptionBuilder.java",
        "span_end": 360,
        "name": "OptionBuilder",
        "start_line": 31,
        "span_start": 359,
        "bug_name": "Cli_26",
        "type": "class",
        "end_line": 365
      }
    ]
  },
  "Cli_30": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Default parser.\n *\n * @author Emmanuel Bourg\n * @version $Revision$, $Date$\n * @since 1.3\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_30/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "span_end": 155,
        "name": "DefaultParser",
        "start_line": 33,
        "span_start": 150,
        "bug_name": "Cli_30",
        "type": "class",
        "end_line": 683
      },
      {
        "javadoc": "/**\n * <code>Parser</code> creates {@link CommandLine}s.\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @deprecated The two-pass parsing with the flatten method is not enough flexible to handle complex cases\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_30/src/main/java/org/apache/commons/cli/Parser.java",
        "span_end": 268,
        "name": "Parser",
        "start_line": 35,
        "span_start": 263,
        "bug_name": "Cli_30",
        "type": "class",
        "end_line": 424
      }
    ]
  },
  "Cli_31": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_31/src/main/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 656,
        "name": "HelpFormatter",
        "start_line": 35,
        "span_start": 653,
        "bug_name": "Cli_31",
        "type": "class",
        "end_line": 1020
      },
      {
        "javadoc": "/**\n * <p>Describes a single command-line option.  It maintains\n * information regarding the short-name of the option, the long-name,\n * if any exists, a flag indicating if an argument is required for\n * this option, and a self-documenting description of the option.</p>\n *\n * <p>An Option is not created independantly, but is create through\n * an instance of {@link Options}.<p>\n *\n * @see org.apache.commons.cli.Options\n * @see org.apache.commons.cli.CommandLine\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_31/src/main/java/org/apache/commons/cli/Option.java",
        "span_end": 57,
        "name": "Option",
        "start_line": 39,
        "span_start": 57,
        "bug_name": "Cli_31",
        "type": "class",
        "end_line": 705
      },
      {
        "javadoc": "/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_31/src/main/java/org/apache/commons/cli/OptionBuilder.java",
        "span_end": 80,
        "name": "OptionBuilder",
        "start_line": 31,
        "span_start": 80,
        "bug_name": "Cli_31",
        "type": "class",
        "end_line": 375
      }
    ]
  },
  "Cli_33": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_33/src/main/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 730,
        "name": "HelpFormatter",
        "start_line": 39,
        "span_start": 730,
        "bug_name": "Cli_33",
        "type": "class",
        "end_line": 1025
      },
      {
        "javadoc": "/**\n * A formatter of help messages for the current command line options\n *\n * @author Slawek Zachcial\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_33/src/main/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 901,
        "name": "HelpFormatter",
        "start_line": 39,
        "span_start": 900,
        "bug_name": "Cli_33",
        "type": "class",
        "end_line": 1025
      }
    ]
  },
  "Cli_34": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Describes a single command-line option.  It maintains\n * information regarding the short-name of the option, the long-name,\n * if any exists, a flag indicating if an argument is required for\n * this option, and a self-documenting description of the option.</p>\n *\n * <p>An Option is not created independantly, but is create through\n * an instance of {@link Options}.<p>\n *\n * @see org.apache.commons.cli.Options\n * @see org.apache.commons.cli.CommandLine\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @version $Revision$, $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_34/src/main/java/org/apache/commons/cli/Option.java",
        "span_end": 72,
        "name": "Option",
        "start_line": 39,
        "span_start": 72,
        "bug_name": "Cli_34",
        "type": "class",
        "end_line": 705
      },
      {
        "javadoc": "/**\n * OptionBuilder allows the user to create Options using descriptive methods.\n *\n * <p>Details on the Builder pattern can be found at\n * <a href=\"http://c2.com/cgi-bin/wiki?BuilderPattern\">\n * http://c2.com/cgi-bin/wiki?BuilderPattern</a>.</p>\n *\n * <p>This class is NOT thread safe. See <a href=\"https://issues.apache.org/jira/browse/CLI-209\">CLI-209</a></p>\n *\n * @author John Keyes (john at integralsource.com)\n * @version $Revision$, $Date$\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_34/src/main/java/org/apache/commons/cli/OptionBuilder.java",
        "span_end": 84,
        "name": "OptionBuilder",
        "start_line": 33,
        "span_start": 84,
        "bug_name": "Cli_34",
        "type": "class",
        "end_line": 377
      }
    ]
  },
  "Cli_36": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A group of mutually exclusive options.\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_36/src/main/java/org/apache/commons/cli/OptionGroup.java",
        "span_end": 37,
        "name": "OptionGroup",
        "start_line": 31,
        "span_start": 37,
        "bug_name": "Cli_36",
        "type": "class",
        "end_line": 179
      },
      {
        "javadoc": "/**\n * Main entry-point into the library.\n * <p>\n * Options represents a collection of {@link Option} objects, which\n * describe the possible options for a command-line.\n * <p>\n * It may flexibly parse long and short options, with or without\n * values.  Additionally, it may parse only a portion of a commandline,\n * allowing for flexible multi-stage parsing.\n *\n * @see org.apache.commons.cli.CommandLine\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_36/src/main/java/org/apache/commons/cli/Options.java",
        "span_end": 60,
        "name": "Options",
        "start_line": 43,
        "span_start": 60,
        "bug_name": "Cli_36",
        "type": "class",
        "end_line": 326
      }
    ]
  },
  "Cli_39": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * This is a temporary implementation. TypeHandler will handle the\n * pluggableness of OptionTypes and it will direct all of these types\n * of conversion functionalities to ConvertUtils component in Commons\n * already. BeanUtils I think.\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_39/src/main/java/org/apache/commons/cli/TypeHandler.java",
        "span_end": 92,
        "name": "TypeHandler",
        "start_line": 37,
        "span_start": 92,
        "bug_name": "Cli_39",
        "type": "class",
        "end_line": 251
      },
      {
        "javadoc": "/**\n * This is a temporary implementation. TypeHandler will handle the\n * pluggableness of OptionTypes and it will direct all of these types\n * of conversion functionalities to ConvertUtils component in Commons\n * already. BeanUtils I think.\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Cli_39/src/main/java/org/apache/commons/cli/TypeHandler.java",
        "span_end": 233,
        "name": "TypeHandler",
        "start_line": 37,
        "span_start": 234,
        "bug_name": "Cli_39",
        "type": "class",
        "end_line": 251
      }
    ]
  },
  "Closure_3": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * Inline variables when possible. Using the information from\n * {@link MaybeReachingVariableUse} and {@link MustBeReachingVariableDef},\n * this pass attempts to inline a variable by placing the value at the\n * definition where the variable is used. The basic requirements for inlining\n * are the following:\n *\n * <ul>\n * <li> There is exactly one reaching definition at the use of that variable\n * </li>\n * <li> There is exactly one use for that definition of the variable\n * </li>\n * </ul>\n *\n * <p>Other requirements can be found in {@link Candidate#canInline}. Currently\n * this pass does not operate on the global scope due to compilation time.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 155,
        "name": "FlowSensitiveInlineVariables",
        "start_line": 60,
        "span_start": 155,
        "bug_name": "Closure_3",
        "type": "class",
        "end_line": 533
      },
      {
        "javadoc": "/**\n * Inline variables when possible. Using the information from\n * {@link MaybeReachingVariableUse} and {@link MustBeReachingVariableDef},\n * this pass attempts to inline a variable by placing the value at the\n * definition where the variable is used. The basic requirements for inlining\n * are the following:\n *\n * <ul>\n * <li> There is exactly one reaching definition at the use of that variable\n * </li>\n * <li> There is exactly one use for that definition of the variable\n * </li>\n * </ul>\n *\n * <p>Other requirements can be found in {@link Candidate#canInline}. Currently\n * this pass does not operate on the global scope due to compilation time.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 280,
        "name": "FlowSensitiveInlineVariables",
        "start_line": 60,
        "span_start": 280,
        "bug_name": "Closure_3",
        "type": "class",
        "end_line": 533
      },
      {
        "javadoc": "/**\n * Models the connection between a definition and a use of that definition.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 280,
        "name": "Candidate",
        "start_line": 250,
        "span_start": 280,
        "bug_name": "Closure_3",
        "type": "class",
        "end_line": 491
      },
      {
        "javadoc": "/**\n * Inline variables when possible. Using the information from\n * {@link MaybeReachingVariableUse} and {@link MustBeReachingVariableDef},\n * this pass attempts to inline a variable by placing the value at the\n * definition where the variable is used. The basic requirements for inlining\n * are the following:\n *\n * <ul>\n * <li> There is exactly one reaching definition at the use of that variable\n * </li>\n * <li> There is exactly one use for that definition of the variable\n * </li>\n * </ul>\n *\n * <p>Other requirements can be found in {@link Candidate#canInline}. Currently\n * this pass does not operate on the global scope due to compilation time.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 374,
        "name": "FlowSensitiveInlineVariables",
        "start_line": 60,
        "span_start": 375,
        "bug_name": "Closure_3",
        "type": "class",
        "end_line": 533
      },
      {
        "javadoc": "/**\n * Models the connection between a definition and a use of that definition.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 374,
        "name": "Candidate",
        "start_line": 250,
        "span_start": 375,
        "bug_name": "Closure_3",
        "type": "class",
        "end_line": 491
      }
    ]
  },
  "Closure_4": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A {@code NamedType} is a named reference to some other type.  This provides\n * a convenient mechanism for implementing forward references to types; a\n * {@code NamedType} can be used as a placeholder until its reference is\n * resolved.  It is also useful for representing type names in JsDoc type\n * annotations, some of which may never be resolved (as they may refer to\n * types in host systems not yet supported by JSCompiler, such as the JVM.)<p>\n *\n * An important distinction: {@code NamedType} is a type name reference,\n * whereas {@link ObjectType} is a named type object, such as an Enum name.\n * The Enum itself is typically used only in a dot operator to name one of its\n * constants, or in a declaration, where its name will appear in a\n * NamedType.<p>\n *\n * A {@code NamedType} is not currently a full-fledged typedef, because it\n * cannot resolve to any JavaScript type.  It can only resolve to a named\n * {@link JSTypeRegistry} type, or to {@link FunctionType} or\n * {@link EnumType}.<p>\n *\n * If full typedefs are to be supported, then each method on each type class\n * needs to be reviewed to make sure that everything works correctly through\n * typedefs.  Alternatively, we would need to walk through the parse tree and\n * unroll each reference to a {@code NamedType} to its resolved type before\n * applying the rest of the analysis.<p>\n *\n * TODO(user): Revisit all of this logic.<p>\n *\n * The existing typing logic is hacky.  Unresolved types should get processed\n * in a more consistent way, but with the Rhino merge coming, there will be\n * much that has to be changed.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_4/src/com/google/javascript/rhino/jstype/NamedType.java",
        "span_end": 190,
        "name": "NamedType",
        "start_line": 82,
        "span_start": 190,
        "bug_name": "Closure_4",
        "type": "class",
        "end_line": 400
      },
      {
        "javadoc": "/**\n * A {@code NamedType} is a named reference to some other type.  This provides\n * a convenient mechanism for implementing forward references to types; a\n * {@code NamedType} can be used as a placeholder until its reference is\n * resolved.  It is also useful for representing type names in JsDoc type\n * annotations, some of which may never be resolved (as they may refer to\n * types in host systems not yet supported by JSCompiler, such as the JVM.)<p>\n *\n * An important distinction: {@code NamedType} is a type name reference,\n * whereas {@link ObjectType} is a named type object, such as an Enum name.\n * The Enum itself is typically used only in a dot operator to name one of its\n * constants, or in a declaration, where its name will appear in a\n * NamedType.<p>\n *\n * A {@code NamedType} is not currently a full-fledged typedef, because it\n * cannot resolve to any JavaScript type.  It can only resolve to a named\n * {@link JSTypeRegistry} type, or to {@link FunctionType} or\n * {@link EnumType}.<p>\n *\n * If full typedefs are to be supported, then each method on each type class\n * needs to be reviewed to make sure that everything works correctly through\n * typedefs.  Alternatively, we would need to walk through the parse tree and\n * unroll each reference to a {@code NamedType} to its resolved type before\n * applying the rest of the analysis.<p>\n *\n * TODO(user): Revisit all of this logic.<p>\n *\n * The existing typing logic is hacky.  Unresolved types should get processed\n * in a more consistent way, but with the Rhino merge coming, there will be\n * much that has to be changed.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_4/src/com/google/javascript/rhino/jstype/NamedType.java",
        "span_end": 202,
        "name": "NamedType",
        "start_line": 82,
        "span_start": 202,
        "bug_name": "Closure_4",
        "type": "class",
        "end_line": 400
      }
    ]
  },
  "Closure_6": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * A central reporter for all type violations: places where the programmer\n * has annotated a variable (or property) with one type, but has assigned\n * another type to it.\n *\n * Also doubles as a central repository for all type violations, so that\n * type-based optimizations (like AmbiguateProperties) can be fault-tolerant.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_6/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 368,
        "name": "TypeValidator",
        "start_line": 58,
        "span_start": 366,
        "bug_name": "Closure_6",
        "type": "class",
        "end_line": 840
      },
      {
        "javadoc": "/**\n * A central reporter for all type violations: places where the programmer\n * has annotated a variable (or property) with one type, but has assigned\n * another type to it.\n *\n * Also doubles as a central repository for all type violations, so that\n * type-based optimizations (like AmbiguateProperties) can be fault-tolerant.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_6/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 385,
        "name": "TypeValidator",
        "start_line": 58,
        "span_start": 385,
        "bug_name": "Closure_6",
        "type": "class",
        "end_line": 840
      },
      {
        "javadoc": "/**\n * A central reporter for all type violations: places where the programmer\n * has annotated a variable (or property) with one type, but has assigned\n * another type to it.\n *\n * Also doubles as a central repository for all type violations, so that\n * type-based optimizations (like AmbiguateProperties) can be fault-tolerant.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_6/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 409,
        "name": "TypeValidator",
        "start_line": 58,
        "span_start": 405,
        "bug_name": "Closure_6",
        "type": "class",
        "end_line": 840
      }
    ]
  },
  "Closure_9": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Rewrites a CommonJS module http://wiki.commonjs.org/wiki/Modules/1.1.1\n * into a form that can be safely concatenated.\n * Does not add a function around the module body but instead adds suffixes\n * to global variables to avoid conflicts.\n * Calls to require are changed to reference the required module directly.\n * goog.provide and goog.require are emitted for closure compiler automatic\n * ordering.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_9/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 118,
        "name": "ProcessCommonJSModules",
        "start_line": 38,
        "span_start": 119,
        "bug_name": "Closure_9",
        "type": "class",
        "end_line": 286
      },
      {
        "javadoc": "/**\n * Rewrites a CommonJS module http://wiki.commonjs.org/wiki/Modules/1.1.1\n * into a form that can be safely concatenated.\n * Does not add a function around the module body but instead adds suffixes\n * to global variables to avoid conflicts.\n * Calls to require are changed to reference the required module directly.\n * goog.provide and goog.require are emitted for closure compiler automatic\n * ordering.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_9/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 183,
        "name": "ProcessCommonJSModules",
        "start_line": 38,
        "span_start": 183,
        "bug_name": "Closure_9",
        "type": "class",
        "end_line": 286
      },
      {
        "javadoc": "/**\n * Visits require, every \"script\" and special module.exports assignments.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_9/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 183,
        "name": "ProcessCommonJsModulesCallback",
        "start_line": 130,
        "span_start": 183,
        "bug_name": "Closure_9",
        "type": "class",
        "end_line": 251
      }
    ]
  },
  "Closure_16": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 180,
        "name": "ScopedAliases",
        "start_line": 54,
        "span_start": 170,
        "bug_name": "Closure_16",
        "type": "class",
        "end_line": 478
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 180,
        "name": "AliasedTypeNode",
        "start_line": 168,
        "span_start": 170,
        "bug_name": "Closure_16",
        "type": "class",
        "end_line": 182
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 468,
        "name": "ScopedAliases",
        "start_line": 54,
        "span_start": 468,
        "bug_name": "Closure_16",
        "type": "class",
        "end_line": 478
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 468,
        "name": "Traversal",
        "start_line": 185,
        "span_start": 468,
        "bug_name": "Closure_16",
        "type": "class",
        "end_line": 477
      }
    ]
  },
  "Closure_21": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Checks for non side effecting statements such as\n * <pre>\n * var s = \"this string is \"\n *         \"continued on the next line but you forgot the +\";\n * x == foo();  // should that be '='?\n * foo();;  // probably just a stray-semicolon. Doesn't hurt to check though\n * </p>\n * and generates warnings.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java",
        "span_end": 101,
        "name": "CheckSideEffects",
        "start_line": 40,
        "span_start": 101,
        "bug_name": "Closure_21",
        "type": "class",
        "end_line": 213
      },
      {
        "javadoc": "/**\n * Checks for non side effecting statements such as\n * <pre>\n * var s = \"this string is \"\n *         \"continued on the next line but you forgot the +\";\n * x == foo();  // should that be '='?\n * foo();;  // probably just a stray-semicolon. Doesn't hurt to check though\n * </p>\n * and generates warnings.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java",
        "span_end": 130,
        "name": "CheckSideEffects",
        "start_line": 40,
        "span_start": 113,
        "bug_name": "Closure_21",
        "type": "class",
        "end_line": 213
      }
    ]
  },
  "Closure_24": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 279,
        "name": "ScopedAliases",
        "start_line": 51,
        "span_start": 278,
        "bug_name": "Closure_24",
        "type": "class",
        "end_line": 412
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 279,
        "name": "Traversal",
        "start_line": 182,
        "span_start": 278,
        "bug_name": "Closure_24",
        "type": "class",
        "end_line": 411
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 295,
        "name": "ScopedAliases",
        "start_line": 51,
        "span_start": 287,
        "bug_name": "Closure_24",
        "type": "class",
        "end_line": 412
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 295,
        "name": "Traversal",
        "start_line": 182,
        "span_start": 287,
        "bug_name": "Closure_24",
        "type": "class",
        "end_line": 411
      }
    ]
  },
  "Closure_25": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Type inference within a script node or a function body, using the data-flow\n * analysis framework.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_25/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 1038,
        "name": "TypeInference",
        "start_line": 58,
        "span_start": 1036,
        "bug_name": "Closure_25",
        "type": "class",
        "end_line": 1400
      },
      {
        "javadoc": "/**\n * Type inference within a script node or a function body, using the data-flow\n * analysis framework.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_25/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 1061,
        "name": "TypeInference",
        "start_line": 58,
        "span_start": 1055,
        "bug_name": "Closure_25",
        "type": "class",
        "end_line": 1400
      }
    ]
  },
  "Closure_26": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * Rewrites a CommonJS module http://wiki.commonjs.org/wiki/Modules/1.1.1\n * into a form that can be safely concatenated.\n * Does not add a function around the module body but instead adds suffixes\n * to global variables to avoid conflicts.\n * Calls to require are changed to reference the required module directly.\n * goog.provide and goog.require are emitted for closure compiler automatic\n * ordering.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 127,
        "name": "ProcessCommonJSModules",
        "start_line": 39,
        "span_start": 128,
        "bug_name": "Closure_26",
        "type": "class",
        "end_line": 276
      },
      {
        "javadoc": "/**\n * Visits require, every \"script\" and special module.exports assignments.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 127,
        "name": "ProcessCommonJsModulesCallback",
        "start_line": 124,
        "span_start": 128,
        "bug_name": "Closure_26",
        "type": "class",
        "end_line": 241
      },
      {
        "javadoc": "/**\n * Rewrites a CommonJS module http://wiki.commonjs.org/wiki/Modules/1.1.1\n * into a form that can be safely concatenated.\n * Does not add a function around the module body but instead adds suffixes\n * to global variables to avoid conflicts.\n * Calls to require are changed to reference the required module directly.\n * goog.provide and goog.require are emitted for closure compiler automatic\n * ordering.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 206,
        "name": "ProcessCommonJSModules",
        "start_line": 39,
        "span_start": 207,
        "bug_name": "Closure_26",
        "type": "class",
        "end_line": 276
      },
      {
        "javadoc": "/**\n * Visits require, every \"script\" and special module.exports assignments.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 206,
        "name": "ProcessCommonJsModulesCallback",
        "start_line": 124,
        "span_start": 207,
        "bug_name": "Closure_26",
        "type": "class",
        "end_line": 241
      },
      {
        "javadoc": "/**\n * Rewrites a CommonJS module http://wiki.commonjs.org/wiki/Modules/1.1.1\n * into a form that can be safely concatenated.\n * Does not add a function around the module body but instead adds suffixes\n * to global variables to avoid conflicts.\n * Calls to require are changed to reference the required module directly.\n * goog.provide and goog.require are emitted for closure compiler automatic\n * ordering.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 227,
        "name": "ProcessCommonJSModules",
        "start_line": 39,
        "span_start": 228,
        "bug_name": "Closure_26",
        "type": "class",
        "end_line": 276
      },
      {
        "javadoc": "/**\n * Visits require, every \"script\" and special module.exports assignments.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 227,
        "name": "ProcessCommonJsModulesCallback",
        "start_line": 124,
        "span_start": 228,
        "bug_name": "Closure_26",
        "type": "class",
        "end_line": 241
      }
    ]
  },
  "Closure_27": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * An AST construction helper class\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_27/src/com/google/javascript/rhino/IR.java",
        "span_end": 110,
        "name": "IR",
        "start_line": 49,
        "span_start": 111,
        "bug_name": "Closure_27",
        "type": "class",
        "end_line": 582
      },
      {
        "javadoc": "/**\n * An AST construction helper class\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_27/src/com/google/javascript/rhino/IR.java",
        "span_end": 225,
        "name": "IR",
        "start_line": 49,
        "span_start": 224,
        "bug_name": "Closure_27",
        "type": "class",
        "end_line": 582
      },
      {
        "javadoc": "/**\n * An AST construction helper class\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_27/src/com/google/javascript/rhino/IR.java",
        "span_end": 233,
        "name": "IR",
        "start_line": 49,
        "span_start": 233,
        "bug_name": "Closure_27",
        "type": "class",
        "end_line": 582
      }
    ]
  },
  "Closure_29": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * Using the infrastructure provided by {@link ReferenceCollectingCallback},\n * identify variables that are only ever assigned to object literals\n * and that are never used in entirety, and expand the objects into\n * individual variables.\n *\n * Based on the InlineVariables pass\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_29/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 156,
        "name": "InlineObjectLiterals",
        "start_line": 48,
        "span_start": 157,
        "bug_name": "Closure_29",
        "type": "class",
        "end_line": 456
      },
      {
        "javadoc": "/**\n * Builds up information about nodes in each scope. When exiting the\n * scope, inspects all variables in that scope, and inlines any\n * that we can.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_29/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 156,
        "name": "InliningBehavior",
        "start_line": 75,
        "span_start": 157,
        "bug_name": "Closure_29",
        "type": "class",
        "end_line": 455
      },
      {
        "javadoc": "/**\n * Using the infrastructure provided by {@link ReferenceCollectingCallback},\n * identify variables that are only ever assigned to object literals\n * and that are never used in entirety, and expand the objects into\n * individual variables.\n *\n * Based on the InlineVariables pass\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_29/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 180,
        "name": "InlineObjectLiterals",
        "start_line": 48,
        "span_start": 181,
        "bug_name": "Closure_29",
        "type": "class",
        "end_line": 456
      },
      {
        "javadoc": "/**\n * Builds up information about nodes in each scope. When exiting the\n * scope, inspects all variables in that scope, and inlines any\n * that we can.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_29/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 180,
        "name": "InliningBehavior",
        "start_line": 75,
        "span_start": 181,
        "bug_name": "Closure_29",
        "type": "class",
        "end_line": 455
      },
      {
        "javadoc": "/**\n * Using the infrastructure provided by {@link ReferenceCollectingCallback},\n * identify variables that are only ever assigned to object literals\n * and that are never used in entirety, and expand the objects into\n * individual variables.\n *\n * Based on the InlineVariables pass\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_29/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 215,
        "name": "InlineObjectLiterals",
        "start_line": 48,
        "span_start": 216,
        "bug_name": "Closure_29",
        "type": "class",
        "end_line": 456
      },
      {
        "javadoc": "/**\n * Builds up information about nodes in each scope. When exiting the\n * scope, inspects all variables in that scope, and inlines any\n * that we can.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_29/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 215,
        "name": "InliningBehavior",
        "start_line": 75,
        "span_start": 216,
        "bug_name": "Closure_29",
        "type": "class",
        "end_line": 455
      }
    ]
  },
  "Closure_30": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * Inline variables when possible. Using the information from\n * {@link MaybeReachingVariableUse} and {@link MustBeReachingVariableDef},\n * this pass attempts to inline a variable by placing the value at the\n * definition where the variable is used. The basic requirements for inlining\n * are the following:\n *\n * <ul>\n * <li> There is exactly one reaching definition at the use of that variable\n * </li>\n * <li> There is exactly one use for that definition of the variable\n * </li>\n * </ul>\n *\n * <p>Other requirements can be found in {@link Candidate#canInline}. Currently\n * this pass does not operate on the global scope due to compilation time.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 157,
        "name": "FlowSensitiveInlineVariables",
        "start_line": 56,
        "span_start": 157,
        "bug_name": "Closure_30",
        "type": "class",
        "end_line": 492
      },
      {
        "javadoc": "/**\n * Computes reaching definition for all use of each variables.\n *\n * A definition of {@code A} in {@code A = foo()} is a reaching definition of\n * the use of {@code A} in {@code alert(A)} if all paths from entry node must\n * reaches that definition and it is the last definition before the use.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "span_end": 70,
        "name": "MustBeReachingVariableDef",
        "start_line": 45,
        "span_start": 71,
        "bug_name": "Closure_30",
        "type": "class",
        "end_line": 438
      },
      {
        "javadoc": "/**\n * Abstraction of a local variable definition. It represents the node which\n * a local variable is defined as well as a set of other local variables that\n * this definition reads from. For example N: a = b + foo.bar(c). The\n * definition node will be N, the depending set would be {b,c}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "span_end": 70,
        "name": "Definition",
        "start_line": 68,
        "span_start": 71,
        "bug_name": "Closure_30",
        "type": "class",
        "end_line": 86
      },
      {
        "javadoc": "/**\n * Computes reaching definition for all use of each variables.\n *\n * A definition of {@code A} in {@code A = foo()} is a reaching definition of\n * the use of {@code A} in {@code alert(A)} if all paths from entry node must\n * reaches that definition and it is the last definition before the use.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "span_end": 398,
        "name": "MustBeReachingVariableDef",
        "start_line": 45,
        "span_start": 396,
        "bug_name": "Closure_30",
        "type": "class",
        "end_line": 438
      },
      {
        "javadoc": "/**\n * Computes reaching definition for all use of each variables.\n *\n * A definition of {@code A} in {@code A = foo()} is a reaching definition of\n * the use of {@code A} in {@code alert(A)} if all paths from entry node must\n * reaches that definition and it is the last definition before the use.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "span_end": 429,
        "name": "MustBeReachingVariableDef",
        "start_line": 45,
        "span_start": 430,
        "bug_name": "Closure_30",
        "type": "class",
        "end_line": 438
      }
    ]
  },
  "Closure_32": {
    "bug_count": 4,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Closure_32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1363,
        "name": "JsDocInfoParser",
        "start_line": 47,
        "span_start": 1358,
        "bug_name": "Closure_32",
        "type": "class",
        "end_line": 2350
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1381,
        "name": "JsDocInfoParser",
        "start_line": 47,
        "span_start": 1382,
        "bug_name": "Closure_32",
        "type": "class",
        "end_line": 2350
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1389,
        "name": "JsDocInfoParser",
        "start_line": 47,
        "span_start": 1389,
        "bug_name": "Closure_32",
        "type": "class",
        "end_line": 2350
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1416,
        "name": "JsDocInfoParser",
        "start_line": 47,
        "span_start": 1414,
        "bug_name": "Closure_32",
        "type": "class",
        "end_line": 2350
      }
    ]
  },
  "Closure_34": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * CodeGenerator generates codes from a parse tree, sending it to the specified\n * CodeConsumer.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_34/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 124,
        "name": "CodeGenerator",
        "start_line": 36,
        "span_start": 122,
        "bug_name": "Closure_34",
        "type": "class",
        "end_line": 1230
      },
      {
        "javadoc": "/**\n * CodeGenerator generates codes from a parse tree, sending it to the specified\n * CodeConsumer.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_34/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 754,
        "name": "CodeGenerator",
        "start_line": 36,
        "span_start": 754,
        "bug_name": "Closure_34",
        "type": "class",
        "end_line": 1230
      },
      {
        "javadoc": "/**\n * CodePrinter prints out js code in either pretty format or compact format.\n *\n * @see CodeGenerator\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_34/src/com/google/javascript/jscomp/CodePrinter.java",
        "span_end": 334,
        "name": "CodePrinter",
        "start_line": 35,
        "span_start": 334,
        "bug_name": "Closure_34",
        "type": "class",
        "end_line": 721
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_34/src/com/google/javascript/jscomp/CodePrinter.java",
        "span_end": 334,
        "name": "PrettyCodePrinter",
        "start_line": 219,
        "span_start": 334,
        "bug_name": "Closure_34",
        "type": "class",
        "end_line": 399
      }
    ]
  },
  "Closure_37": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Nodetraversal allows an iteration through the nodes in the parse tree,\n * and facilitates the optimizations on the parse tree.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_37/src/com/google/javascript/jscomp/NodeTraversal.java",
        "span_end": 541,
        "name": "NodeTraversal",
        "start_line": 38,
        "span_start": 541,
        "bug_name": "Closure_37",
        "type": "class",
        "end_line": 684
      },
      {
        "javadoc": "/**\n * IRFactory transforms the new AST to the old AST.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_37/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 669,
        "name": "IRFactory",
        "start_line": 80,
        "span_start": 667,
        "bug_name": "Closure_37",
        "type": "class",
        "end_line": 1321
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_37/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 669,
        "name": "TransformDispatcher",
        "start_line": 379,
        "span_start": 667,
        "bug_name": "Closure_37",
        "type": "class",
        "end_line": 1109
      }
    ]
  },
  "Closure_39": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * The object type represents instances of JavaScript objects such as\n * {@code Object}, {@code Date}, {@code Function}.<p>\n *\n * Objects in JavaScript are unordered collections of properties.\n * Each property consists of a name, a value and a set of attributes.<p>\n *\n * Each instance has an implicit prototype property ({@code [[Prototype]]})\n * pointing to an object instance, which itself has an implicit property, thus\n * forming a chain.<p>\n *\n * A class begins life with no name.  Later, a name may be provided once it\n * can be inferred.  Note that the name in this case is strictly for\n * debugging purposes.  Looking up type name references goes through the\n * {@link JSTypeRegistry}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_39/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "span_end": 383,
        "name": "PrototypeObjectType",
        "start_line": 70,
        "span_start": 380,
        "bug_name": "Closure_39",
        "type": "class",
        "end_line": 553
      },
      {
        "javadoc": "/**\n * The object type represents instances of JavaScript objects such as\n * {@code Object}, {@code Date}, {@code Function}.<p>\n *\n * Objects in JavaScript are unordered collections of properties.\n * Each property consists of a name, a value and a set of attributes.<p>\n *\n * Each instance has an implicit prototype property ({@code [[Prototype]]})\n * pointing to an object instance, which itself has an implicit property, thus\n * forming a chain.<p>\n *\n * A class begins life with no name.  Later, a name may be provided once it\n * can be inferred.  Note that the name in this case is strictly for\n * debugging purposes.  Looking up type name references goes through the\n * {@link JSTypeRegistry}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_39/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "span_end": 394,
        "name": "PrototypeObjectType",
        "start_line": 70,
        "span_start": 394,
        "bug_name": "Closure_39",
        "type": "class",
        "end_line": 553
      }
    ]
  },
  "Closure_41": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A builder for FunctionTypes, because FunctionTypes are so\n * ridiculously complex. All methods return {@code this} for ease of use.\n *\n * Right now, this mostly uses JSDocInfo to infer type information about\n * functions. In the long term, developers should extend it to use other\n * signals by overloading the various \"inferXXX\" methods. For example, we\n * might want to use {@code goog.inherits} calls as a signal for inheritance, or\n * {@code return} statements as a signal for return type.\n *\n * NOTE(nicksantos): Organizationally, this feels like it should be in Rhino.\n * But it depends on some coding convention stuff that's really part\n * of JSCompiler.\n *\n * @author nicksantos@google.com (Nick Santos)\n * @author pascallouis@google.com (Pascal-Louis Perez)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_41/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 291,
        "name": "FunctionTypeBuilder",
        "start_line": 65,
        "span_start": 292,
        "bug_name": "Closure_41",
        "type": "class",
        "end_line": 840
      },
      {
        "javadoc": "/**\n * A builder for FunctionTypes, because FunctionTypes are so\n * ridiculously complex. All methods return {@code this} for ease of use.\n *\n * Right now, this mostly uses JSDocInfo to infer type information about\n * functions. In the long term, developers should extend it to use other\n * signals by overloading the various \"inferXXX\" methods. For example, we\n * might want to use {@code goog.inherits} calls as a signal for inheritance, or\n * {@code return} statements as a signal for return type.\n *\n * NOTE(nicksantos): Organizationally, this feels like it should be in Rhino.\n * But it depends on some coding convention stuff that's really part\n * of JSCompiler.\n *\n * @author nicksantos@google.com (Nick Santos)\n * @author pascallouis@google.com (Pascal-Louis Perez)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_41/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 482,
        "name": "FunctionTypeBuilder",
        "start_line": 65,
        "span_start": 483,
        "bug_name": "Closure_41",
        "type": "class",
        "end_line": 840
      }
    ]
  },
  "Closure_43": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * Creates the symbol table of variables available in the current scope and\n * their types.\n *\n * Scopes created by this class are very different from scopes created\n * by the syntactic scope creator. These scopes have type information, and\n * include some qualified names in addition to variables\n * (like Class.staticMethod).\n *\n * When building scope information, also declares relevant information\n * about types in the type registry.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_43/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 419,
        "name": "TypedScopeCreator",
        "start_line": 95,
        "span_start": 420,
        "bug_name": "Closure_43",
        "type": "class",
        "end_line": 1953
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_43/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 419,
        "name": "AbstractScopeBuilder",
        "start_line": 394,
        "span_start": 420,
        "bug_name": "Closure_43",
        "type": "class",
        "end_line": 1702
      },
      {
        "javadoc": "/**\n * Creates the symbol table of variables available in the current scope and\n * their types.\n *\n * Scopes created by this class are very different from scopes created\n * by the syntactic scope creator. These scopes have type information, and\n * include some qualified names in addition to variables\n * (like Class.staticMethod).\n *\n * When building scope information, also declares relevant information\n * about types in the type registry.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_43/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 546,
        "name": "TypedScopeCreator",
        "start_line": 95,
        "span_start": 547,
        "bug_name": "Closure_43",
        "type": "class",
        "end_line": 1953
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_43/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 546,
        "name": "AbstractScopeBuilder",
        "start_line": 394,
        "span_start": 547,
        "bug_name": "Closure_43",
        "type": "class",
        "end_line": 1702
      },
      {
        "javadoc": "/**\n * Creates the symbol table of variables available in the current scope and\n * their types.\n *\n * Scopes created by this class are very different from scopes created\n * by the syntactic scope creator. These scopes have type information, and\n * include some qualified names in addition to variables\n * (like Class.staticMethod).\n *\n * When building scope information, also declares relevant information\n * about types in the type registry.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_43/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 580,
        "name": "TypedScopeCreator",
        "start_line": 95,
        "span_start": 580,
        "bug_name": "Closure_43",
        "type": "class",
        "end_line": 1953
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_43/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 580,
        "name": "AbstractScopeBuilder",
        "start_line": 394,
        "span_start": 580,
        "bug_name": "Closure_43",
        "type": "class",
        "end_line": 1702
      }
    ]
  },
  "Closure_45": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Garbage collection for variable and function definitions. Basically performs\n * a mark-and-sweep type algorithm over the javascript parse tree.\n *\n * For each scope:\n * (1) Scan the variable/function declarations at that scope.\n * (2) Traverse the scope for references, marking all referenced variables.\n *     Unlike other compiler passes, this is a pre-order traversal, not a\n *     post-order traversal.\n * (3) If the traversal encounters an assign without other side-effects,\n *     create a continuation. Continue the continuation iff the assigned\n *     variable is referenced.\n * (4) When the traversal completes, remove all unreferenced variables.\n *\n * If it makes it easier, you can think of the continuations of the traversal\n * as a reference graph. Each continuation represents a set of edges, where the\n * source node is a known variable, and the destination nodes are lazily\n * evaluated when the continuation is executed.\n *\n * This algorithm is similar to the algorithm used by {@code SmartNameRemoval}.\n * {@code SmartNameRemoval} maintains an explicit graph of dependencies\n * between global symbols. However, {@code SmartNameRemoval} cannot handle\n * non-trivial edges in the reference graph (\"A is referenced iff both B and C\n * are referenced\"), or local variables. {@code SmartNameRemoval} is also\n * substantially more complicated because it tries to handle namespaces\n * (which is largely unnecessary in the presence of {@code CollapseProperties}.\n *\n * This pass also uses a more complex analysis of assignments, where\n * an assignment to a variable or a property of that variable does not\n * necessarily count as a reference to that variable, unless we can prove\n * that it modifies external state. This is similar to\n * {@code FlowSensitiveInlineVariables}, except that it works for variables\n * used across scopes.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "span_end": 731,
        "name": "RemoveUnusedVars",
        "start_line": 69,
        "span_start": 732,
        "bug_name": "Closure_45",
        "type": "class",
        "end_line": 974
      },
      {
        "javadoc": "/**\n * Garbage collection for variable and function definitions. Basically performs\n * a mark-and-sweep type algorithm over the javascript parse tree.\n *\n * For each scope:\n * (1) Scan the variable/function declarations at that scope.\n * (2) Traverse the scope for references, marking all referenced variables.\n *     Unlike other compiler passes, this is a pre-order traversal, not a\n *     post-order traversal.\n * (3) If the traversal encounters an assign without other side-effects,\n *     create a continuation. Continue the continuation iff the assigned\n *     variable is referenced.\n * (4) When the traversal completes, remove all unreferenced variables.\n *\n * If it makes it easier, you can think of the continuations of the traversal\n * as a reference graph. Each continuation represents a set of edges, where the\n * source node is a known variable, and the destination nodes are lazily\n * evaluated when the continuation is executed.\n *\n * This algorithm is similar to the algorithm used by {@code SmartNameRemoval}.\n * {@code SmartNameRemoval} maintains an explicit graph of dependencies\n * between global symbols. However, {@code SmartNameRemoval} cannot handle\n * non-trivial edges in the reference graph (\"A is referenced iff both B and C\n * are referenced\"), or local variables. {@code SmartNameRemoval} is also\n * substantially more complicated because it tries to handle namespaces\n * (which is largely unnecessary in the presence of {@code CollapseProperties}.\n *\n * This pass also uses a more complex analysis of assignments, where\n * an assignment to a variable or a property of that variable does not\n * necessarily count as a reference to that variable, unless we can prove\n * that it modifies external state. This is similar to\n * {@code FlowSensitiveInlineVariables}, except that it works for variables\n * used across scopes.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "span_end": 741,
        "name": "RemoveUnusedVars",
        "start_line": 69,
        "span_start": 739,
        "bug_name": "Closure_45",
        "type": "class",
        "end_line": 974
      },
      {
        "javadoc": "/**\n * Garbage collection for variable and function definitions. Basically performs\n * a mark-and-sweep type algorithm over the javascript parse tree.\n *\n * For each scope:\n * (1) Scan the variable/function declarations at that scope.\n * (2) Traverse the scope for references, marking all referenced variables.\n *     Unlike other compiler passes, this is a pre-order traversal, not a\n *     post-order traversal.\n * (3) If the traversal encounters an assign without other side-effects,\n *     create a continuation. Continue the continuation iff the assigned\n *     variable is referenced.\n * (4) When the traversal completes, remove all unreferenced variables.\n *\n * If it makes it easier, you can think of the continuations of the traversal\n * as a reference graph. Each continuation represents a set of edges, where the\n * source node is a known variable, and the destination nodes are lazily\n * evaluated when the continuation is executed.\n *\n * This algorithm is similar to the algorithm used by {@code SmartNameRemoval}.\n * {@code SmartNameRemoval} maintains an explicit graph of dependencies\n * between global symbols. However, {@code SmartNameRemoval} cannot handle\n * non-trivial edges in the reference graph (\"A is referenced iff both B and C\n * are referenced\"), or local variables. {@code SmartNameRemoval} is also\n * substantially more complicated because it tries to handle namespaces\n * (which is largely unnecessary in the presence of {@code CollapseProperties}.\n *\n * This pass also uses a more complex analysis of assignments, where\n * an assignment to a variable or a property of that variable does not\n * necessarily count as a reference to that variable, unless we can prove\n * that it modifies external state. This is similar to\n * {@code FlowSensitiveInlineVariables}, except that it works for variables\n * used across scopes.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "span_end": 904,
        "name": "RemoveUnusedVars",
        "start_line": 69,
        "span_start": 904,
        "bug_name": "Closure_45",
        "type": "class",
        "end_line": 974
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "span_end": 904,
        "name": "Assign",
        "start_line": 874,
        "span_start": 904,
        "bug_name": "Closure_45",
        "type": "class",
        "end_line": 973
      }
    ]
  },
  "Closure_47": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Class for parsing version 3 of the SourceMap format, as produced by the\n * Closure Compiler, etc.\n * http://code.google.com/p/closure-compiler/wiki/SourceMaps\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_47/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "span_end": 490,
        "name": "SourceMapConsumerV3",
        "start_line": 43,
        "span_start": 489,
        "bug_name": "Closure_47",
        "type": "class",
        "end_line": 724
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_47/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 141,
        "name": "SourceMap",
        "start_line": 43,
        "span_start": 138,
        "bug_name": "Closure_47",
        "type": "class",
        "end_line": 204
      }
    ]
  },
  "Closure_49": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n *  Find all Functions, VARs, and Exception names and make them\n *  unique.  Specifically, it will not modify object properties.\n *  @author johnlenz@google.com (John Lenz)\n *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 98,
        "name": "MakeDeclaredNamesUnique",
        "start_line": 45,
        "span_start": 91,
        "bug_name": "Closure_49",
        "type": "class",
        "end_line": 588
      },
      {
        "javadoc": "/**\n *  Find all Functions, VARs, and Exception names and make them\n *  unique.  Specifically, it will not modify object properties.\n *  @author johnlenz@google.com (John Lenz)\n *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 134,
        "name": "MakeDeclaredNamesUnique",
        "start_line": 45,
        "span_start": 130,
        "bug_name": "Closure_49",
        "type": "class",
        "end_line": 588
      },
      {
        "javadoc": "/**\n *  Find all Functions, VARs, and Exception names and make them\n *  unique.  Specifically, it will not modify object properties.\n *  @author johnlenz@google.com (John Lenz)\n *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 179,
        "name": "MakeDeclaredNamesUnique",
        "start_line": 45,
        "span_start": 173,
        "bug_name": "Closure_49",
        "type": "class",
        "end_line": 588
      }
    ]
  },
  "Closure_50": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Just to fold known methods when they are called with constants.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
        "span_end": 376,
        "name": "PeepholeReplaceKnownMethods",
        "start_line": 31,
        "span_start": 376,
        "bug_name": "Closure_50",
        "type": "class",
        "end_line": 645
      },
      {
        "javadoc": "/**\n * Just to fold known methods when they are called with constants.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
        "span_end": 389,
        "name": "PeepholeReplaceKnownMethods",
        "start_line": 31,
        "span_start": 389,
        "bug_name": "Closure_50",
        "type": "class",
        "end_line": 645
      }
    ]
  },
  "Closure_51": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Abstracted consumer of the CodeGenerator output.\n *\n * @see CodeGenerator\n * @see CodePrinter\n * @see InlineCostEstimator\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_51/src/com/google/javascript/jscomp/CodeConsumer.java",
        "span_end": 241,
        "name": "CodeConsumer",
        "start_line": 29,
        "span_start": 241,
        "bug_name": "Closure_51",
        "type": "class",
        "end_line": 289
      },
      {
        "javadoc": "/**\n * Abstracted consumer of the CodeGenerator output.\n *\n * @see CodeGenerator\n * @see CodePrinter\n * @see InlineCostEstimator\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_51/src/com/google/javascript/jscomp/CodeConsumer.java",
        "span_end": 259,
        "name": "CodeConsumer",
        "start_line": 29,
        "span_start": 259,
        "bug_name": "Closure_51",
        "type": "class",
        "end_line": 289
      }
    ]
  },
  "Closure_53": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Using the infrastructure provided by {@link ReferenceCollectingCallback},\n * identify variables that are only ever assigned to object literals\n * and that are never used in entirety, and expand the objects into\n * individual variables.\n *\n * Based on the InlineVariables pass\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_53/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 330,
        "name": "InlineObjectLiterals",
        "start_line": 47,
        "span_start": 331,
        "bug_name": "Closure_53",
        "type": "class",
        "end_line": 439
      },
      {
        "javadoc": "/**\n * Builds up information about nodes in each scope. When exiting the\n * scope, inspects all variables in that scope, and inlines any\n * that we can.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_53/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 330,
        "name": "InliningBehavior",
        "start_line": 74,
        "span_start": 331,
        "bug_name": "Closure_53",
        "type": "class",
        "end_line": 438
      },
      {
        "javadoc": "/**\n * Using the infrastructure provided by {@link ReferenceCollectingCallback},\n * identify variables that are only ever assigned to object literals\n * and that are never used in entirety, and expand the objects into\n * individual variables.\n *\n * Based on the InlineVariables pass\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_53/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 349,
        "name": "InlineObjectLiterals",
        "start_line": 47,
        "span_start": 350,
        "bug_name": "Closure_53",
        "type": "class",
        "end_line": 439
      },
      {
        "javadoc": "/**\n * Builds up information about nodes in each scope. When exiting the\n * scope, inspects all variables in that scope, and inlines any\n * that we can.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_53/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 349,
        "name": "InliningBehavior",
        "start_line": 74,
        "span_start": 350,
        "bug_name": "Closure_53",
        "type": "class",
        "end_line": 438
      }
    ]
  },
  "Closure_54": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Creates the symbol table of variables available in the current scope and\n * their types.\n *\n * Scopes created by this class are very different from scopes created\n * by the syntactic scope creator. These scopes have type information, and\n * include some qualified names in addition to variables\n * (like Class.staticMethod).\n *\n * When building scope information, also declares relevant information\n * about types in the type registry.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_54/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 1413,
        "name": "TypedScopeCreator",
        "start_line": 91,
        "span_start": 1413,
        "bug_name": "Closure_54",
        "type": "class",
        "end_line": 1774
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_54/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 1413,
        "name": "AbstractScopeBuilder",
        "start_line": 372,
        "span_start": 1413,
        "bug_name": "Closure_54",
        "type": "class",
        "end_line": 1595
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_54/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 341,
        "name": "FunctionType",
        "start_line": 66,
        "span_start": 341,
        "bug_name": "Closure_54",
        "type": "class",
        "end_line": 1100
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_54/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 373,
        "name": "FunctionType",
        "start_line": 66,
        "span_start": 366,
        "bug_name": "Closure_54",
        "type": "class",
        "end_line": 1100
      }
    ]
  },
  "Closure_60": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * NodeUtil contains utilities that get properties from the Node object.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_60/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 107,
        "name": "NodeUtil",
        "start_line": 46,
        "span_start": 108,
        "bug_name": "Closure_60",
        "type": "class",
        "end_line": 3022
      },
      {
        "javadoc": "/**\n * NodeUtil contains utilities that get properties from the Node object.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_60/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 136,
        "name": "NodeUtil",
        "start_line": 46,
        "span_start": 136,
        "bug_name": "Closure_60",
        "type": "class",
        "end_line": 3022
      }
    ]
  },
  "Closure_64": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Compiler (and the other classes in this package) does the following:\n * <ul>\n * <li>parses JS code\n * <li>checks for undefined variables\n * <li>performs optimizations such as constant folding and constants inlining\n * <li>renames variables (to short names)\n * <li>outputs compact javascript code\n * </ul>\n *\n * External variables are declared in 'externs' files. For instance, the file\n * may include definitions for global javascript/browser objects such as\n * window, document.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_64/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 1432,
        "name": "Compiler",
        "start_line": 68,
        "span_start": 1432,
        "bug_name": "Closure_64",
        "type": "class",
        "end_line": 2011
      },
      {
        "javadoc": "/**\n * Compiler (and the other classes in this package) does the following:\n * <ul>\n * <li>parses JS code\n * <li>checks for undefined variables\n * <li>performs optimizations such as constant folding and constants inlining\n * <li>renames variables (to short names)\n * <li>outputs compact javascript code\n * </ul>\n *\n * External variables are declared in 'externs' files. For instance, the file\n * may include definitions for global javascript/browser objects such as\n * window, document.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_64/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 1473,
        "name": "Compiler",
        "start_line": 68,
        "span_start": 1461,
        "bug_name": "Closure_64",
        "type": "class",
        "end_line": 2011
      }
    ]
  },
  "Closure_68": {
    "bug_count": 3,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 870,
        "name": "JsDocInfoParser",
        "start_line": 45,
        "span_start": 868,
        "bug_name": "Closure_68",
        "type": "class",
        "end_line": 2304
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1708,
        "name": "JsDocInfoParser",
        "start_line": 45,
        "span_start": 1709,
        "bug_name": "Closure_68",
        "type": "class",
        "end_line": 2304
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1760,
        "name": "JsDocInfoParser",
        "start_line": 45,
        "span_start": 1761,
        "bug_name": "Closure_68",
        "type": "class",
        "end_line": 2304
      }
    ]
  },
  "Closure_72": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * A class to transform the body of a function into a generic block suitable\n * for inlining.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_72/src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "span_end": 151,
        "name": "FunctionToBlockMutator",
        "start_line": 38,
        "span_start": 152,
        "bug_name": "Closure_72",
        "type": "class",
        "end_line": 447
      },
      {
        "javadoc": "/**\n * RenameLabels renames all the labels so that they have short names, to reduce\n * code size and also to obfuscate the code.\n *\n * Label names have a unique namespace, so variable or function names clashes\n * are not a concern, but keywords clashes are.\n *\n * Additionally, labels names are only within the statements include in the\n * label and do not cross function boundaries. This means that it is possible to\n * create one label name that is used for labels at any given depth of label\n * nesting. Typically, the name \"a\" will be used for all top level labels, \"b\"\n * for the next nested label, and so on. For example:\n *\n * <code>\n * function bar() {\n *   a: {\n *     b: {\n *       foo();\n *     }\n *   }\n *\n *   a: {\n *     b: break a;\n *   }\n * }\n * </code>\n *\n * The general processes is as follows: process() is the entry point for the\n * CompilerPass, and from there a standard \"ScopedCallback\" traversal is done,\n * where \"shouldTraverse\" is called when descending the tree, and the \"visit\" is\n * called in a depth first manner. The name for the label is selected during the\n * decent in \"shouldTraverse\", and the references to the label name are renamed\n * as they are encountered during the \"visit\". This means that if the label is\n * unreferenced, it is known when the label node is visited, and, if so, can be\n * safely removed.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_72/src/com/google/javascript/jscomp/RenameLabels.java",
        "span_end": 215,
        "name": "RenameLabels",
        "start_line": 71,
        "span_start": 215,
        "bug_name": "Closure_72",
        "type": "class",
        "end_line": 276
      },
      {
        "javadoc": "/**\n * Iterate through the nodes, renaming all the labels.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_72/src/com/google/javascript/jscomp/RenameLabels.java",
        "span_end": 215,
        "name": "ProcessLabels",
        "start_line": 103,
        "span_start": 215,
        "bug_name": "Closure_72",
        "type": "class",
        "end_line": 253
      }
    ]
  },
  "Closure_74": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Peephole optimization to fold constants (e.g. x + 1 + 7 --> x + 8).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "span_end": 908,
        "name": "PeepholeFoldConstants",
        "start_line": 33,
        "span_start": 907,
        "bug_name": "Closure_74",
        "type": "class",
        "end_line": 1705
      },
      {
        "javadoc": "/**\n * Peephole optimization to fold constants (e.g. x + 1 + 7 --> x + 8).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "span_end": 1073,
        "name": "PeepholeFoldConstants",
        "start_line": 33,
        "span_start": 1074,
        "bug_name": "Closure_74",
        "type": "class",
        "end_line": 1705
      }
    ]
  },
  "Closure_75": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * NodeUtil contains utilities that get properties from the Node object.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_75/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 313,
        "name": "NodeUtil",
        "start_line": 46,
        "span_start": 313,
        "bug_name": "Closure_75",
        "type": "class",
        "end_line": 2983
      },
      {
        "javadoc": "/**\n * NodeUtil contains utilities that get properties from the Node object.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_75/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 375,
        "name": "NodeUtil",
        "start_line": 46,
        "span_start": 375,
        "bug_name": "Closure_75",
        "type": "class",
        "end_line": 2983
      }
    ]
  },
  "Closure_76": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Removes local variable assignments that are useless based on information from\n * {@link LiveVariablesAnalysis}. If there is an assignment to variable\n * {@code x} and {@code x} is dead after this assignment, we know that the\n * current content of {@code x} will not be read and this assignment is useless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "span_end": 319,
        "name": "DeadAssignmentsElimination",
        "start_line": 39,
        "span_start": 300,
        "bug_name": "Closure_76",
        "type": "class",
        "end_line": 401
      },
      {
        "javadoc": "/**\n * Removes local variable assignments that are useless based on information from\n * {@link LiveVariablesAnalysis}. If there is an assignment to variable\n * {@code x} and {@code x} is dead after this assignment, we know that the\n * current content of {@code x} will not be read and this assignment is useless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "span_end": 339,
        "name": "DeadAssignmentsElimination",
        "start_line": 39,
        "span_start": 340,
        "bug_name": "Closure_76",
        "type": "class",
        "end_line": 401
      },
      {
        "javadoc": "/**\n * Removes local variable assignments that are useless based on information from\n * {@link LiveVariablesAnalysis}. If there is an assignment to variable\n * {@code x} and {@code x} is dead after this assignment, we know that the\n * current content of {@code x} will not be read and this assignment is useless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "span_end": 364,
        "name": "DeadAssignmentsElimination",
        "start_line": 39,
        "span_start": 362,
        "bug_name": "Closure_76",
        "type": "class",
        "end_line": 401
      },
      {
        "javadoc": "/**\n * Removes local variable assignments that are useless based on information from\n * {@link LiveVariablesAnalysis}. If there is an assignment to variable\n * {@code x} and {@code x} is dead after this assignment, we know that the\n * current content of {@code x} will not be read and this assignment is useless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "span_end": 378,
        "name": "DeadAssignmentsElimination",
        "start_line": 39,
        "span_start": 372,
        "bug_name": "Closure_76",
        "type": "class",
        "end_line": 401
      }
    ]
  },
  "Closure_79": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Closure_79/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 122,
        "name": "Normalize",
        "start_line": 63,
        "span_start": 122,
        "bug_name": "Closure_79",
        "type": "class",
        "end_line": 779
      },
      {
        "javadoc": "/**\n * Checks that all variables are declared, that file-private variables are\n * accessed only in the file that declares them, and that any var references\n * that cross module boundaries respect declared module dependencies.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_79/src/com/google/javascript/jscomp/VarCheck.java",
        "span_end": 220,
        "name": "VarCheck",
        "start_line": 34,
        "span_start": 221,
        "bug_name": "Closure_79",
        "type": "class",
        "end_line": 277
      }
    ]
  },
  "Closure_80": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * NodeUtil contains utilities that get properties from the Node object.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_80/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 1261,
        "name": "NodeUtil",
        "start_line": 46,
        "span_start": 1262,
        "bug_name": "Closure_80",
        "type": "class",
        "end_line": 2971
      },
      {
        "javadoc": "/**\n * NodeUtil contains utilities that get properties from the Node object.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_80/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 2909,
        "name": "NodeUtil",
        "start_line": 46,
        "span_start": 2910,
        "bug_name": "Closure_80",
        "type": "class",
        "end_line": 2971
      }
    ]
  },
  "Closure_84": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * IRFactory transforms the new AST to the old AST.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_84/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 340,
        "name": "IRFactory",
        "start_line": 76,
        "span_start": 341,
        "bug_name": "Closure_84",
        "type": "class",
        "end_line": 1216
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_84/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 340,
        "name": "TransformDispatcher",
        "start_line": 276,
        "span_start": 341,
        "bug_name": "Closure_84",
        "type": "class",
        "end_line": 873
      },
      {
        "javadoc": "/**\n * IRFactory transforms the new AST to the old AST.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_84/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 796,
        "name": "IRFactory",
        "start_line": 76,
        "span_start": 797,
        "bug_name": "Closure_84",
        "type": "class",
        "end_line": 1216
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_84/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 796,
        "name": "TransformDispatcher",
        "start_line": 276,
        "span_start": 797,
        "bug_name": "Closure_84",
        "type": "class",
        "end_line": 873
      },
      {
        "javadoc": "/**\n * IRFactory transforms the new AST to the old AST.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_84/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 805,
        "name": "IRFactory",
        "start_line": 76,
        "span_start": 806,
        "bug_name": "Closure_84",
        "type": "class",
        "end_line": 1216
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_84/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 805,
        "name": "TransformDispatcher",
        "start_line": 276,
        "span_start": 806,
        "bug_name": "Closure_84",
        "type": "class",
        "end_line": 873
      }
    ]
  },
  "Closure_85": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Removes dead code from a parse tree. The kinds of dead code that this pass\n * removes are:\n *  - Any code following a return statement, such as the <code>alert</code>\n *    call in: <code>if (x) { return; alert('unreachable'); }</code>.\n *  - Statements that have no side effects, such as:\n *    <code>a.b.MyClass.prototype.propertyName;</code> or <code>true;</code>.\n *    That first kind of statement sometimes appears intentionally, so that\n *    prototype properties can be annotated using JSDoc without actually\n *    being initialized.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "span_end": 166,
        "name": "UnreachableCodeElimination",
        "start_line": 47,
        "span_start": 153,
        "bug_name": "Closure_85",
        "type": "class",
        "end_line": 236
      },
      {
        "javadoc": "/**\n * Removes dead code from a parse tree. The kinds of dead code that this pass\n * removes are:\n *  - Any code following a return statement, such as the <code>alert</code>\n *    call in: <code>if (x) { return; alert('unreachable'); }</code>.\n *  - Statements that have no side effects, such as:\n *    <code>a.b.MyClass.prototype.propertyName;</code> or <code>true;</code>.\n *    That first kind of statement sometimes appears intentionally, so that\n *    prototype properties can be annotated using JSDoc without actually\n *    being initialized.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "span_end": 183,
        "name": "UnreachableCodeElimination",
        "start_line": 47,
        "span_start": 183,
        "bug_name": "Closure_85",
        "type": "class",
        "end_line": 236
      },
      {
        "javadoc": "/**\n * Removes dead code from a parse tree. The kinds of dead code that this pass\n * removes are:\n *  - Any code following a return statement, such as the <code>alert</code>\n *    call in: <code>if (x) { return; alert('unreachable'); }</code>.\n *  - Statements that have no side effects, such as:\n *    <code>a.b.MyClass.prototype.propertyName;</code> or <code>true;</code>.\n *    That first kind of statement sometimes appears intentionally, so that\n *    prototype properties can be annotated using JSDoc without actually\n *    being initialized.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "span_end": 195,
        "name": "UnreachableCodeElimination",
        "start_line": 47,
        "span_start": 196,
        "bug_name": "Closure_85",
        "type": "class",
        "end_line": 236
      }
    ]
  },
  "Closure_89": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Flattens global objects/namespaces by replacing each '.' with '$' in\n * their names. This reduces the number of property lookups the browser has\n * to do and allows the {@link RenameVars} pass to shorten namespaced names.\n * For example, goog.events.handleEvent() -> goog$events$handleEvent() -> Za().\n *\n * <p>If a global object's name is assigned to more than once, or if a property\n * is added to the global object in a complex expression, then none of its\n * properties will be collapsed (for safety/correctness).\n *\n * <p>If, after a global object is declared, it is never referenced except when\n * its properties are read or set, then the object will be removed after its\n * properties have been collapsed.\n *\n * <p>Uninitialized variable stubs are created at a global object's declaration\n * site for any of its properties that are added late in a local scope.\n *\n * <p>If, after an object is declared, it is referenced directly in a way that\n * might create an alias for it, then none of its properties will be collapsed.\n * This behavior is a safeguard to prevent the values associated with the\n * flattened names from getting out of sync with the object's actual property\n * values. For example, in the following case, an alias a$b, if created, could\n * easily keep the value 0 even after a.b became 5:\n * <code> a = {b: 0}; c = a; c.b = 5; </code>.\n *\n * <p>This pass doesn't flatten property accesses of the form: a[b].\n *\n * <p>For lots of examples, see the unit test.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_89/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 483,
        "name": "CollapseProperties",
        "start_line": 71,
        "span_start": 484,
        "bug_name": "Closure_89",
        "type": "class",
        "end_line": 853
      },
      {
        "javadoc": "/**\n * Builds a global namespace of all the objects and their properties in\n * the global scope. Also builds an index of all the references to those names.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_89/src/com/google/javascript/jscomp/GlobalNamespace.java",
        "span_end": 920,
        "name": "GlobalNamespace",
        "start_line": 40,
        "span_start": 920,
        "bug_name": "Closure_89",
        "type": "class",
        "end_line": 1080
      },
      {
        "javadoc": "/**\n * A name defined in global scope (e.g. \"a\" or \"a.b.c.d\"). These form a tree.\n * As the parse tree traversal proceeds, we'll discover that some names\n * correspond to JavaScript objects whose properties we should consider\n * collapsing.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_89/src/com/google/javascript/jscomp/GlobalNamespace.java",
        "span_end": 920,
        "name": "Name",
        "start_line": 752,
        "span_start": 920,
        "bug_name": "Closure_89",
        "type": "class",
        "end_line": 992
      }
    ]
  },
  "Closure_90": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * A builder for FunctionTypes, because FunctionTypes are so\n * ridiculously complex. All methods return {@code this} for ease of use.\n *\n * Right now, this mostly uses JSDocInfo to infer type information about\n * functions. In the long term, developers should extend it to use other\n * signals by overloading the various \"inferXXX\" methods. For example, we\n * might want to use {@code goog.inherits} calls as a signal for inheritance, or\n * {@code return} statements as a signal for return type.\n *\n * NOTE(nicksantos): Organizationally, this feels like it should be in Rhino.\n * But it depends on some coding convention stuff that's really part\n * of JSCompiler.\n *\n * @author nicksantos@google.com (Nick Santos)\n * @author pascallouis@google.com (Pascal-Louis Perez)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_90/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 184,
        "name": "FunctionTypeBuilder",
        "start_line": 65,
        "span_start": 184,
        "bug_name": "Closure_90",
        "type": "class",
        "end_line": 727
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_90/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 184,
        "name": "ThisTypeValidator",
        "start_line": 175,
        "span_start": 184,
        "bug_name": "Closure_90",
        "type": "class",
        "end_line": 191
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_90/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 879,
        "name": "FunctionType",
        "start_line": 65,
        "span_start": 880,
        "bug_name": "Closure_90",
        "type": "class",
        "end_line": 945
      }
    ]
  },
  "Closure_98": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * A helper class for passes that want to access all information about where a\n * variable is referenced and declared at once and then make a decision as to\n * how it should be handled, possibly inlining, reordering, or generating\n * warnings. Callers do this by providing {@link Behavior} and then\n * calling {@link #process(Node, Node)}.\n *\n * @author kushal@google.com (Kushal Dave)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_98/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "span_end": 360,
        "name": "ReferenceCollectingCallback",
        "start_line": 45,
        "span_start": 361,
        "bug_name": "Closure_98",
        "type": "class",
        "end_line": 587
      },
      {
        "javadoc": "/**\n * A collection of references. Can be subclassed to apply checks or\n * store additional state when adding.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_98/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "span_end": 360,
        "name": "ReferenceCollection",
        "start_line": 226,
        "span_start": 361,
        "bug_name": "Closure_98",
        "type": "class",
        "end_line": 406
      },
      {
        "javadoc": "/**\n * A helper class for passes that want to access all information about where a\n * variable is referenced and declared at once and then make a decision as to\n * how it should be handled, possibly inlining, reordering, or generating\n * warnings. Callers do this by providing {@link Behavior} and then\n * calling {@link #process(Node, Node)}.\n *\n * @author kushal@google.com (Kushal Dave)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_98/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "span_end": 548,
        "name": "ReferenceCollectingCallback",
        "start_line": 45,
        "span_start": 545,
        "bug_name": "Closure_98",
        "type": "class",
        "end_line": 587
      },
      {
        "javadoc": "/**\n * Represents a section of code that is uninterrupted by control structures\n * (conditional or iterative logic).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_98/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "span_end": 548,
        "name": "BasicBlock",
        "start_line": 532,
        "span_start": 545,
        "bug_name": "Closure_98",
        "type": "class",
        "end_line": 586
      },
      {
        "javadoc": "/**\n * A helper class for passes that want to access all information about where a\n * variable is referenced and declared at once and then make a decision as to\n * how it should be handled, possibly inlining, reordering, or generating\n * warnings. Callers do this by providing {@link Behavior} and then\n * calling {@link #process(Node, Node)}.\n *\n * @author kushal@google.com (Kushal Dave)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_98/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "span_end": 561,
        "name": "ReferenceCollectingCallback",
        "start_line": 45,
        "span_start": 561,
        "bug_name": "Closure_98",
        "type": "class",
        "end_line": 587
      },
      {
        "javadoc": "/**\n * Represents a section of code that is uninterrupted by control structures\n * (conditional or iterative logic).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_98/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "span_end": 561,
        "name": "BasicBlock",
        "start_line": 532,
        "span_start": 561,
        "bug_name": "Closure_98",
        "type": "class",
        "end_line": 586
      }
    ]
  },
  "Closure_99": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Checks for certain uses of the {@code this} keyword that are considered\n * unsafe because they are likely to reference the global {@code this} object\n * unintentionally.\n *\n * <p>A use of {@code this} is considered unsafe if it's on the left side of an\n * assignment or a property access, and not inside one of the following:\n * <ol>\n * <li>a prototype method\n * <li>a function annotated with {@code @constructor}\n * <li>a function annotated with {@code @this}.\n * <li>a function where there's no logical place to put a\n *     {@code this} annotation.\n * </ol>\n *\n * <p>Note that this check does not track assignments of {@code this} to\n * variables or objects. The code\n * <pre>\n * function evil() {\n *   var a = this;\n *   a.useful = undefined;\n * }\n * </pre>\n * will not get flagged, even though it is semantically equivalent to\n * <pre>\n * function evil() {\n *   this.useful = undefined;\n * }\n * </pre>\n * which would get flagged.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_99/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 91,
        "name": "CheckGlobalThis",
        "start_line": 59,
        "span_start": 92,
        "bug_name": "Closure_99",
        "type": "class",
        "end_line": 184
      },
      {
        "javadoc": "/**\n * Checks for certain uses of the {@code this} keyword that are considered\n * unsafe because they are likely to reference the global {@code this} object\n * unintentionally.\n *\n * <p>A use of {@code this} is considered unsafe if it's on the left side of an\n * assignment or a property access, and not inside one of the following:\n * <ol>\n * <li>a prototype method\n * <li>a function annotated with {@code @constructor}\n * <li>a function annotated with {@code @this}.\n * <li>a function where there's no logical place to put a\n *     {@code this} annotation.\n * </ol>\n *\n * <p>Note that this check does not track assignments of {@code this} to\n * variables or objects. The code\n * <pre>\n * function evil() {\n *   var a = this;\n *   a.useful = undefined;\n * }\n * </pre>\n * will not get flagged, even though it is semantically equivalent to\n * <pre>\n * function evil() {\n *   this.useful = undefined;\n * }\n * </pre>\n * which would get flagged.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_99/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 131,
        "name": "CheckGlobalThis",
        "start_line": 59,
        "span_start": 125,
        "bug_name": "Closure_99",
        "type": "class",
        "end_line": 184
      }
    ]
  },
  "Closure_100": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Checks for certain uses of the {@code this} keyword that are considered\n * unsafe because they are likely to reference the global {@code this} object\n * unintentionally.\n *\n * <p>A use of {@code this} is considered unsafe if it's on the left side of an\n * assignment or a property access, and not inside one of the following:\n * <ol>\n * <li>a prototype method\n * <li>a function annotated with {@code @constructor}\n * <li>a function annotated with {@code @this}.\n * <li>a function where there's no logical place to put a\n *     {@code this} annotation.\n * </ol>\n *\n * <p>Note that this check does not track assignments of {@code this} to\n * variables or objects. The code\n * <pre>\n * function evil() {\n *   var a = this;\n *   a.useful = undefined;\n * }\n * </pre>\n * will not get flagged, even though it is semantically equivalent to\n * <pre>\n * function evil() {\n *   this.useful = undefined;\n * }\n * </pre>\n * which would get flagged.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_100/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 98,
        "name": "CheckGlobalThis",
        "start_line": 59,
        "span_start": 99,
        "bug_name": "Closure_100",
        "type": "class",
        "end_line": 176
      },
      {
        "javadoc": "/**\n * Checks for certain uses of the {@code this} keyword that are considered\n * unsafe because they are likely to reference the global {@code this} object\n * unintentionally.\n *\n * <p>A use of {@code this} is considered unsafe if it's on the left side of an\n * assignment or a property access, and not inside one of the following:\n * <ol>\n * <li>a prototype method\n * <li>a function annotated with {@code @constructor}\n * <li>a function annotated with {@code @this}.\n * <li>a function where there's no logical place to put a\n *     {@code this} annotation.\n * </ol>\n *\n * <p>Note that this check does not track assignments of {@code this} to\n * variables or objects. The code\n * <pre>\n * function evil() {\n *   var a = this;\n *   a.useful = undefined;\n * }\n * </pre>\n * will not get flagged, even though it is semantically equivalent to\n * <pre>\n * function evil() {\n *   this.useful = undefined;\n * }\n * </pre>\n * which would get flagged.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_100/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 146,
        "name": "CheckGlobalThis",
        "start_line": 59,
        "span_start": 146,
        "bug_name": "Closure_100",
        "type": "class",
        "end_line": 176
      }
    ]
  },
  "Closure_103": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * This is a compiler pass that computes a control flow graph.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "span_end": 893,
        "name": "ControlFlowAnalysis",
        "start_line": 42,
        "span_start": 894,
        "bug_name": "Closure_103",
        "type": "class",
        "end_line": 995
      },
      {
        "javadoc": "/**\n * DisambiguateProperties renames properties to disambiguate between unrelated\n * fields with the same name. Two properties are considered related if they\n * share a definition on their prototype chains, or if they are potentially\n * referenced together via union types.\n *\n * <p> Renamimg only occurs if there are two or more distinct properties with\n * the same name.\n *\n * <p> This pass allows other passes, such as inlining and code removal to take\n * advantage of type information implicitly.\n *\n * <pre>\n *   Foo.a;\n *   Bar.a;\n * </pre>\n *\n * <p> will become\n *\n * <pre>\n *   Foo.a$Foo;\n *   Bar.a$Bar;\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_103/src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "span_end": 765,
        "name": "DisambiguateProperties",
        "start_line": 77,
        "span_start": 763,
        "bug_name": "Closure_103",
        "type": "class",
        "end_line": 984
      },
      {
        "javadoc": "/**\n * Implementation of TypeSystem using JSTypes.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_103/src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "span_end": 765,
        "name": "JSTypeSystem",
        "start_line": 634,
        "span_start": 763,
        "bug_name": "Closure_103",
        "type": "class",
        "end_line": 814
      }
    ]
  },
  "Closure_105": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * FoldConstants simplifies expressions which consist only of constants,\n * e.g (1 + 2).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_105/src/com/google/javascript/jscomp/FoldConstants.java",
        "span_end": 1492,
        "name": "FoldConstants",
        "start_line": 37,
        "span_start": 1477,
        "bug_name": "Closure_105",
        "type": "class",
        "end_line": 2023
      },
      {
        "javadoc": "/**\n * FoldConstants simplifies expressions which consist only of constants,\n * e.g (1 + 2).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_105/src/com/google/javascript/jscomp/FoldConstants.java",
        "span_end": 1500,
        "name": "FoldConstants",
        "start_line": 37,
        "span_start": 1500,
        "bug_name": "Closure_105",
        "type": "class",
        "end_line": 2023
      }
    ]
  },
  "Closure_106": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Builds a global namespace of all the objects and their properties in\n * the global scope. Also builds an index of all the references to those names.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_106/src/com/google/javascript/jscomp/GlobalNamespace.java",
        "span_end": 906,
        "name": "GlobalNamespace",
        "start_line": 43,
        "span_start": 907,
        "bug_name": "Closure_106",
        "type": "class",
        "end_line": 1064
      },
      {
        "javadoc": "/**\n * A name defined in global scope (e.g. \"a\" or \"a.b.c.d\"). These form a tree.\n * As the parse tree traversal proceeds, we'll discover that some names\n * correspond to JavaScript objects whose properties we should consider\n * collapsing.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_106/src/com/google/javascript/jscomp/GlobalNamespace.java",
        "span_end": 906,
        "name": "Name",
        "start_line": 755,
        "span_start": 907,
        "bug_name": "Closure_106",
        "type": "class",
        "end_line": 976
      },
      {
        "javadoc": "/**\n * A builder for {@link JSDocInfo} objects. This builder abstracts the\n * construction process of {@link JSDocInfo} objects whilst minimizing the\n * number of instances of {@link JSDocInfo} objects. It provides early\n * incompatibility detection among properties stored on the {@code JSDocInfo}\n * object being created.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_106/src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "span_end": 191,
        "name": "JSDocInfoBuilder",
        "start_line": 55,
        "span_start": 189,
        "bug_name": "Closure_106",
        "type": "class",
        "end_line": 769
      }
    ]
  },
  "Closure_108": {
    "bug_count": 8,
    "entries": [
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 258,
        "name": "ScopedAliases",
        "start_line": 73,
        "span_start": 259,
        "bug_name": "Closure_108",
        "type": "class",
        "end_line": 611
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 258,
        "name": "Traversal",
        "start_line": 245,
        "span_start": 259,
        "bug_name": "Closure_108",
        "type": "class",
        "end_line": 610
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 315,
        "name": "ScopedAliases",
        "start_line": 73,
        "span_start": 316,
        "bug_name": "Closure_108",
        "type": "class",
        "end_line": 611
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 315,
        "name": "Traversal",
        "start_line": 245,
        "span_start": 316,
        "bug_name": "Closure_108",
        "type": "class",
        "end_line": 610
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 431,
        "name": "ScopedAliases",
        "start_line": 73,
        "span_start": 432,
        "bug_name": "Closure_108",
        "type": "class",
        "end_line": 611
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 431,
        "name": "Traversal",
        "start_line": 245,
        "span_start": 432,
        "bug_name": "Closure_108",
        "type": "class",
        "end_line": 610
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 581,
        "name": "ScopedAliases",
        "start_line": 73,
        "span_start": 581,
        "bug_name": "Closure_108",
        "type": "class",
        "end_line": 611
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 581,
        "name": "Traversal",
        "start_line": 245,
        "span_start": 581,
        "bug_name": "Closure_108",
        "type": "class",
        "end_line": 610
      }
    ]
  },
  "Closure_110": {
    "bug_count": 11,
    "entries": [
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 357,
        "name": "ScopedAliases",
        "start_line": 73,
        "span_start": 358,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 586
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 357,
        "name": "Traversal",
        "start_line": 242,
        "span_start": 358,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 585
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 371,
        "name": "ScopedAliases",
        "start_line": 73,
        "span_start": 366,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 586
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 371,
        "name": "Traversal",
        "start_line": 242,
        "span_start": 366,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 585
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 383,
        "name": "ScopedAliases",
        "start_line": 73,
        "span_start": 383,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 586
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 383,
        "name": "Traversal",
        "start_line": 242,
        "span_start": 383,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 585
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 394,
        "name": "ScopedAliases",
        "start_line": 73,
        "span_start": 392,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 586
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 394,
        "name": "Traversal",
        "start_line": 242,
        "span_start": 392,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 585
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 408,
        "name": "ScopedAliases",
        "start_line": 73,
        "span_start": 408,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 586
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 408,
        "name": "Traversal",
        "start_line": 242,
        "span_start": 408,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 585
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_110/src/com/google/javascript/rhino/Node.java",
        "span_end": 553,
        "name": "Node",
        "start_line": 63,
        "span_start": 554,
        "bug_name": "Closure_110",
        "type": "class",
        "end_line": 2449
      }
    ]
  },
  "Closure_115": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A set of utility functions that replaces CALL with a specified\n * FUNCTION body, replacing and aliasing function parameters as\n * necessary.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 704,
        "name": "FunctionInjector",
        "start_line": 38,
        "span_start": 697,
        "bug_name": "Closure_115",
        "type": "class",
        "end_line": 947
      },
      {
        "javadoc": "/**\n * A set of utility functions that replaces CALL with a specified\n * FUNCTION body, replacing and aliasing function parameters as\n * necessary.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 732,
        "name": "FunctionInjector",
        "start_line": 38,
        "span_start": 730,
        "bug_name": "Closure_115",
        "type": "class",
        "end_line": 947
      }
    ]
  },
  "Closure_116": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A set of utility functions that replaces CALL with a specified\n * FUNCTION body, replacing and aliasing function parameters as\n * necessary.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 696,
        "name": "FunctionInjector",
        "start_line": 38,
        "span_start": 697,
        "bug_name": "Closure_116",
        "type": "class",
        "end_line": 938
      },
      {
        "javadoc": "/**\n * A set of utility functions that replaces CALL with a specified\n * FUNCTION body, replacing and aliasing function parameters as\n * necessary.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 722,
        "name": "FunctionInjector",
        "start_line": 38,
        "span_start": 723,
        "bug_name": "Closure_116",
        "type": "class",
        "end_line": 938
      }
    ]
  },
  "Closure_117": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A central reporter for all type violations: places where the programmer\n * has annotated a variable (or property) with one type, but has assigned\n * another type to it.\n *\n * Also doubles as a central repository for all type violations, so that\n * type-based optimizations (like AmbiguateProperties) can be fault-tolerant.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_117/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 726,
        "name": "TypeValidator",
        "start_line": 60,
        "span_start": 725,
        "bug_name": "Closure_117",
        "type": "class",
        "end_line": 849
      },
      {
        "javadoc": "/**\n * A central reporter for all type violations: places where the programmer\n * has annotated a variable (or property) with one type, but has assigned\n * another type to it.\n *\n * Also doubles as a central repository for all type violations, so that\n * type-based optimizations (like AmbiguateProperties) can be fault-tolerant.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_117/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 767,
        "name": "TypeValidator",
        "start_line": 60,
        "span_start": 756,
        "bug_name": "Closure_117",
        "type": "class",
        "end_line": 849
      }
    ]
  },
  "Closure_134": {
    "bug_count": 11,
    "entries": [
      {
        "javadoc": "/**\n * Renames unrelated properties to the same name, using type information.\n * This allows better compression as more properties can be given short names.\n *\n * <p>Properties are considered unrelated if they are never referenced from the\n * same type or from a subtype of each others' types, thus this pass is only\n * effective if type checking is enabled.\n *\n * Example:\n * <code>\n *   Foo.fooprop = 0;\n *   Foo.fooprop2 = 0;\n *   Bar.barprop = 0;\n * </code>\n *\n * becomes:\n *\n * <code>\n *   Foo.a = 0;\n *   Foo.b = 0;\n *   Bar.a = 0;\n * </code>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 210,
        "name": "AmbiguateProperties",
        "start_line": 80,
        "span_start": 210,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 630
      },
      {
        "javadoc": "/**\n * Renames unrelated properties to the same name, using type information.\n * This allows better compression as more properties can be given short names.\n *\n * <p>Properties are considered unrelated if they are never referenced from the\n * same type or from a subtype of each others' types, thus this pass is only\n * effective if type checking is enabled.\n *\n * Example:\n * <code>\n *   Foo.fooprop = 0;\n *   Foo.fooprop2 = 0;\n *   Bar.barprop = 0;\n * </code>\n *\n * becomes:\n *\n * <code>\n *   Foo.a = 0;\n *   Foo.b = 0;\n *   Bar.a = 0;\n * </code>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 356,
        "name": "AmbiguateProperties",
        "start_line": 80,
        "span_start": 356,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 630
      },
      {
        "javadoc": "/**\n * A {@link SubGraph} that represents properties. The types of the properties\n * are used to efficiently calculate adjacency information.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 356,
        "name": "PropertySubGraph",
        "start_line": 339,
        "span_start": 356,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 393
      },
      {
        "javadoc": "/**\n * Renames unrelated properties to the same name, using type information.\n * This allows better compression as more properties can be given short names.\n *\n * <p>Properties are considered unrelated if they are never referenced from the\n * same type or from a subtype of each others' types, thus this pass is only\n * effective if type checking is enabled.\n *\n * Example:\n * <code>\n *   Foo.fooprop = 0;\n *   Foo.fooprop2 = 0;\n *   Bar.barprop = 0;\n * </code>\n *\n * becomes:\n *\n * <code>\n *   Foo.a = 0;\n *   Foo.b = 0;\n *   Bar.a = 0;\n * </code>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 366,
        "name": "AmbiguateProperties",
        "start_line": 80,
        "span_start": 366,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 630
      },
      {
        "javadoc": "/**\n * A {@link SubGraph} that represents properties. The types of the properties\n * are used to efficiently calculate adjacency information.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 366,
        "name": "PropertySubGraph",
        "start_line": 339,
        "span_start": 366,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 393
      },
      {
        "javadoc": "/**\n * Renames unrelated properties to the same name, using type information.\n * This allows better compression as more properties can be given short names.\n *\n * <p>Properties are considered unrelated if they are never referenced from the\n * same type or from a subtype of each others' types, thus this pass is only\n * effective if type checking is enabled.\n *\n * Example:\n * <code>\n *   Foo.fooprop = 0;\n *   Foo.fooprop2 = 0;\n *   Bar.barprop = 0;\n * </code>\n *\n * becomes:\n *\n * <code>\n *   Foo.a = 0;\n *   Foo.b = 0;\n *   Bar.a = 0;\n * </code>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 557,
        "name": "AmbiguateProperties",
        "start_line": 80,
        "span_start": 553,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 630
      },
      {
        "javadoc": "/**\n * Encapsulates the information needed for renaming a property.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 557,
        "name": "Property",
        "start_line": 551,
        "span_start": 553,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 601
      },
      {
        "javadoc": "/**\n * Renames unrelated properties to the same name, using type information.\n * This allows better compression as more properties can be given short names.\n *\n * <p>Properties are considered unrelated if they are never referenced from the\n * same type or from a subtype of each others' types, thus this pass is only\n * effective if type checking is enabled.\n *\n * Example:\n * <code>\n *   Foo.fooprop = 0;\n *   Foo.fooprop2 = 0;\n *   Bar.barprop = 0;\n * </code>\n *\n * becomes:\n *\n * <code>\n *   Foo.a = 0;\n *   Foo.b = 0;\n *   Bar.a = 0;\n * </code>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 599,
        "name": "AmbiguateProperties",
        "start_line": 80,
        "span_start": 594,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 630
      },
      {
        "javadoc": "/**\n * Encapsulates the information needed for renaming a property.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 599,
        "name": "Property",
        "start_line": 551,
        "span_start": 594,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 601
      },
      {
        "javadoc": "/**\n * Creates the symbol table of variables available in the current scope and\n * their types.\n *\n * Scopes created by this class are very different from scopes created\n * by the syntactic scope creator. These scopes have type information, and\n * include some qualified names in addition to variables\n * (like Class.staticMethod).\n *\n * When building scope information, also declares relevant information\n * about types in the type registry.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 562,
        "name": "TypedScopeCreator",
        "start_line": 82,
        "span_start": 560,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 1323
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_134/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 562,
        "name": "AbstractScopeBuilder",
        "start_line": 231,
        "span_start": 560,
        "bug_name": "Closure_134",
        "type": "class",
        "end_line": 715
      }
    ]
  },
  "Closure_135": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Rewrites prototyped methods calls as static calls that take \"this\"\n * as their first argument.  This tranformation simplifies the call\n * graph so smart name removal, cross module code motion and other\n * passes can do more.\n *\n * <p>This pass should only be used in production code if property\n * and variable renaming are turned on.  Resulting code may also\n * benefit from --collapse_anonymous_functions and\n * --collapse_variable_declarations\n *\n * <p>This pass only rewrites functions that are part of an objects\n * prototype.  Functions that access the \"arguments\" variable\n * arguments object are not eligible for this optimization.\n *\n * <p>For example:\n * <pre>\n *     A.prototype.accumulate = function(value) {\n *       this.total += value; return this.total\n *     }\n *     var total = a.accumulate(2)\n * </pre>\n *\n * <p>will be rewritten as:\n *\n * <pre>\n *     var accumulate = function(self, value) {\n *       self.total += value; return self.total\n *     }\n *     var total = accumulate(a, 2)\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_135/src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "span_end": 361,
        "name": "DevirtualizePrototypeMethods",
        "start_line": 67,
        "span_start": 362,
        "bug_name": "Closure_135",
        "type": "class",
        "end_line": 368
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_135/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 411,
        "name": "FunctionType",
        "start_line": 68,
        "span_start": 412,
        "bug_name": "Closure_135",
        "type": "class",
        "end_line": 848
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_135/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 471,
        "name": "FunctionType",
        "start_line": 68,
        "span_start": 472,
        "bug_name": "Closure_135",
        "type": "class",
        "end_line": 848
      }
    ]
  },
  "Closure_136": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Finds all method declarations and pulls them into data structures\n * for use during cleanups such as arity checks or inlining.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_136/src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "span_end": 125,
        "name": "MethodCompilerPass",
        "start_line": 38,
        "span_start": 102,
        "bug_name": "Closure_136",
        "type": "class",
        "end_line": 275
      },
      {
        "javadoc": "/**\n * RenameVars renames all the variables names into short names, to reduce\n * code size and also to obfuscate the code.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_136/src/com/google/javascript/jscomp/RenameVars.java",
        "span_end": 203,
        "name": "RenameVars",
        "start_line": 36,
        "span_start": 203,
        "bug_name": "Closure_136",
        "type": "class",
        "end_line": 482
      },
      {
        "javadoc": "/**\n * Iterate through the nodes, collect all the NAME nodes that need to be\n * renamed, and count how many times each variable name is referenced.\n *\n * There are 2 passes:\n * - externs: keep track of the global vars in the externNames_ map.\n * - source: keep track of all name references in globalNameNodes_, and\n *   localNameNodes_.\n *\n * To get shorter local variable renaming, we rename local variables to a\n * temporary name \"LOCAL_VAR_PREFIX + index\" where index is the index of the\n * variable declared in the local scope stack.\n * e.g.\n * Foo(fa, fb) {\n *   var c = function(d, e) { return fa; }\n * }\n * The indexes are: fa:0, fb:1, c:2, d:3, e:4\n *\n * In that way, local variable names are reused in each global function.\n * e.g. the final code might look like\n * function x(a,b) { ... }\n * function y(a,b,c) { ... }\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_136/src/com/google/javascript/jscomp/RenameVars.java",
        "span_end": 203,
        "name": "ProcessVars",
        "start_line": 163,
        "span_start": 203,
        "bug_name": "Closure_136",
        "type": "class",
        "end_line": 237
      }
    ]
  },
  "Closure_137": {
    "bug_count": 14,
    "entries": [
      {
        "javadoc": "/**\n *  Find all Functions, VARs, and Exception names and make them\n *  unique.  Specifically, it will not modify object properties.\n *  @author johnlenz@google.com (John Lenz)\n *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 47,
        "name": "MakeDeclaredNamesUnique",
        "start_line": 45,
        "span_start": 48,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 498
      },
      {
        "javadoc": "/**\n *  Find all Functions, VARs, and Exception names and make them\n *  unique.  Specifically, it will not modify object properties.\n *  @author johnlenz@google.com (John Lenz)\n *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 244,
        "name": "MakeDeclaredNamesUnique",
        "start_line": 45,
        "span_start": 235,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 498
      },
      {
        "javadoc": "/**\n * Inverts the transformation by {@link ContextualRenamer}, when possible.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 244,
        "name": "ContextualRenameInverter",
        "start_line": 235,
        "span_start": 235,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 345
      },
      {
        "javadoc": "/**\n *  Find all Functions, VARs, and Exception names and make them\n *  unique.  Specifically, it will not modify object properties.\n *  @author johnlenz@google.com (John Lenz)\n *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 344,
        "name": "MakeDeclaredNamesUnique",
        "start_line": 45,
        "span_start": 266,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 498
      },
      {
        "javadoc": "/**\n * Inverts the transformation by {@link ContextualRenamer}, when possible.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 344,
        "name": "ContextualRenameInverter",
        "start_line": 235,
        "span_start": 266,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 345
      },
      {
        "javadoc": "/**\n *  Find all Functions, VARs, and Exception names and make them\n *  unique.  Specifically, it will not modify object properties.\n *  @author johnlenz@google.com (John Lenz)\n *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 390,
        "name": "MakeDeclaredNamesUnique",
        "start_line": 45,
        "span_start": 391,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 498
      },
      {
        "javadoc": "/**\n * Rename every locally name to be unique, the first encountered declaration\n * (specifically global names) are left in their original form. Those that are\n * renamed are made unique by giving them a unique suffix based on\n * the number of declarations of the name.\n *\n * The root ContextualRenamer is assumed to be in GlobalScope.\n *\n * Used by the Normalize pass.\n * @see Normalize\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 390,
        "name": "ContextualRenamer",
        "start_line": 358,
        "span_start": 391,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 430
      },
      {
        "javadoc": "/**\n *  Find all Functions, VARs, and Exception names and make them\n *  unique.  Specifically, it will not modify object properties.\n *  @author johnlenz@google.com (John Lenz)\n *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 401,
        "name": "MakeDeclaredNamesUnique",
        "start_line": 45,
        "span_start": 400,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 498
      },
      {
        "javadoc": "/**\n * Rename every locally name to be unique, the first encountered declaration\n * (specifically global names) are left in their original form. Those that are\n * renamed are made unique by giving them a unique suffix based on\n * the number of declarations of the name.\n *\n * The root ContextualRenamer is assumed to be in GlobalScope.\n *\n * Used by the Normalize pass.\n * @see Normalize\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 401,
        "name": "ContextualRenamer",
        "start_line": 358,
        "span_start": 400,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 430
      },
      {
        "javadoc": "/**\n *  Find all Functions, VARs, and Exception names and make them\n *  unique.  Specifically, it will not modify object properties.\n *  @author johnlenz@google.com (John Lenz)\n *  TODO(johnlenz): Try to merge this with the ScopeCreator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 460,
        "name": "MakeDeclaredNamesUnique",
        "start_line": 45,
        "span_start": 461,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 498
      },
      {
        "javadoc": "/**\n * Rename every declared name to be unique. Typically this would be used\n * when injecting code to insure that names do not conflict with existing\n * names.\n *\n * Used by the FunctionInjector\n * @see FunctionInjector\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 460,
        "name": "InlineRenamer",
        "start_line": 441,
        "span_start": 461,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 496
      },
      {
        "javadoc": "/**\n * NodeUtil contains utilities that get properties from the Node object.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 1042,
        "name": "NodeUtil",
        "start_line": 43,
        "span_start": 1043,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 1978
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 82,
        "name": "Normalize",
        "start_line": 58,
        "span_start": 82,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 564
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_137/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 101,
        "name": "Normalize",
        "start_line": 58,
        "span_start": 102,
        "bug_name": "Closure_137",
        "type": "class",
        "end_line": 564
      }
    ]
  },
  "Closure_138": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * A reverse abstract interpreter (RAI) for specific closure patterns such as\n * {@code goog.isDef}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_138/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
        "span_end": 208,
        "name": "ClosureReverseAbstractInterpreter",
        "start_line": 45,
        "span_start": 208,
        "bug_name": "Closure_138",
        "type": "class",
        "end_line": 252
      },
      {
        "javadoc": "/**\n * A reverse abstract interpreter (RAI) for specific closure patterns such as\n * {@code goog.isDef}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_138/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
        "span_end": 218,
        "name": "ClosureReverseAbstractInterpreter",
        "start_line": 45,
        "span_start": 218,
        "bug_name": "Closure_138",
        "type": "class",
        "end_line": 252
      },
      {
        "javadoc": "/**\n * Type inference within a script node or a function body, using the data-flow\n * analysis framework.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_138/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 646,
        "name": "TypeInference",
        "start_line": 63,
        "span_start": 632,
        "bug_name": "Closure_138",
        "type": "class",
        "end_line": 1218
      }
    ]
  },
  "Closure_139": {
    "bug_count": 8,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 280,
        "name": "Normalize",
        "start_line": 60,
        "span_start": 281,
        "bug_name": "Closure_139",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * Simplify the AST:\n *   - VAR declarations split, so they represent exactly one child\n *     declaration.\n *   - WHILEs are converted to FORs\n *   - FOR loop are initializers are moved out of the FOR structure\n *   - LABEL node of children other than LABEL, BLOCK, WHILE, FOR, or DO are\n *     moved into a block.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 280,
        "name": "NormalizeStatements",
        "start_line": 244,
        "span_start": 281,
        "bug_name": "Closure_139",
        "type": "class",
        "end_line": 493
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 291,
        "name": "Normalize",
        "start_line": 60,
        "span_start": 292,
        "bug_name": "Closure_139",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * Simplify the AST:\n *   - VAR declarations split, so they represent exactly one child\n *     declaration.\n *   - WHILEs are converted to FORs\n *   - FOR loop are initializers are moved out of the FOR structure\n *   - LABEL node of children other than LABEL, BLOCK, WHILE, FOR, or DO are\n *     moved into a block.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 291,
        "name": "NormalizeStatements",
        "start_line": 244,
        "span_start": 292,
        "bug_name": "Closure_139",
        "type": "class",
        "end_line": 493
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 314,
        "name": "Normalize",
        "start_line": 60,
        "span_start": 309,
        "bug_name": "Closure_139",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * Simplify the AST:\n *   - VAR declarations split, so they represent exactly one child\n *     declaration.\n *   - WHILEs are converted to FORs\n *   - FOR loop are initializers are moved out of the FOR structure\n *   - LABEL node of children other than LABEL, BLOCK, WHILE, FOR, or DO are\n *     moved into a block.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 314,
        "name": "NormalizeStatements",
        "start_line": 244,
        "span_start": 309,
        "bug_name": "Closure_139",
        "type": "class",
        "end_line": 493
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 522,
        "name": "Normalize",
        "start_line": 60,
        "span_start": 521,
        "bug_name": "Closure_139",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * ScopeCreator duplicate declaration handler.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 522,
        "name": "DuplicateDeclarationHandler",
        "start_line": 509,
        "span_start": 521,
        "bug_name": "Closure_139",
        "type": "class",
        "end_line": 571
      }
    ]
  },
  "Closure_140": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Compiler (and the other classes in this package) does the following:\n * <ul>\n * <li>parses JS code\n * <li>checks for undefined variables\n * <li>performs optimizations such as constant folding and constants inlining\n * <li>renames variables (to short names)\n * <li>outputs compact javascript code\n * </ul>\n *\n * External variables are declared in 'externs' files. For instance, the file\n * may include definitions for global javascript/browser objects such as\n * window, document.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_140/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 263,
        "name": "Compiler",
        "start_line": 62,
        "span_start": 264,
        "bug_name": "Closure_140",
        "type": "class",
        "end_line": 1695
      },
      {
        "javadoc": "/**\n * Compiler (and the other classes in this package) does the following:\n * <ul>\n * <li>parses JS code\n * <li>checks for undefined variables\n * <li>performs optimizations such as constant folding and constants inlining\n * <li>renames variables (to short names)\n * <li>outputs compact javascript code\n * </ul>\n *\n * External variables are declared in 'externs' files. For instance, the file\n * may include definitions for global javascript/browser objects such as\n * window, document.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_140/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 327,
        "name": "Compiler",
        "start_line": 62,
        "span_start": 328,
        "bug_name": "Closure_140",
        "type": "class",
        "end_line": 1695
      },
      {
        "javadoc": "/**\n * Compiler (and the other classes in this package) does the following:\n * <ul>\n * <li>parses JS code\n * <li>checks for undefined variables\n * <li>performs optimizations such as constant folding and constants inlining\n * <li>renames variables (to short names)\n * <li>outputs compact javascript code\n * </ul>\n *\n * External variables are declared in 'externs' files. For instance, the file\n * may include definitions for global javascript/browser objects such as\n * window, document.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_140/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 1587,
        "name": "Compiler",
        "start_line": 62,
        "span_start": 1582,
        "bug_name": "Closure_140",
        "type": "class",
        "end_line": 1695
      }
    ]
  },
  "Closure_141": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * NodeUtil contains utilities that get properties from the Node object.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_141/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 603,
        "name": "NodeUtil",
        "start_line": 43,
        "span_start": 602,
        "bug_name": "Closure_141",
        "type": "class",
        "end_line": 1986
      },
      {
        "javadoc": "/**\n * Compiler pass that computes function purity.  A function is pure if\n * it has no outside visible side effects, and the result of the\n * computation does not depend on external factors that are beyond the\n * control of the application; repeated calls to the function should\n * return the same value as long as global state hasn't changed.\n *\n * Date.now is an example of a function that has no side effects but\n * is not pure.\n *\n * We will prevail, in peace and freedom from fear, and in true\n * health, through the purity and essence of our natural... fluids.\n *                                    - General Turgidson\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_141/src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "span_end": 181,
        "name": "PureFunctionIdentifier",
        "start_line": 55,
        "span_start": 177,
        "bug_name": "Closure_141",
        "type": "class",
        "end_line": 694
      },
      {
        "javadoc": "/**\n * Compiler pass that computes function purity.  A function is pure if\n * it has no outside visible side effects, and the result of the\n * computation does not depend on external factors that are beyond the\n * control of the application; repeated calls to the function should\n * return the same value as long as global state hasn't changed.\n *\n * Date.now is an example of a function that has no side effects but\n * is not pure.\n *\n * We will prevail, in peace and freedom from fear, and in true\n * health, through the purity and essence of our natural... fluids.\n *                                    - General Turgidson\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_141/src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "span_end": 197,
        "name": "PureFunctionIdentifier",
        "start_line": 55,
        "span_start": 198,
        "bug_name": "Closure_141",
        "type": "class",
        "end_line": 694
      }
    ]
  },
  "Closure_142": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Reuse variable names if possible.\n *\n * <p>For example, from <code>var x = 1; print(x); var y = 2; print(y); </code>\n * to <code>var x = 1; print(x); x = 2; print(x)</code>. The benefits are\n * slightly shorter code because of the removed <code>var<code> declaration,\n * less unique variables in hope for better renaming, and finally better gzip\n * compression.\n *\n * <p>The pass operates similar to a typical register allocator found in an\n * optimizing compiler by first computing live ranges with\n * {@link LiveVariablesAnalysis} and a variable interference graph. Then it uses\n * graph coloring in {@link GraphColoring} to determine which two variables can\n * be merge together safely.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_142/src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "span_end": 107,
        "name": "CoalesceVariableNames",
        "start_line": 61,
        "span_start": 108,
        "bug_name": "Closure_142",
        "type": "class",
        "end_line": 454
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_142/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1167,
        "name": "JsDocInfoParser",
        "start_line": 44,
        "span_start": 1168,
        "bug_name": "Closure_142",
        "type": "class",
        "end_line": 2031
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_142/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1182,
        "name": "JsDocInfoParser",
        "start_line": 44,
        "span_start": 1183,
        "bug_name": "Closure_142",
        "type": "class",
        "end_line": 2031
      }
    ]
  },
  "Closure_143": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Implementations of AbstractCommandLineRunner translate flags into Java\n * API calls on the Compiler. AbstractCompiler contains common flags and logic\n * to make that happen.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. Example:\n *\n * <pre>\n * class MyCommandLineRunner extends\n *     AbstractCommandLineRunner<MyCompiler, MyOptions> {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   &#064;Override\n *   protected MyOptions createOptions() {\n *     MyOptions options = new MyOptions();\n *     CompilerFlagTranslator.setOptionsFromFlags(options);\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   &#064;Override\n *   protected MyCompiler createCompiler() {\n *     return new MyCompiler();\n *   }\n *\n *   public static void main(String[] args) {\n *     (new MyCommandLineRunner(args)).run();\n *   }\n * }\n * </pre>\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_143/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 871,
        "name": "AbstractCommandLineRunner",
        "start_line": 77,
        "span_start": 871,
        "bug_name": "Closure_143",
        "type": "class",
        "end_line": 1256
      },
      {
        "javadoc": "/**\n * Pass that simplifies expression statements by replacing the\n * expression with the portions that have side effects.\n *\n * <p>This pass will rewrite:\n * <pre>\n *   1 + foo() + bar()\n * </pre>\n * as:\n * <pre>\n *   foo();bar()\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_143/src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "span_end": 91,
        "name": "RemoveConstantExpressions",
        "start_line": 42,
        "span_start": 91,
        "bug_name": "Closure_143",
        "type": "class",
        "end_line": 135
      },
      {
        "javadoc": "/**\n * Used to simplify expressions by removing subexpressions that have\n * no side effects which are not inputs to expressions with side\n * effects.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_143/src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "span_end": 91,
        "name": "RemoveConstantRValuesCallback",
        "start_line": 61,
        "span_start": 91,
        "bug_name": "Closure_143",
        "type": "class",
        "end_line": 118
      }
    ]
  },
  "Closure_144": {
    "bug_count": 12,
    "entries": [
      {
        "javadoc": "/**\n * A builder for FunctionTypes, because FunctionTypes are so\n * ridiculously complex. All methods return {@code this} for ease of use.\n *\n * Right now, this mostly uses JSDocInfo to infer type information about\n * functions. In the long term, developers should extend it to use other\n * signals by overloading the various \"inferXXX\" methods. For example, we\n * might want to use {@code goog.inherits} calls as a signal for inheritance, or\n * {@code return} statements as a signal for return type.\n *\n * NOTE(nicksantos): Organizationally, this feels like it should be in Rhino.\n * But it depends on some coding convention stuff that's really part\n * of JSCompiler.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 73,
        "name": "FunctionTypeBuilder",
        "start_line": 63,
        "span_start": 74,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 587
      },
      {
        "javadoc": "/**\n * A builder for FunctionTypes, because FunctionTypes are so\n * ridiculously complex. All methods return {@code this} for ease of use.\n *\n * Right now, this mostly uses JSDocInfo to infer type information about\n * functions. In the long term, developers should extend it to use other\n * signals by overloading the various \"inferXXX\" methods. For example, we\n * might want to use {@code goog.inherits} calls as a signal for inheritance, or\n * {@code return} statements as a signal for return type.\n *\n * NOTE(nicksantos): Organizationally, this feels like it should be in Rhino.\n * But it depends on some coding convention stuff that's really part\n * of JSCompiler.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 202,
        "name": "FunctionTypeBuilder",
        "start_line": 63,
        "span_start": 200,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 587
      },
      {
        "javadoc": "/**\n * A builder for FunctionTypes, because FunctionTypes are so\n * ridiculously complex. All methods return {@code this} for ease of use.\n *\n * Right now, this mostly uses JSDocInfo to infer type information about\n * functions. In the long term, developers should extend it to use other\n * signals by overloading the various \"inferXXX\" methods. For example, we\n * might want to use {@code goog.inherits} calls as a signal for inheritance, or\n * {@code return} statements as a signal for return type.\n *\n * NOTE(nicksantos): Organizationally, this feels like it should be in Rhino.\n * But it depends on some coding convention stuff that's really part\n * of JSCompiler.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 213,
        "name": "FunctionTypeBuilder",
        "start_line": 63,
        "span_start": 213,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 587
      },
      {
        "javadoc": "/**\n * A builder for FunctionTypes, because FunctionTypes are so\n * ridiculously complex. All methods return {@code this} for ease of use.\n *\n * Right now, this mostly uses JSDocInfo to infer type information about\n * functions. In the long term, developers should extend it to use other\n * signals by overloading the various \"inferXXX\" methods. For example, we\n * might want to use {@code goog.inherits} calls as a signal for inheritance, or\n * {@code return} statements as a signal for return type.\n *\n * NOTE(nicksantos): Organizationally, this feels like it should be in Rhino.\n * But it depends on some coding convention stuff that's really part\n * of JSCompiler.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 496,
        "name": "FunctionTypeBuilder",
        "start_line": 63,
        "span_start": 496,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 587
      },
      {
        "javadoc": "/**\n * Creates the symbol table of variables available in the current scope and\n * their types.\n *\n * Scopes created by this class are very different from scopes created\n * by the syntactic scope creator. These scopes have type information, and\n * include some qualified names in addition to variables\n * (like Class.staticMethod).\n *\n * When building scope information, also declares relevant information\n * about types in the type registry.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 576,
        "name": "TypedScopeCreator",
        "start_line": 83,
        "span_start": 577,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 1429
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 576,
        "name": "AbstractScopeBuilder",
        "start_line": 296,
        "span_start": 577,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 819
      },
      {
        "javadoc": "/**\n * Creates the symbol table of variables available in the current scope and\n * their types.\n *\n * Scopes created by this class are very different from scopes created\n * by the syntactic scope creator. These scopes have type information, and\n * include some qualified names in addition to variables\n * (like Class.staticMethod).\n *\n * When building scope information, also declares relevant information\n * about types in the type registry.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 616,
        "name": "TypedScopeCreator",
        "start_line": 83,
        "span_start": 617,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 1429
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 616,
        "name": "AbstractScopeBuilder",
        "start_line": 296,
        "span_start": 617,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 819
      },
      {
        "javadoc": "/**\n * Creates the symbol table of variables available in the current scope and\n * their types.\n *\n * Scopes created by this class are very different from scopes created\n * by the syntactic scope creator. These scopes have type information, and\n * include some qualified names in addition to variables\n * (like Class.staticMethod).\n *\n * When building scope information, also declares relevant information\n * about types in the type registry.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 633,
        "name": "TypedScopeCreator",
        "start_line": 83,
        "span_start": 634,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 1429
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 633,
        "name": "AbstractScopeBuilder",
        "start_line": 296,
        "span_start": 634,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 819
      },
      {
        "javadoc": "/**\n * A builder class for function and arrow types.\n *\n * If you need to build an interface constructor,\n * use {@link JSTypeRegistry#createInterfaceType}.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "span_end": 100,
        "name": "FunctionBuilder",
        "start_line": 52,
        "span_start": 101,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 152
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_144/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 517,
        "name": "FunctionType",
        "start_line": 67,
        "span_start": 517,
        "bug_name": "Closure_144",
        "type": "class",
        "end_line": 867
      }
    ]
  },
  "Closure_147": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Checks for certain uses of the {@code this} keyword that are considered\n * unsafe because they are likely to reference the global {@code this} object\n * unintentionally.\n *\n * <p>A use of {@code this} is considered unsafe if it's on the left side of an\n * assignment or a property access, and not inside one of the following:\n * <ol>\n * <li>a prototype method\n * <li>a function annotated with {@code @constructor}\n * <li>a function annotated with {@code @this}.\n * <li>a function where there's no logical place to put a\n *     {@code this} annotation.\n * </ol>\n *\n * <p>Note that this check does not track assignments of {@code this} to\n * variables or objects. The code\n * <pre>\n * function evil() {\n *   var a = this;\n *   a.useful = undefined;\n * }\n * </pre>\n * will not get flagged, even though it is semantically equivalent to\n * <pre>\n * function evil() {\n *   this.useful = undefined;\n * }\n * </pre>\n * which would get flagged.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_147/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 108,
        "name": "CheckGlobalThis",
        "start_line": 59,
        "span_start": 108,
        "bug_name": "Closure_147",
        "type": "class",
        "end_line": 190
      },
      {
        "javadoc": "/**\n * Inserts runtime type assertions.\n *\n * <p>We add markers to user-defined interfaces and classes in order to check if\n * an object conforms to that type.\n *\n * <p>For each function, we insert a runtime type assertion for each parameter\n * and return value for which the compiler has a type.\n *\n * <p>The JavaScript code which implements the type assertions is in\n * js/runtime-type-check.js.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_147/src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "span_end": 246,
        "name": "RuntimeTypeCheck",
        "start_line": 55,
        "span_start": 247,
        "bug_name": "Closure_147",
        "type": "class",
        "end_line": 398
      },
      {
        "javadoc": "/**\n * Insert calls to the runtime type checking function {@code checkType}, which\n * takes an expression to check and a list of checkers (one of which must\n * match). It returns the expression back to facilitate checking of return\n * values. We have checkers for value types, class types (user-defined and\n * externed), and interface types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_147/src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "span_end": 246,
        "name": "AddChecks",
        "start_line": 218,
        "span_start": 247,
        "bug_name": "Closure_147",
        "type": "class",
        "end_line": 367
      }
    ]
  },
  "Closure_148": {
    "bug_count": 24,
    "entries": [
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 395,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 373,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 395,
        "name": "LineMapper",
        "start_line": 341,
        "span_start": 373,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 548
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 413,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 405,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 413,
        "name": "LineMapper",
        "start_line": 341,
        "span_start": 405,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 548
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 432,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 426,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 432,
        "name": "LineMapper",
        "start_line": 341,
        "span_start": 426,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 548
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 458,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 441,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 458,
        "name": "LineMapper",
        "start_line": 341,
        "span_start": 441,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 548
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 543,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 496,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 543,
        "name": "LineMapper",
        "start_line": 341,
        "span_start": 496,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 548
      },
      {
        "javadoc": "/**\n * Peephole optimization to fold constants (e.g. x + 1 + 7 --> x + 8).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "span_end": 181,
        "name": "PeepholeFoldConstants",
        "start_line": 33,
        "span_start": 182,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 1189
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 40,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 41,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 50,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 50,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "javadoc": "/**\n * A mapping from a given position in an input source file to a given position\n * in the generated code.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 50,
        "name": "Mapping",
        "start_line": 46,
        "span_start": 50,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 117
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 116,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 85,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "javadoc": "/**\n * A mapping from a given position in an input source file to a given position\n * in the generated code.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 116,
        "name": "Mapping",
        "start_line": 46,
        "span_start": 85,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 117
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 144,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 143,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 179,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 163,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 202,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 203,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 264,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 257,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 304,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 304,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 351,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 326,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "javadoc": "/**\n * Collects information mapping the generated (compiled) source back to\n * its original source for debugging purposes.\n *\n * @see CodeConsumer\n * @see CodeGenerator\n * @see CodePrinter\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 364,
        "name": "SourceMap",
        "start_line": 39,
        "span_start": 360,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 549
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 364,
        "name": "LineMapper",
        "start_line": 341,
        "span_start": 360,
        "bug_name": "Closure_148",
        "type": "class",
        "end_line": 548
      }
    ]
  },
  "Closure_149": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * Implementations of AbstractCommandLineRunner translate flags into Java\n * API calls on the Compiler. AbstractCompiler contains common flags and logic\n * to make that happen.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. Example:\n *\n * <pre>\n * class MyCommandLineRunner extends\n *     AbstractCommandLineRunner<MyCompiler, MyOptions> {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   &#064;Override\n *   protected MyOptions createOptions() {\n *     MyOptions options = new MyOptions();\n *     CompilerFlagTranslator.setOptionsFromFlags(options);\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   &#064;Override\n *   protected MyCompiler createCompiler() {\n *     return new MyCompiler();\n *   }\n *\n *   public static void main(String[] args) {\n *     (new MyCommandLineRunner(args)).run();\n *   }\n * }\n * </pre>\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_149/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 158,
        "name": "AbstractCommandLineRunner",
        "start_line": 81,
        "span_start": 159,
        "bug_name": "Closure_149",
        "type": "class",
        "end_line": 1456
      },
      {
        "javadoc": "/**\n * Implementations of AbstractCommandLineRunner translate flags into Java\n * API calls on the Compiler. AbstractCompiler contains common flags and logic\n * to make that happen.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. Example:\n *\n * <pre>\n * class MyCommandLineRunner extends\n *     AbstractCommandLineRunner<MyCompiler, MyOptions> {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   &#064;Override\n *   protected MyOptions createOptions() {\n *     MyOptions options = new MyOptions();\n *     CompilerFlagTranslator.setOptionsFromFlags(options);\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   &#064;Override\n *   protected MyCompiler createCompiler() {\n *     return new MyCompiler();\n *   }\n *\n *   public static void main(String[] args) {\n *     (new MyCommandLineRunner(args)).run();\n *   }\n * }\n * </pre>\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_149/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 522,
        "name": "AbstractCommandLineRunner",
        "start_line": 81,
        "span_start": 518,
        "bug_name": "Closure_149",
        "type": "class",
        "end_line": 1456
      },
      {
        "javadoc": "/**\n * Implementations of AbstractCommandLineRunner translate flags into Java\n * API calls on the Compiler. AbstractCompiler contains common flags and logic\n * to make that happen.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. Example:\n *\n * <pre>\n * class MyCommandLineRunner extends\n *     AbstractCommandLineRunner<MyCompiler, MyOptions> {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   &#064;Override\n *   protected MyOptions createOptions() {\n *     MyOptions options = new MyOptions();\n *     CompilerFlagTranslator.setOptionsFromFlags(options);\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   &#064;Override\n *   protected MyCompiler createCompiler() {\n *     return new MyCompiler();\n *   }\n *\n *   public static void main(String[] args) {\n *     (new MyCommandLineRunner(args)).run();\n *   }\n * }\n * </pre>\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_149/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 692,
        "name": "AbstractCommandLineRunner",
        "start_line": 81,
        "span_start": 693,
        "bug_name": "Closure_149",
        "type": "class",
        "end_line": 1456
      },
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_149/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 471,
        "name": "CommandLineRunner",
        "start_line": 79,
        "span_start": 471,
        "bug_name": "Closure_149",
        "type": "class",
        "end_line": 593
      },
      {
        "javadoc": "/**\n * Compiler (and the other classes in this package) does the following:\n * <ul>\n * <li>parses JS code\n * <li>checks for undefined variables\n * <li>performs optimizations such as constant folding and constants inlining\n * <li>renames variables (to short names)\n * <li>outputs compact javascript code\n * </ul>\n *\n * External variables are declared in 'externs' files. For instance, the file\n * may include definitions for global javascript/browser objects such as\n * window, document.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_149/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 1362,
        "name": "Compiler",
        "start_line": 65,
        "span_start": 1362,
        "bug_name": "Closure_149",
        "type": "class",
        "end_line": 1839
      },
      {
        "javadoc": "/**\n * Compiler options\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_149/src/com/google/javascript/jscomp/CompilerOptions.java",
        "span_end": 588,
        "name": "CompilerOptions",
        "start_line": 38,
        "span_start": 588,
        "bug_name": "Closure_149",
        "type": "class",
        "end_line": 1014
      },
      {
        "javadoc": "/**\n * Compiler options\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_149/src/com/google/javascript/jscomp/CompilerOptions.java",
        "span_end": 959,
        "name": "CompilerOptions",
        "start_line": 38,
        "span_start": 960,
        "bug_name": "Closure_149",
        "type": "class",
        "end_line": 1014
      }
    ]
  },
  "Closure_151": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_151/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 300,
        "name": "CommandLineRunner",
        "start_line": 80,
        "span_start": 301,
        "bug_name": "Closure_151",
        "type": "class",
        "end_line": 596
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_151/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 300,
        "name": "Flags",
        "start_line": 83,
        "span_start": 301,
        "bug_name": "Closure_151",
        "type": "class",
        "end_line": 341
      },
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_151/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 366,
        "name": "CommandLineRunner",
        "start_line": 80,
        "span_start": 367,
        "bug_name": "Closure_151",
        "type": "class",
        "end_line": 596
      },
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_151/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 417,
        "name": "CommandLineRunner",
        "start_line": 80,
        "span_start": 418,
        "bug_name": "Closure_151",
        "type": "class",
        "end_line": 596
      }
    ]
  },
  "Closure_153": {
    "bug_count": 18,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 630,
        "name": "Normalize",
        "start_line": 62,
        "span_start": 631,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 760
      },
      {
        "javadoc": "/**\n * ScopeCreator duplicate declaration handler.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 630,
        "name": "DuplicateDeclarationHandler",
        "start_line": 628,
        "span_start": 631,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 730
      },
      {
        "javadoc": "/**\n * <p>The syntactic scope creator scans the parse tree to create a Scope object\n * containing all the variable declarations in that scope.</p>\n *\n * <p>This implementation is not thread-safe.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 243,
        "name": "SyntacticScopeCreator",
        "start_line": 32,
        "span_start": 234,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 246
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 646,
        "name": "Normalize",
        "start_line": 62,
        "span_start": 638,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 760
      },
      {
        "javadoc": "/**\n * ScopeCreator duplicate declaration handler.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 646,
        "name": "DuplicateDeclarationHandler",
        "start_line": 628,
        "span_start": 638,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 730
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 669,
        "name": "Normalize",
        "start_line": 62,
        "span_start": 669,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 760
      },
      {
        "javadoc": "/**\n * ScopeCreator duplicate declaration handler.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 669,
        "name": "DuplicateDeclarationHandler",
        "start_line": 628,
        "span_start": 669,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 730
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 681,
        "name": "Normalize",
        "start_line": 62,
        "span_start": 681,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 760
      },
      {
        "javadoc": "/**\n * ScopeCreator duplicate declaration handler.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 681,
        "name": "DuplicateDeclarationHandler",
        "start_line": 628,
        "span_start": 681,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 730
      },
      {
        "javadoc": "/**\n * <p>The syntactic scope creator scans the parse tree to create a Scope object\n * containing all the variable declarations in that scope.</p>\n *\n * <p>This implementation is not thread-safe.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 94,
        "name": "SyntacticScopeCreator",
        "start_line": 32,
        "span_start": 94,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 246
      },
      {
        "javadoc": "/**\n * <p>The syntactic scope creator scans the parse tree to create a Scope object\n * containing all the variable declarations in that scope.</p>\n *\n * <p>This implementation is not thread-safe.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 102,
        "name": "SyntacticScopeCreator",
        "start_line": 32,
        "span_start": 102,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 246
      },
      {
        "javadoc": "/**\n * <p>The syntactic scope creator scans the parse tree to create a Scope object\n * containing all the variable declarations in that scope.</p>\n *\n * <p>This implementation is not thread-safe.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 126,
        "name": "SyntacticScopeCreator",
        "start_line": 32,
        "span_start": 124,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 246
      },
      {
        "javadoc": "/**\n * <p>The syntactic scope creator scans the parse tree to create a Scope object\n * containing all the variable declarations in that scope.</p>\n *\n * <p>This implementation is not thread-safe.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 141,
        "name": "SyntacticScopeCreator",
        "start_line": 32,
        "span_start": 141,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 246
      },
      {
        "javadoc": "/**\n * <p>The syntactic scope creator scans the parse tree to create a Scope object\n * containing all the variable declarations in that scope.</p>\n *\n * <p>This implementation is not thread-safe.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 153,
        "name": "SyntacticScopeCreator",
        "start_line": 32,
        "span_start": 153,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 246
      },
      {
        "javadoc": "/**\n * <p>The syntactic scope creator scans the parse tree to create a Scope object\n * containing all the variable declarations in that scope.</p>\n *\n * <p>This implementation is not thread-safe.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 180,
        "name": "SyntacticScopeCreator",
        "start_line": 32,
        "span_start": 179,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 246
      },
      {
        "javadoc": "/**\n * Interface for injectable duplicate handling.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 180,
        "name": "RedeclarationHandler",
        "start_line": 177,
        "span_start": 179,
        "bug_name": "Closure_153",
        "type": "interface",
        "end_line": 181
      },
      {
        "javadoc": "/**\n * <p>The syntactic scope creator scans the parse tree to create a Scope object\n * containing all the variable declarations in that scope.</p>\n *\n * <p>This implementation is not thread-safe.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 189,
        "name": "SyntacticScopeCreator",
        "start_line": 32,
        "span_start": 188,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 246
      },
      {
        "javadoc": "/**\n * The default handler for duplicate declarations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 189,
        "name": "DefaultRedeclarationHandler",
        "start_line": 186,
        "span_start": 188,
        "bug_name": "Closure_153",
        "type": "class",
        "end_line": 226
      }
    ]
  },
  "Closure_154": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * <p>Checks the types of JS expressions against any declared type\n * information.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_154/src/com/google/javascript/jscomp/TypeCheck.java",
        "span_end": 191,
        "name": "TypeCheck",
        "start_line": 52,
        "span_start": 185,
        "bug_name": "Closure_154",
        "type": "class",
        "end_line": 1810
      },
      {
        "javadoc": "/**\n * <p>Checks the types of JS expressions against any declared type\n * information.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_154/src/com/google/javascript/jscomp/TypeCheck.java",
        "span_end": 242,
        "name": "TypeCheck",
        "start_line": 52,
        "span_start": 242,
        "bug_name": "Closure_154",
        "type": "class",
        "end_line": 1810
      },
      {
        "javadoc": "/**\n * <p>Checks the types of JS expressions against any declared type\n * information.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_154/src/com/google/javascript/jscomp/TypeCheck.java",
        "span_end": 1058,
        "name": "TypeCheck",
        "start_line": 52,
        "span_start": 1049,
        "bug_name": "Closure_154",
        "type": "class",
        "end_line": 1810
      },
      {
        "javadoc": "/**\n * A central reporter for all type violations: places where the programmer\n * has annotated a variable (or property) with one type, but has assigned\n * another type to it.\n *\n * Also doubles as a central repository for all type violations, so that\n * type-based optimizations (like AmbiguateProperties) can be fault-tolerant.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_154/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 109,
        "name": "TypeValidator",
        "start_line": 58,
        "span_start": 110,
        "bug_name": "Closure_154",
        "type": "class",
        "end_line": 770
      },
      {
        "javadoc": "/**\n * A central reporter for all type violations: places where the programmer\n * has annotated a variable (or property) with one type, but has assigned\n * another type to it.\n *\n * Also doubles as a central repository for all type violations, so that\n * type-based optimizations (like AmbiguateProperties) can be fault-tolerant.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_154/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 117,
        "name": "TypeValidator",
        "start_line": 58,
        "span_start": 117,
        "bug_name": "Closure_154",
        "type": "class",
        "end_line": 770
      },
      {
        "javadoc": "/**\n * A central reporter for all type violations: places where the programmer\n * has annotated a variable (or property) with one type, but has assigned\n * another type to it.\n *\n * Also doubles as a central repository for all type violations, so that\n * type-based optimizations (like AmbiguateProperties) can be fault-tolerant.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_154/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 588,
        "name": "TypeValidator",
        "start_line": 58,
        "span_start": 588,
        "bug_name": "Closure_154",
        "type": "class",
        "end_line": 770
      }
    ]
  },
  "Closure_155": {
    "bug_count": 10,
    "entries": [
      {
        "javadoc": "/**\n * Using the infrastructure provided by VariableReferencePass, identify\n * variables that are used only once and in a way that is safe to move, and then\n * inline them.\n *\n * This pass has two \"modes.\" One mode only inlines variables declared as\n * constants, for legacy compiler clients. The second mode inlines any\n * variable that we can provably inline. Note that the second mode is a\n * superset of the first mode. We only support the first mode for\n * backwards-compatibility with compiler clients that don't want\n * --inline_variables.\n *\n * The approach of this pass is similar to {@link CrossModuleCodeMotion}\n *\n * @author kushal@google.com (Kushal Dave)\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/InlineVariables.java",
        "span_end": 198,
        "name": "InlineVariables",
        "start_line": 55,
        "span_start": 199,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 693
      },
      {
        "javadoc": "/**\n * Builds up information about nodes in each scope. When exiting the\n * scope, inspects all variables in that scope, and inlines any\n * that we can.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/InlineVariables.java",
        "span_end": 198,
        "name": "InliningBehavior",
        "start_line": 143,
        "span_start": 199,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 692
      },
      {
        "javadoc": "/**\n * Using the infrastructure provided by VariableReferencePass, identify\n * variables that are used only once and in a way that is safe to move, and then\n * inline them.\n *\n * This pass has two \"modes.\" One mode only inlines variables declared as\n * constants, for legacy compiler clients. The second mode inlines any\n * variable that we can provably inline. Note that the second mode is a\n * superset of the first mode. We only support the first mode for\n * backwards-compatibility with compiler clients that don't want\n * --inline_variables.\n *\n * The approach of this pass is similar to {@link CrossModuleCodeMotion}\n *\n * @author kushal@google.com (Kushal Dave)\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/InlineVariables.java",
        "span_end": 230,
        "name": "InlineVariables",
        "start_line": 55,
        "span_start": 220,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 693
      },
      {
        "javadoc": "/**\n * Builds up information about nodes in each scope. When exiting the\n * scope, inspects all variables in that scope, and inlines any\n * that we can.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/InlineVariables.java",
        "span_end": 230,
        "name": "InliningBehavior",
        "start_line": 143,
        "span_start": 220,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 692
      },
      {
        "javadoc": "/**\n * Using the infrastructure provided by VariableReferencePass, identify\n * variables that are used only once and in a way that is safe to move, and then\n * inline them.\n *\n * This pass has two \"modes.\" One mode only inlines variables declared as\n * constants, for legacy compiler clients. The second mode inlines any\n * variable that we can provably inline. Note that the second mode is a\n * superset of the first mode. We only support the first mode for\n * backwards-compatibility with compiler clients that don't want\n * --inline_variables.\n *\n * The approach of this pass is similar to {@link CrossModuleCodeMotion}\n *\n * @author kushal@google.com (Kushal Dave)\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/InlineVariables.java",
        "span_end": 275,
        "name": "InlineVariables",
        "start_line": 55,
        "span_start": 275,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 693
      },
      {
        "javadoc": "/**\n * Builds up information about nodes in each scope. When exiting the\n * scope, inspects all variables in that scope, and inlines any\n * that we can.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/InlineVariables.java",
        "span_end": 275,
        "name": "InliningBehavior",
        "start_line": 143,
        "span_start": 275,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 692
      },
      {
        "javadoc": "/**\n * A helper class for passes that want to access all information about where a\n * variable is referenced and declared at once and then make a decision as to\n * how it should be handled, possibly inlining, reordering, or generating\n * warnings. Callers do this by providing {@link Behavior} and then\n * calling {@link #process(Node, Node)}.\n *\n * @author kushal@google.com (Kushal Dave)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "span_end": 123,
        "name": "ReferenceCollectingCallback",
        "start_line": 45,
        "span_start": 123,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 613
      },
      {
        "javadoc": "/**\n * Scope contains information about a variable scope in javascript.\n * Scopes can be nested, a scope points back to its parent scope.\n * A Scope contains information about variables defined in that scope.\n * <p>\n * A Scope is also used as a lattice element for flow-sensitive type inference.\n * As a lattice element, a Scope is viewed as a map from names to types. A name\n * not in the map is considered to have the bottom type. The join of two maps m1\n * and m2 is the map of the union of names with {@link JSType#getLeastSupertype}\n * to meet the m1 type and m2 type.\n *\n * @see NodeTraversal\n * @see DataFlowAnalysis\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/Scope.java",
        "span_end": 62,
        "name": "Scope",
        "start_line": 51,
        "span_start": 63,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 501
      },
      {
        "javadoc": "/**\n * Scope contains information about a variable scope in javascript.\n * Scopes can be nested, a scope points back to its parent scope.\n * A Scope contains information about variables defined in that scope.\n * <p>\n * A Scope is also used as a lattice element for flow-sensitive type inference.\n * As a lattice element, a Scope is viewed as a map from names to types. A name\n * not in the map is considered to have the bottom type. The join of two maps m1\n * and m2 is the map of the union of names with {@link JSType#getLeastSupertype}\n * to meet the m1 type and m2 type.\n *\n * @see NodeTraversal\n * @see DataFlowAnalysis\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/Scope.java",
        "span_end": 293,
        "name": "Scope",
        "start_line": 51,
        "span_start": 290,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 501
      },
      {
        "javadoc": "/**\n * Scope contains information about a variable scope in javascript.\n * Scopes can be nested, a scope points back to its parent scope.\n * A Scope contains information about variables defined in that scope.\n * <p>\n * A Scope is also used as a lattice element for flow-sensitive type inference.\n * As a lattice element, a Scope is viewed as a map from names to types. A name\n * not in the map is considered to have the bottom type. The join of two maps m1\n * and m2 is the map of the union of names with {@link JSType#getLeastSupertype}\n * to meet the m1 type and m2 type.\n *\n * @see NodeTraversal\n * @see DataFlowAnalysis\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_155/src/com/google/javascript/jscomp/Scope.java",
        "span_end": 458,
        "name": "Scope",
        "start_line": 51,
        "span_start": 459,
        "bug_name": "Closure_155",
        "type": "class",
        "end_line": 501
      }
    ]
  },
  "Closure_156": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * Flattens global objects/namespaces by replacing each '.' with '$' in\n * their names. This reduces the number of property lookups the browser has\n * to do and allows the {@link RenameVars} pass to shorten namespaced names.\n * For example, goog.events.handleEvent() -> goog$events$handleEvent() -> Za().\n *\n * <p>If a global object's name is assigned to more than once, or if a property\n * is added to the global object in a complex expression, then none of its\n * properties will be collapsed (for safety/correctness).\n *\n * <p>If, after a global object is declared, it is never referenced except when\n * its properties are read or set, then the object will be removed after its\n * properties have been collapsed.\n *\n * <p>Uninitialized variable stubs are created at a global object's declaration\n * site for any of its properties that are added late in a local scope.\n *\n * <p>If, after an object is declared, it is referenced directly in a way that\n * might create an alias for it, then none of its properties will be collapsed.\n * This behavior is a safeguard to prevent the values associated with the\n * flattened names from getting out of sync with the object's actual property\n * values. For example, in the following case, an alias a$b, if created, could\n * easily keep the value 0 even after a.b became 5:\n * <code> a = {b: 0}; c = a; c.b = 5; </code>.\n *\n * <p>This pass doesn't flatten property accesses of the form: a[b].\n *\n * <p>For lots of examples, see the unit test.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 456,
        "name": "CollapseProperties",
        "start_line": 72,
        "span_start": 455,
        "bug_name": "Closure_156",
        "type": "class",
        "end_line": 900
      },
      {
        "javadoc": "/**\n * Flattens global objects/namespaces by replacing each '.' with '$' in\n * their names. This reduces the number of property lookups the browser has\n * to do and allows the {@link RenameVars} pass to shorten namespaced names.\n * For example, goog.events.handleEvent() -> goog$events$handleEvent() -> Za().\n *\n * <p>If a global object's name is assigned to more than once, or if a property\n * is added to the global object in a complex expression, then none of its\n * properties will be collapsed (for safety/correctness).\n *\n * <p>If, after a global object is declared, it is never referenced except when\n * its properties are read or set, then the object will be removed after its\n * properties have been collapsed.\n *\n * <p>Uninitialized variable stubs are created at a global object's declaration\n * site for any of its properties that are added late in a local scope.\n *\n * <p>If, after an object is declared, it is referenced directly in a way that\n * might create an alias for it, then none of its properties will be collapsed.\n * This behavior is a safeguard to prevent the values associated with the\n * flattened names from getting out of sync with the object's actual property\n * values. For example, in the following case, an alias a$b, if created, could\n * easily keep the value 0 even after a.b became 5:\n * <code> a = {b: 0}; c = a; c.b = 5; </code>.\n *\n * <p>This pass doesn't flatten property accesses of the form: a[b].\n *\n * <p>For lots of examples, see the unit test.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 574,
        "name": "CollapseProperties",
        "start_line": 72,
        "span_start": 574,
        "bug_name": "Closure_156",
        "type": "class",
        "end_line": 900
      },
      {
        "javadoc": "/**\n * Flattens global objects/namespaces by replacing each '.' with '$' in\n * their names. This reduces the number of property lookups the browser has\n * to do and allows the {@link RenameVars} pass to shorten namespaced names.\n * For example, goog.events.handleEvent() -> goog$events$handleEvent() -> Za().\n *\n * <p>If a global object's name is assigned to more than once, or if a property\n * is added to the global object in a complex expression, then none of its\n * properties will be collapsed (for safety/correctness).\n *\n * <p>If, after a global object is declared, it is never referenced except when\n * its properties are read or set, then the object will be removed after its\n * properties have been collapsed.\n *\n * <p>Uninitialized variable stubs are created at a global object's declaration\n * site for any of its properties that are added late in a local scope.\n *\n * <p>If, after an object is declared, it is referenced directly in a way that\n * might create an alias for it, then none of its properties will be collapsed.\n * This behavior is a safeguard to prevent the values associated with the\n * flattened names from getting out of sync with the object's actual property\n * values. For example, in the following case, an alias a$b, if created, could\n * easily keep the value 0 even after a.b became 5:\n * <code> a = {b: 0}; c = a; c.b = 5; </code>.\n *\n * <p>This pass doesn't flatten property accesses of the form: a[b].\n *\n * <p>For lots of examples, see the unit test.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 595,
        "name": "CollapseProperties",
        "start_line": 72,
        "span_start": 589,
        "bug_name": "Closure_156",
        "type": "class",
        "end_line": 900
      },
      {
        "javadoc": "/**\n * Flattens global objects/namespaces by replacing each '.' with '$' in\n * their names. This reduces the number of property lookups the browser has\n * to do and allows the {@link RenameVars} pass to shorten namespaced names.\n * For example, goog.events.handleEvent() -> goog$events$handleEvent() -> Za().\n *\n * <p>If a global object's name is assigned to more than once, or if a property\n * is added to the global object in a complex expression, then none of its\n * properties will be collapsed (for safety/correctness).\n *\n * <p>If, after a global object is declared, it is never referenced except when\n * its properties are read or set, then the object will be removed after its\n * properties have been collapsed.\n *\n * <p>Uninitialized variable stubs are created at a global object's declaration\n * site for any of its properties that are added late in a local scope.\n *\n * <p>If, after an object is declared, it is referenced directly in a way that\n * might create an alias for it, then none of its properties will be collapsed.\n * This behavior is a safeguard to prevent the values associated with the\n * flattened names from getting out of sync with the object's actual property\n * values. For example, in the following case, an alias a$b, if created, could\n * easily keep the value 0 even after a.b became 5:\n * <code> a = {b: 0}; c = a; c.b = 5; </code>.\n *\n * <p>This pass doesn't flatten property accesses of the form: a[b].\n *\n * <p>For lots of examples, see the unit test.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 609,
        "name": "CollapseProperties",
        "start_line": 72,
        "span_start": 609,
        "bug_name": "Closure_156",
        "type": "class",
        "end_line": 900
      },
      {
        "javadoc": "/**\n * Flattens global objects/namespaces by replacing each '.' with '$' in\n * their names. This reduces the number of property lookups the browser has\n * to do and allows the {@link RenameVars} pass to shorten namespaced names.\n * For example, goog.events.handleEvent() -> goog$events$handleEvent() -> Za().\n *\n * <p>If a global object's name is assigned to more than once, or if a property\n * is added to the global object in a complex expression, then none of its\n * properties will be collapsed (for safety/correctness).\n *\n * <p>If, after a global object is declared, it is never referenced except when\n * its properties are read or set, then the object will be removed after its\n * properties have been collapsed.\n *\n * <p>Uninitialized variable stubs are created at a global object's declaration\n * site for any of its properties that are added late in a local scope.\n *\n * <p>If, after an object is declared, it is referenced directly in a way that\n * might create an alias for it, then none of its properties will be collapsed.\n * This behavior is a safeguard to prevent the values associated with the\n * flattened names from getting out of sync with the object's actual property\n * values. For example, in the following case, an alias a$b, if created, could\n * easily keep the value 0 even after a.b became 5:\n * <code> a = {b: 0}; c = a; c.b = 5; </code>.\n *\n * <p>This pass doesn't flatten property accesses of the form: a[b].\n *\n * <p>For lots of examples, see the unit test.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 659,
        "name": "CollapseProperties",
        "start_line": 72,
        "span_start": 653,
        "bug_name": "Closure_156",
        "type": "class",
        "end_line": 900
      },
      {
        "javadoc": "/**\n * Flattens global objects/namespaces by replacing each '.' with '$' in\n * their names. This reduces the number of property lookups the browser has\n * to do and allows the {@link RenameVars} pass to shorten namespaced names.\n * For example, goog.events.handleEvent() -> goog$events$handleEvent() -> Za().\n *\n * <p>If a global object's name is assigned to more than once, or if a property\n * is added to the global object in a complex expression, then none of its\n * properties will be collapsed (for safety/correctness).\n *\n * <p>If, after a global object is declared, it is never referenced except when\n * its properties are read or set, then the object will be removed after its\n * properties have been collapsed.\n *\n * <p>Uninitialized variable stubs are created at a global object's declaration\n * site for any of its properties that are added late in a local scope.\n *\n * <p>If, after an object is declared, it is referenced directly in a way that\n * might create an alias for it, then none of its properties will be collapsed.\n * This behavior is a safeguard to prevent the values associated with the\n * flattened names from getting out of sync with the object's actual property\n * values. For example, in the following case, an alias a$b, if created, could\n * easily keep the value 0 even after a.b became 5:\n * <code> a = {b: 0}; c = a; c.b = 5; </code>.\n *\n * <p>This pass doesn't flatten property accesses of the form: a[b].\n *\n * <p>For lots of examples, see the unit test.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 699,
        "name": "CollapseProperties",
        "start_line": 72,
        "span_start": 699,
        "bug_name": "Closure_156",
        "type": "class",
        "end_line": 900
      },
      {
        "javadoc": "/**\n * Flattens global objects/namespaces by replacing each '.' with '$' in\n * their names. This reduces the number of property lookups the browser has\n * to do and allows the {@link RenameVars} pass to shorten namespaced names.\n * For example, goog.events.handleEvent() -> goog$events$handleEvent() -> Za().\n *\n * <p>If a global object's name is assigned to more than once, or if a property\n * is added to the global object in a complex expression, then none of its\n * properties will be collapsed (for safety/correctness).\n *\n * <p>If, after a global object is declared, it is never referenced except when\n * its properties are read or set, then the object will be removed after its\n * properties have been collapsed.\n *\n * <p>Uninitialized variable stubs are created at a global object's declaration\n * site for any of its properties that are added late in a local scope.\n *\n * <p>If, after an object is declared, it is referenced directly in a way that\n * might create an alias for it, then none of its properties will be collapsed.\n * This behavior is a safeguard to prevent the values associated with the\n * flattened names from getting out of sync with the object's actual property\n * values. For example, in the following case, an alias a$b, if created, could\n * easily keep the value 0 even after a.b became 5:\n * <code> a = {b: 0}; c = a; c.b = 5; </code>.\n *\n * <p>This pass doesn't flatten property accesses of the form: a[b].\n *\n * <p>For lots of examples, see the unit test.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 742,
        "name": "CollapseProperties",
        "start_line": 72,
        "span_start": 742,
        "bug_name": "Closure_156",
        "type": "class",
        "end_line": 900
      }
    ]
  },
  "Closure_157": {
    "bug_count": 10,
    "entries": [
      {
        "javadoc": "/**\n * CodeGenerator generates codes from a parse tree, sending it to the specified\n * CodeConsumer.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 350,
        "name": "CodeGenerator",
        "start_line": 35,
        "span_start": 343,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 1165
      },
      {
        "javadoc": "/**\n * CodeGenerator generates codes from a parse tree, sending it to the specified\n * CodeConsumer.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 666,
        "name": "CodeGenerator",
        "start_line": 35,
        "span_start": 654,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 1165
      },
      {
        "javadoc": "/**\n * CodeGenerator generates codes from a parse tree, sending it to the specified\n * CodeConsumer.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 724,
        "name": "CodeGenerator",
        "start_line": 35,
        "span_start": 724,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 1165
      },
      {
        "javadoc": "/**\n * IRFactory transforms the new AST to the old AST.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 257,
        "name": "IRFactory",
        "start_line": 79,
        "span_start": 255,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 1343
      },
      {
        "javadoc": "/**\n * IRFactory transforms the new AST to the old AST.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 354,
        "name": "IRFactory",
        "start_line": 79,
        "span_start": 347,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 1343
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 354,
        "name": "TransformDispatcher",
        "start_line": 324,
        "span_start": 347,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 1000
      },
      {
        "javadoc": "/**\n * RenamePrototypes renames custom properties (including methods) of custom\n * prototypes and object literals. Externed property names are never renamed.\n *\n * To ensure that a prototype property or object literal property gets renamed,\n * end it with an underscore.\n *\n * To ensure that a prototype property is not renamed, give it a leading\n * underscore.\n *\n * For custom prototype property names that lack leading and trailing\n * underscores:\n * - To always rename these, use aggressive renaming.\n * - If aggresive renaming is off, we use a heuristic to decide whether to\n *   rename (to avoid most built-in js methods). We rename if the original name\n *   contains at least one character that is not a lowercase letter.\n *\n * When a property name is used both in a prototype definition and as an object\n * literal key, we rename it only if it satisifies both renaming policies.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/RenamePrototypes.java",
        "span_end": 336,
        "name": "RenamePrototypes",
        "start_line": 59,
        "span_start": 336,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 451
      },
      {
        "javadoc": "/**\n * Iterate through the nodes, collect all of the STRING nodes that are\n * children of GETPROP, GETELEM, or OBJLIT, and also count the number of\n * times each STRING is referenced.\n *\n * Also collects OBJLIT assignments of prototypes as candidates for renaming.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/RenamePrototypes.java",
        "span_end": 336,
        "name": "ProcessProperties",
        "start_line": 311,
        "span_start": 336,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 435
      },
      {
        "javadoc": "/**\n * RenamePrototypes renames custom properties (including methods) of custom\n * prototypes and object literals. Externed property names are never renamed.\n *\n * To ensure that a prototype property or object literal property gets renamed,\n * end it with an underscore.\n *\n * To ensure that a prototype property is not renamed, give it a leading\n * underscore.\n *\n * For custom prototype property names that lack leading and trailing\n * underscores:\n * - To always rename these, use aggressive renaming.\n * - If aggresive renaming is off, we use a heuristic to decide whether to\n *   rename (to avoid most built-in js methods). We rename if the original name\n *   contains at least one character that is not a lowercase letter.\n *\n * When a property name is used both in a prototype definition and as an object\n * literal key, we rename it only if it satisifies both renaming policies.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/RenamePrototypes.java",
        "span_end": 377,
        "name": "RenamePrototypes",
        "start_line": 59,
        "span_start": 377,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 451
      },
      {
        "javadoc": "/**\n * Iterate through the nodes, collect all of the STRING nodes that are\n * children of GETPROP, GETELEM, or OBJLIT, and also count the number of\n * times each STRING is referenced.\n *\n * Also collects OBJLIT assignments of prototypes as candidates for renaming.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_157/src/com/google/javascript/jscomp/RenamePrototypes.java",
        "span_end": 377,
        "name": "ProcessProperties",
        "start_line": 311,
        "span_start": 377,
        "bug_name": "Closure_157",
        "type": "class",
        "end_line": 435
      }
    ]
  },
  "Closure_158": {
    "bug_count": 14,
    "entries": [
      {
        "javadoc": "/**\n * Implementations of AbstractCommandLineRunner translate flags into Java\n * API calls on the Compiler. AbstractCompiler contains common flags and logic\n * to make that happen.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. Example:\n *\n * <pre>\n * class MyCommandLineRunner extends\n *     AbstractCommandLineRunner<MyCompiler, MyOptions> {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   &#064;Override\n *   protected MyOptions createOptions() {\n *     MyOptions options = new MyOptions();\n *     CompilerFlagTranslator.setOptionsFromFlags(options);\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   &#064;Override\n *   protected MyCompiler createCompiler() {\n *     return new MyCompiler();\n *   }\n *\n *   public static void main(String[] args) {\n *     (new MyCommandLineRunner(args)).run();\n *   }\n * }\n * </pre>\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 202,
        "name": "AbstractCommandLineRunner",
        "start_line": 86,
        "span_start": 197,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 1633
      },
      {
        "javadoc": "/**\n * Implementations of AbstractCommandLineRunner translate flags into Java\n * API calls on the Compiler. AbstractCompiler contains common flags and logic\n * to make that happen.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. Example:\n *\n * <pre>\n * class MyCommandLineRunner extends\n *     AbstractCommandLineRunner<MyCompiler, MyOptions> {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   &#064;Override\n *   protected MyOptions createOptions() {\n *     MyOptions options = new MyOptions();\n *     CompilerFlagTranslator.setOptionsFromFlags(options);\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   &#064;Override\n *   protected MyCompiler createCompiler() {\n *     return new MyCompiler();\n *   }\n *\n *   public static void main(String[] args) {\n *     (new MyCommandLineRunner(args)).run();\n *   }\n * }\n * </pre>\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 1516,
        "name": "AbstractCommandLineRunner",
        "start_line": 86,
        "span_start": 1497,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 1633
      },
      {
        "javadoc": "/**\n * Configurations for the command line configs. Designed for easy\n * building, so that we can decouple the flags-parsing library from\n * the actual configuration options.\n *\n * By design, these configurations must match one-to-one with\n * command-line flags.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 1516,
        "name": "CommandLineConfig",
        "start_line": 1235,
        "span_start": 1497,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 1622
      },
      {
        "javadoc": "/**\n * Implementations of AbstractCommandLineRunner translate flags into Java\n * API calls on the Compiler. AbstractCompiler contains common flags and logic\n * to make that happen.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. Example:\n *\n * <pre>\n * class MyCommandLineRunner extends\n *     AbstractCommandLineRunner<MyCompiler, MyOptions> {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   &#064;Override\n *   protected MyOptions createOptions() {\n *     MyOptions options = new MyOptions();\n *     CompilerFlagTranslator.setOptionsFromFlags(options);\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   &#064;Override\n *   protected MyCompiler createCompiler() {\n *     return new MyCompiler();\n *   }\n *\n *   public static void main(String[] args) {\n *     (new MyCommandLineRunner(args)).run();\n *   }\n * }\n * </pre>\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 1630,
        "name": "AbstractCommandLineRunner",
        "start_line": 86,
        "span_start": 1628,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 1633
      },
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class\n * directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n *\n * This class is totally not thread-safe.\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 93,
        "name": "CommandLineRunner",
        "start_line": 89,
        "span_start": 94,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 709
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 93,
        "name": "Flags",
        "start_line": 92,
        "span_start": 94,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 396
      },
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class\n * directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n *\n * This class is totally not thread-safe.\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 240,
        "name": "CommandLineRunner",
        "start_line": 89,
        "span_start": 231,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 709
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 240,
        "name": "Flags",
        "start_line": 92,
        "span_start": 231,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 396
      },
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class\n * directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n *\n * This class is totally not thread-safe.\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 395,
        "name": "CommandLineRunner",
        "start_line": 89,
        "span_start": 389,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 709
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 395,
        "name": "Flags",
        "start_line": 92,
        "span_start": 389,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 396
      },
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class\n * directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n *\n * This class is totally not thread-safe.\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 484,
        "name": "CommandLineRunner",
        "start_line": 89,
        "span_start": 485,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 709
      },
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class\n * directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n *\n * This class is totally not thread-safe.\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 499,
        "name": "CommandLineRunner",
        "start_line": 89,
        "span_start": 500,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 709
      },
      {
        "javadoc": "/**\n * CommandLineRunner translates flags into Java API calls on the Compiler.\n *\n * This class may be extended and used to create other Java classes\n * that behave the same as running the Compiler from the command line. If you\n * want to run the compiler in-process in Java, you should look at this class\n * for hints on what API calls to make, but you should not use this class\n * directly.\n *\n * Example:\n * <pre>\n * class MyCommandLineRunner extends CommandLineRunner {\n *   MyCommandLineRunner(String[] args) {\n *     super(args);\n *   }\n *\n *   {@code @Override} protected CompilerOptions createOptions() {\n *     CompilerOptions options = super.createOptions();\n *     addMyCrazyCompilerPassThatOutputsAnExtraFile(options);\n *     return options;\n *   }\n *\n *   public static void main(String[] args) {\n *     MyCommandLineRunner runner = new MyCommandLineRunner(args);\n *     if (runner.shouldRunCompiler()) {\n *       runner.run();\n *     } else {\n *       System.exit(-1);\n *     }\n *   }\n * }\n * </pre>\n *\n * This class is totally not thread-safe.\n *\n * @author bolinfest@google.com (Michael Bolin)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 554,
        "name": "CommandLineRunner",
        "start_line": 89,
        "span_start": 552,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 709
      },
      {
        "javadoc": "/**\n * Named groups of DiagnosticTypes exposed by Compiler.\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_158/src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "span_end": 190,
        "name": "DiagnosticGroups",
        "start_line": 29,
        "span_start": 185,
        "bug_name": "Closure_158",
        "type": "class",
        "end_line": 193
      }
    ]
  },
  "Closure_160": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Compiler (and the other classes in this package) does the following:\n * <ul>\n * <li>parses JS code\n * <li>checks for undefined variables\n * <li>performs optimizations such as constant folding and constants inlining\n * <li>renames variables (to short names)\n * <li>outputs compact javascript code\n * </ul>\n *\n * External variables are declared in 'externs' files. For instance, the file\n * may include definitions for global javascript/browser objects such as\n * window, document.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_160/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 267,
        "name": "Compiler",
        "start_line": 68,
        "span_start": 268,
        "bug_name": "Closure_160",
        "type": "class",
        "end_line": 2009
      },
      {
        "javadoc": "/**\n * Compiler (and the other classes in this package) does the following:\n * <ul>\n * <li>parses JS code\n * <li>checks for undefined variables\n * <li>performs optimizations such as constant folding and constants inlining\n * <li>renames variables (to short names)\n * <li>outputs compact javascript code\n * </ul>\n *\n * External variables are declared in 'externs' files. For instance, the file\n * may include definitions for global javascript/browser objects such as\n * window, document.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_160/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 281,
        "name": "Compiler",
        "start_line": 68,
        "span_start": 275,
        "bug_name": "Closure_160",
        "type": "class",
        "end_line": 2009
      }
    ]
  },
  "Closure_162": {
    "bug_count": 11,
    "entries": [
      {
        "javadoc": "/**\n * Scope contains information about a variable scope in javascript.\n * Scopes can be nested, a scope points back to its parent scope.\n * A Scope contains information about variables defined in that scope.\n * <p>\n * A Scope is also used as a lattice element for flow-sensitive type inference.\n * As a lattice element, a Scope is viewed as a map from names to types. A name\n * not in the map is considered to have the bottom type. The join of two maps m1\n * and m2 is the map of the union of names with {@link JSType#getLeastSupertype}\n * to meet the m1 type and m2 type.\n *\n * @see NodeTraversal\n * @see DataFlowAnalysis\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/Scope.java",
        "span_end": 567,
        "name": "Scope",
        "start_line": 57,
        "span_start": 568,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 612
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 225,
        "name": "ScopedAliases",
        "start_line": 51,
        "span_start": 226,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 391
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 225,
        "name": "Traversal",
        "start_line": 182,
        "span_start": 226,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 390
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 272,
        "name": "ScopedAliases",
        "start_line": 51,
        "span_start": 271,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 391
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 272,
        "name": "Traversal",
        "start_line": 182,
        "span_start": 271,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 390
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 328,
        "name": "ScopedAliases",
        "start_line": 51,
        "span_start": 303,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 391
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 328,
        "name": "Traversal",
        "start_line": 182,
        "span_start": 303,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 390
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 346,
        "name": "ScopedAliases",
        "start_line": 51,
        "span_start": 342,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 391
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 346,
        "name": "Traversal",
        "start_line": 182,
        "span_start": 342,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 390
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 355,
        "name": "ScopedAliases",
        "start_line": 51,
        "span_start": 355,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 391
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 355,
        "name": "Traversal",
        "start_line": 182,
        "span_start": 355,
        "bug_name": "Closure_162",
        "type": "class",
        "end_line": 390
      }
    ]
  },
  "Closure_163": {
    "bug_count": 35,
    "entries": [
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 446,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 441,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 446,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 441,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 497,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 498,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "javadoc": "/**\n * The declaration of an abstract symbol.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 497,
        "name": "Symbol",
        "start_line": 489,
        "span_start": 498,
        "bug_name": "Closure_163",
        "type": "interface",
        "end_line": 503
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 526,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 515,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "javadoc": "/**\n * A function initialized as a VAR statement or a function declaration.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 526,
        "name": "GlobalFunction",
        "start_line": 513,
        "span_start": 515,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 552
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 586,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 575,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "javadoc": "/**\n * Properties created via EXPR assignment:\n *\n * <pre>function Foo() { ... };\n * Foo.prototype.bar = function() { ... };</pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 586,
        "name": "AssignmentProperty",
        "start_line": 573,
        "span_start": 575,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 609
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 634,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 622,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "javadoc": "/**\n * Properties created via object literals:\n *\n * <pre>function Foo() { ... };\n * Foo.prototype = {bar: function() { ... };</pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 634,
        "name": "LiteralProperty",
        "start_line": 617,
        "span_start": 622,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 653
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 667,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 664,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "javadoc": "/**\n * The context of the current name. This includes the NameInfo and the scope\n * if it is a scope defining name (function).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 667,
        "name": "NameContext",
        "start_line": 659,
        "span_start": 664,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 669
      },
      {
        "javadoc": "/**\n * Move prototype methods into later modules.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "span_end": 140,
        "name": "CrossModuleMethodMotion",
        "start_line": 34,
        "span_start": 141,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 221
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 230,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 201,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 230,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 201,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 256,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 240,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 256,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 240,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 278,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 277,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 278,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 277,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 305,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 303,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 305,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 303,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 328,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 329,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 328,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 329,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 353,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 337,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 353,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 337,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 373,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 362,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 373,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 362,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 382,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 381,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 382,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 381,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 391,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 391,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 391,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 391,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 412,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 411,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 412,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 411,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      },
      {
        "javadoc": "/**\n * Analyzes properties on prototypes.\n *\n * Uses a reference graph to analyze prototype properties. Each unique property\n * name is represented by a node in this graph. An edge from property A to\n * property B means that there's a GETPROP access of a property B on some\n * object inside of a method named A.\n *\n * Global functions are also represented by nodes in this graph, with\n * similar semantics.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 427,
        "name": "AnalyzePrototypeProperties",
        "start_line": 52,
        "span_start": 426,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 755
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 427,
        "name": "ProcessProperties",
        "start_line": 189,
        "span_start": 426,
        "bug_name": "Closure_163",
        "type": "class",
        "end_line": 453
      }
    ]
  },
  "Closure_164": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * The arrow type is an internal type that models the functional arrow type\n * seen in typical functional programming languages.  It is used soley for\n * separating the management of the arrow type from the complex\n * {@link FunctionType} that models JavaScript's notion of functions.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_164/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 134,
        "name": "ArrowType",
        "start_line": 53,
        "span_start": 128,
        "bug_name": "Closure_164",
        "type": "class",
        "end_line": 274
      },
      {
        "javadoc": "/**\n * The arrow type is an internal type that models the functional arrow type\n * seen in typical functional programming languages.  It is used soley for\n * separating the management of the arrow type from the complex\n * {@link FunctionType} that models JavaScript's notion of functions.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_164/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 151,
        "name": "ArrowType",
        "start_line": 53,
        "span_start": 152,
        "bug_name": "Closure_164",
        "type": "class",
        "end_line": 274
      }
    ]
  },
  "Closure_165": {
    "bug_count": 10,
    "entries": [
      {
        "javadoc": "/**\n * The type registry is used to resolve named types.\n *\n * <p>This class is not thread-safe.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "span_end": 697,
        "name": "JSTypeRegistry",
        "start_line": 76,
        "span_start": 698,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 1686
      },
      {
        "javadoc": "/**\n * Object type.\n *\n * In JavaScript, all object types have properties, and each of those\n * properties has a type. Property types may be DECLARED, INFERRED, or\n * UNKNOWN.\n *\n * DECLARED properties have an explicit type annotation, as in:\n * <code>\n * /xx @type {number} x/\n * Foo.prototype.bar = 1;\n * </code>\n * This property may only hold number values, and an assignment to any\n * other type of value is an error.\n *\n * INFERRED properties do not have an explicit type annotation. Rather,\n * we try to find all the possible types that this property can hold.\n * <code>\n * Foo.prototype.bar = 1;\n * </code>\n * If the programmer assigns other types of values to this property,\n * the property will take on the union of all these types.\n *\n * UNKNOWN properties are properties on the UNKNOWN type. The UNKNOWN\n * type has all properties, but we do not know whether they are\n * declared or inferred.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/ObjectType.java",
        "span_end": 289,
        "name": "ObjectType",
        "start_line": 83,
        "span_start": 290,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 671
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 69,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 68,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 289
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 85,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 83,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 289
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 94,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 93,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 289
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 101,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 102,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 289
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 151,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 152,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 289
      },
      {
        "javadoc": "/**\n * A builder for record types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "span_end": 53,
        "name": "RecordTypeBuilder",
        "start_line": 52,
        "span_start": 54,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 112
      },
      {
        "javadoc": "/**\n * A builder for record types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "span_end": 61,
        "name": "RecordTypeBuilder",
        "start_line": 52,
        "span_start": 62,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 112
      },
      {
        "javadoc": "/**\n * A builder for record types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_165/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "span_end": 92,
        "name": "RecordTypeBuilder",
        "start_line": 52,
        "span_start": 92,
        "bug_name": "Closure_165",
        "type": "class",
        "end_line": 112
      }
    ]
  },
  "Closure_167": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * A reverse abstract interpreter using the semantics of the JavaScript\n * language as a means to reverse interpret computations. This interpreter\n * expects the parse tree inputs to be typed.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 302,
        "name": "SemanticReverseAbstractInterpreter",
        "start_line": 41,
        "span_start": 301,
        "bug_name": "Closure_167",
        "type": "class",
        "end_line": 604
      },
      {
        "javadoc": "/**\n * A reverse abstract interpreter using the semantics of the JavaScript\n * language as a means to reverse interpret computations. This interpreter\n * expects the parse tree inputs to be typed.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 349,
        "name": "SemanticReverseAbstractInterpreter",
        "start_line": 41,
        "span_start": 348,
        "bug_name": "Closure_167",
        "type": "class",
        "end_line": 604
      },
      {
        "javadoc": "/**\n * A reverse abstract interpreter using the semantics of the JavaScript\n * language as a means to reverse interpret computations. This interpreter\n * expects the parse tree inputs to be typed.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 394,
        "name": "SemanticReverseAbstractInterpreter",
        "start_line": 41,
        "span_start": 394,
        "bug_name": "Closure_167",
        "type": "class",
        "end_line": 604
      },
      {
        "javadoc": "/**\n * A reverse abstract interpreter using the semantics of the JavaScript\n * language as a means to reverse interpret computations. This interpreter\n * expects the parse tree inputs to be typed.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 412,
        "name": "SemanticReverseAbstractInterpreter",
        "start_line": 41,
        "span_start": 407,
        "bug_name": "Closure_167",
        "type": "class",
        "end_line": 604
      },
      {
        "javadoc": "/**\n * A reverse abstract interpreter using the semantics of the JavaScript\n * language as a means to reverse interpret computations. This interpreter\n * expects the parse tree inputs to be typed.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 434,
        "name": "SemanticReverseAbstractInterpreter",
        "start_line": 41,
        "span_start": 430,
        "bug_name": "Closure_167",
        "type": "class",
        "end_line": 604
      },
      {
        "javadoc": "/**\n * Represents JavaScript value types.<p>\n *\n * Types are split into two separate families: value types and object types.\n *\n * A special {@link UnknownType} exists to represent a wildcard type on which\n * no information can be gathered. In particular, it can assign to everyone,\n * is a subtype of everyone (and everyone is a subtype of it).<p>\n *\n * If you remove the {@link UnknownType}, the set of types in the type system\n * forms a lattice with the {@link #isSubtype} relation defining the partial\n * order of types. All types are united at the top of the lattice by the\n * {@link AllType} and at the bottom by the {@link NoType}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_167/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 882,
        "name": "JSType",
        "start_line": 67,
        "span_start": 883,
        "bug_name": "Closure_167",
        "type": "class",
        "end_line": 1245
      }
    ]
  },
  "Closure_169": {
    "bug_count": 21,
    "entries": [
      {
        "javadoc": "/**\n * Represents JavaScript value types.<p>\n *\n * Types are split into two separate families: value types and object types.\n *\n * A special {@link UnknownType} exists to represent a wildcard type on which\n * no information can be gathered. In particular, it can assign to everyone,\n * is a subtype of everyone (and everyone is a subtype of it).<p>\n *\n * If you remove the {@link UnknownType}, the set of types in the type system\n * forms a lattice with the {@link #isSubtype} relation defining the partial\n * order of types. All types are united at the top of the lattice by the\n * {@link AllType} and at the bottom by the {@link NoType}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 555,
        "name": "JSType",
        "start_line": 67,
        "span_start": 545,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1368
      },
      {
        "javadoc": "/**\n * Represents JavaScript value types.<p>\n *\n * Types are split into two separate families: value types and object types.\n *\n * A special {@link UnknownType} exists to represent a wildcard type on which\n * no information can be gathered. In particular, it can assign to everyone,\n * is a subtype of everyone (and everyone is a subtype of it).<p>\n *\n * If you remove the {@link UnknownType}, the set of types in the type system\n * forms a lattice with the {@link #isSubtype} relation defining the partial\n * order of types. All types are united at the top of the lattice by the\n * {@link AllType} and at the bottom by the {@link NoType}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 572,
        "name": "JSType",
        "start_line": 67,
        "span_start": 565,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1368
      },
      {
        "javadoc": "/**\n * Represents JavaScript value types.<p>\n *\n * Types are split into two separate families: value types and object types.\n *\n * A special {@link UnknownType} exists to represent a wildcard type on which\n * no information can be gathered. In particular, it can assign to everyone,\n * is a subtype of everyone (and everyone is a subtype of it).<p>\n *\n * If you remove the {@link UnknownType}, the set of types in the type system\n * forms a lattice with the {@link #isSubtype} relation defining the partial\n * order of types. All types are united at the top of the lattice by the\n * {@link AllType} and at the bottom by the {@link NoType}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 580,
        "name": "JSType",
        "start_line": 67,
        "span_start": 580,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1368
      },
      {
        "javadoc": "/**\n * Represents JavaScript value types.<p>\n *\n * Types are split into two separate families: value types and object types.\n *\n * A special {@link UnknownType} exists to represent a wildcard type on which\n * no information can be gathered. In particular, it can assign to everyone,\n * is a subtype of everyone (and everyone is a subtype of it).<p>\n *\n * If you remove the {@link UnknownType}, the set of types in the type system\n * forms a lattice with the {@link #isSubtype} relation defining the partial\n * order of types. All types are united at the top of the lattice by the\n * {@link AllType} and at the bottom by the {@link NoType}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 598,
        "name": "JSType",
        "start_line": 67,
        "span_start": 592,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1368
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 118,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 118,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 299
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 126,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 126,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 299
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 205,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 204,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 299
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 268,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 268,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 299
      },
      {
        "javadoc": "/**\n * A record (structural) type.\n *\n * Subtyping: The subtyping of a record type is defined via structural\n * comparison of a record type's properties. For example, a record\n * type of the form { a : TYPE_1 } is a supertype of a record type\n * of the form { b : TYPE_2, a : TYPE_1 } because B can be assigned to\n * A and matches all constraints. Similarly, a defined type can be assigned\n * to a record type so long as that defined type matches all property\n * constraints of the record type. A record type of the form { a : A, b : B }\n * can be assigned to a record of type { a : A }.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 280,
        "name": "RecordType",
        "start_line": 64,
        "span_start": 280,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 299
      },
      {
        "javadoc": "/**\n * The arrow type is an internal type that models the functional arrow type\n * seen in typical functional programming languages.  It is used solely for\n * separating the management of the arrow type from the complex\n * {@link FunctionType} that models JavaScript's notion of functions.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 177,
        "name": "ArrowType",
        "start_line": 53,
        "span_start": 177,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 307
      },
      {
        "javadoc": "/**\n * The arrow type is an internal type that models the functional arrow type\n * seen in typical functional programming languages.  It is used solely for\n * separating the management of the arrow type from the complex\n * {@link FunctionType} that models JavaScript's notion of functions.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 187,
        "name": "ArrowType",
        "start_line": 53,
        "span_start": 187,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 307
      },
      {
        "javadoc": "/**\n * The arrow type is an internal type that models the functional arrow type\n * seen in typical functional programming languages.  It is used solely for\n * separating the management of the arrow type from the complex\n * {@link FunctionType} that models JavaScript's notion of functions.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 209,
        "name": "ArrowType",
        "start_line": 53,
        "span_start": 204,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 307
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 792,
        "name": "FunctionType",
        "start_line": 66,
        "span_start": 792,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1274
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 890,
        "name": "FunctionType",
        "start_line": 66,
        "span_start": 890,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1274
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 909,
        "name": "FunctionType",
        "start_line": 66,
        "span_start": 908,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1274
      },
      {
        "javadoc": "/**\n * This derived type provides extended information about a function, including\n * its return type and argument types.<p>\n *\n * Note: the parameters list is the LP node that is the parent of the\n * actual NAME node containing the parsed argument list (annotated with\n * JSDOC_TYPE_PROP's for the compile-time type of each argument.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 918,
        "name": "FunctionType",
        "start_line": 66,
        "span_start": 918,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1274
      },
      {
        "javadoc": "/**\n * Represents JavaScript value types.<p>\n *\n * Types are split into two separate families: value types and object types.\n *\n * A special {@link UnknownType} exists to represent a wildcard type on which\n * no information can be gathered. In particular, it can assign to everyone,\n * is a subtype of everyone (and everyone is a subtype of it).<p>\n *\n * If you remove the {@link UnknownType}, the set of types in the type system\n * forms a lattice with the {@link #isSubtype} relation defining the partial\n * order of types. All types are united at the top of the lattice by the\n * {@link AllType} and at the bottom by the {@link NoType}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 492,
        "name": "JSType",
        "start_line": 67,
        "span_start": 492,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1368
      },
      {
        "javadoc": "/**\n * Represents JavaScript value types.<p>\n *\n * Types are split into two separate families: value types and object types.\n *\n * A special {@link UnknownType} exists to represent a wildcard type on which\n * no information can be gathered. In particular, it can assign to everyone,\n * is a subtype of everyone (and everyone is a subtype of it).<p>\n *\n * If you remove the {@link UnknownType}, the set of types in the type system\n * forms a lattice with the {@link #isSubtype} relation defining the partial\n * order of types. All types are united at the top of the lattice by the\n * {@link AllType} and at the bottom by the {@link NoType}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 500,
        "name": "JSType",
        "start_line": 67,
        "span_start": 500,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1368
      },
      {
        "javadoc": "/**\n * Represents JavaScript value types.<p>\n *\n * Types are split into two separate families: value types and object types.\n *\n * A special {@link UnknownType} exists to represent a wildcard type on which\n * no information can be gathered. In particular, it can assign to everyone,\n * is a subtype of everyone (and everyone is a subtype of it).<p>\n *\n * If you remove the {@link UnknownType}, the set of types in the type system\n * forms a lattice with the {@link #isSubtype} relation defining the partial\n * order of types. All types are united at the top of the lattice by the\n * {@link AllType} and at the bottom by the {@link NoType}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 520,
        "name": "JSType",
        "start_line": 67,
        "span_start": 514,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1368
      },
      {
        "javadoc": "/**\n * The {@code UnionType} implements a common JavaScript idiom in which the\n * code is specifically designed to work with multiple input types.  Because\n * JavaScript always knows the run-time type of an object value, this is safer\n * than a C union.<p>\n *\n * For instance, values of the union type {@code (String,boolean)} can be of\n * type {@code String} or of type {@code boolean}. The commutativity of the\n * statement is captured by making {@code (String,boolean)} and\n * {@code (boolean,String)} equal.<p>\n *\n * The implementation of this class prevents the creation of nested\n * unions.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/UnionType.java",
        "span_end": 349,
        "name": "UnionType",
        "start_line": 70,
        "span_start": 334,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 629
      },
      {
        "javadoc": "/**\n * Represents JavaScript value types.<p>\n *\n * Types are split into two separate families: value types and object types.\n *\n * A special {@link UnknownType} exists to represent a wildcard type on which\n * no information can be gathered. In particular, it can assign to everyone,\n * is a subtype of everyone (and everyone is a subtype of it).<p>\n *\n * If you remove the {@link UnknownType}, the set of types in the type system\n * forms a lattice with the {@link #isSubtype} relation defining the partial\n * order of types. All types are united at the top of the lattice by the\n * {@link AllType} and at the bottom by the {@link NoType}.<p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 530,
        "name": "JSType",
        "start_line": 67,
        "span_start": 528,
        "bug_name": "Closure_169",
        "type": "class",
        "end_line": 1368
      }
    ]
  },
  "Closure_171": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Type inference within a script node or a function body, using the data-flow\n * analysis framework.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_171/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 736,
        "name": "TypeInference",
        "start_line": 65,
        "span_start": 731,
        "bug_name": "Closure_171",
        "type": "class",
        "end_line": 1584
      },
      {
        "javadoc": "/**\n * Creates the symbol table of variables available in the current scope and\n * their types.\n *\n * Scopes created by this class are very different from scopes created\n * by the syntactic scope creator. These scopes have type information, and\n * include some qualified names in addition to variables\n * (like Class.staticMethod).\n *\n * When building scope information, also declares relevant information\n * about types in the type registry.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_171/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 1668,
        "name": "TypedScopeCreator",
        "start_line": 100,
        "span_start": 1669,
        "bug_name": "Closure_171",
        "type": "class",
        "end_line": 2161
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_171/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 1668,
        "name": "AbstractScopeBuilder",
        "start_line": 410,
        "span_start": 1669,
        "bug_name": "Closure_171",
        "type": "class",
        "end_line": 1843
      }
    ]
  },
  "Closure_173": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * CodeGenerator generates codes from a parse tree, sending it to the specified\n * CodeConsumer.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_173/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 135,
        "name": "CodeGenerator",
        "start_line": 37,
        "span_start": 130,
        "bug_name": "Closure_173",
        "type": "class",
        "end_line": 1303
      },
      {
        "javadoc": "/**\n * A peephole optimization that minimizes code by simplifying conditional\n * expressions, replacing IFs with HOOKs, replacing object constructors\n * with literals, and simplifying returns.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_173/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "span_end": 107,
        "name": "PeepholeSubstituteAlternateSyntax",
        "start_line": 35,
        "span_start": 102,
        "bug_name": "Closure_173",
        "type": "class",
        "end_line": 643
      }
    ]
  },
  "Closure_174": {
    "bug_count": 11,
    "entries": [
      {
        "javadoc": "/**\n * Generates an AST for a JavaScript source file.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/JsAst.java",
        "span_end": 81,
        "name": "JsAst",
        "start_line": 32,
        "span_start": 82,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 109
      },
      {
        "javadoc": "/**\n * Generates an AST for a JavaScript source file.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/JsAst.java",
        "span_end": 98,
        "name": "JsAst",
        "start_line": 32,
        "span_start": 95,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 109
      },
      {
        "javadoc": "/**\n * NodeUtil contains generally useful AST utilities.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 2368,
        "name": "NodeUtil",
        "start_line": 49,
        "span_start": 2367,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 3378
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 357,
        "name": "ScopedAliases",
        "start_line": 72,
        "span_start": 356,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 562
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 357,
        "name": "Traversal",
        "start_line": 241,
        "span_start": 356,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 561
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 366,
        "name": "ScopedAliases",
        "start_line": 72,
        "span_start": 365,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 562
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 366,
        "name": "Traversal",
        "start_line": 241,
        "span_start": 365,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 561
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 376,
        "name": "ScopedAliases",
        "start_line": 72,
        "span_start": 377,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 562
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 376,
        "name": "Traversal",
        "start_line": 241,
        "span_start": 377,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 561
      },
      {
        "javadoc": "/**\n * Process aliases in goog.scope blocks.\n *\n * goog.scope(function() {\n *   var dom = goog.dom;\n *   var DIV = dom.TagName.DIV;\n *\n *   dom.createElement(DIV);\n * });\n *\n * should become\n *\n * goog.dom.createElement(goog.dom.TagName.DIV);\n *\n * The advantage of using goog.scope is that the compiler will *guarantee*\n * the anonymous function will be inlined, even if it can't prove\n * that it's semantically correct to do so. For example, consider this case:\n *\n * goog.scope(function() {\n *   goog.getBar = function () { return alias; };\n *   ...\n *   var alias = foo.bar;\n * })\n *\n * In theory, the compiler can't inline 'alias' unless it can prove that\n * goog.getBar is called only after 'alias' is defined.\n *\n * In practice, the compiler will inline 'alias' anyway, at the risk of\n * 'fixing' bad code.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 385,
        "name": "ScopedAliases",
        "start_line": 72,
        "span_start": 386,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 562
      },
      {
        "file": "/Users/danielding/WORK_DIR/Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 385,
        "name": "Traversal",
        "start_line": 241,
        "span_start": 386,
        "bug_name": "Closure_174",
        "type": "class",
        "end_line": 561
      }
    ]
  },
  "Closure_175": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * A set of utility functions that replaces CALL with a specified\n * FUNCTION body, replacing and aliasing function parameters as\n * necessary.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_175/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 45,
        "name": "FunctionInjector",
        "start_line": 38,
        "span_start": 46,
        "bug_name": "Closure_175",
        "type": "class",
        "end_line": 926
      },
      {
        "javadoc": "/**\n * A set of utility functions that replaces CALL with a specified\n * FUNCTION body, replacing and aliasing function parameters as\n * necessary.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_175/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 208,
        "name": "FunctionInjector",
        "start_line": 38,
        "span_start": 208,
        "bug_name": "Closure_175",
        "type": "class",
        "end_line": 926
      },
      {
        "javadoc": "/**\n * A set of utility functions that replaces CALL with a specified\n * FUNCTION body, replacing and aliasing function parameters as\n * necessary.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_175/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 695,
        "name": "FunctionInjector",
        "start_line": 38,
        "span_start": 690,
        "bug_name": "Closure_175",
        "type": "class",
        "end_line": 926
      },
      {
        "javadoc": "/**\n * A set of utility functions that replaces CALL with a specified\n * FUNCTION body, replacing and aliasing function parameters as\n * necessary.\n *\n * @author johnlenz@google.com (John Lenz)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_175/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 732,
        "name": "FunctionInjector",
        "start_line": 38,
        "span_start": 715,
        "bug_name": "Closure_175",
        "type": "class",
        "end_line": 926
      }
    ]
  },
  "Closure_176": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Type inference within a script node or a function body, using the data-flow\n * analysis framework.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_176/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 530,
        "name": "TypeInference",
        "start_line": 69,
        "span_start": 530,
        "bug_name": "Closure_176",
        "type": "class",
        "end_line": 1661
      },
      {
        "javadoc": "/**\n * Type inference within a script node or a function body, using the data-flow\n * analysis framework.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_176/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 549,
        "name": "TypeInference",
        "start_line": 69,
        "span_start": 548,
        "bug_name": "Closure_176",
        "type": "class",
        "end_line": 1661
      },
      {
        "javadoc": "/**\n * Type inference within a script node or a function body, using the data-flow\n * analysis framework.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Closure_176/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 565,
        "name": "TypeInference",
        "start_line": 69,
        "span_start": 562,
        "bug_name": "Closure_176",
        "type": "class",
        "end_line": 1661
      }
    ]
  },
  "Codec_1": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Encodes a string into a caverphone value.\n *\n * This is an algorithm created the Caversham Project at the University of Otago.\n * It implements the Caverphone 2.0 algorithm:\n *\n * @author Apache Software Foundation\n * @version $Id$\n * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_1/src/java/org/apache/commons/codec/language/Caverphone.java",
        "span_end": 59,
        "name": "Caverphone",
        "start_line": 35,
        "span_start": 59,
        "bug_name": "Codec_1",
        "type": "class",
        "end_line": 183
      },
      {
        "javadoc": "/**\n * Encodes a string into a metaphone value.\n * <p>\n * Initial Java implementation by <CITE>William B. Brogden. December, 1997</CITE>.\n * Permission given by <CITE>wbrogden</CITE> for code to be used anywhere.\n * </p>\n * <p>\n * <CITE>Hanging on the Metaphone</CITE> by <CITE>Lawrence Philips</CITE> in <CITE>Computer Language of Dec. 1990, p\n * 39.</CITE>\n * </p>\n * <p>\n * Note, that this does not match the algorithm that ships with PHP, or the algorithm\n * found in the Perl <a href=\"http://search.cpan.org/~mschwern/Text-Metaphone-1.96/Metaphone.pm\">Text:Metaphone-1.96</a>.\n * They have had undocumented changes from the originally published algorithm.\n * </p>\n *\n * @author Apache Software Foundation\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_1/src/java/org/apache/commons/codec/language/Metaphone.java",
        "span_end": 88,
        "name": "Metaphone",
        "start_line": 42,
        "span_start": 88,
        "bug_name": "Codec_1",
        "type": "class",
        "end_line": 405
      },
      {
        "javadoc": "/**\n * Utility methods for {@link Soundex} and {@link RefinedSoundex} classes.\n *\n * @author Apache Software Foundation\n * @version $Id$\n * @since 1.3\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_1/src/java/org/apache/commons/codec/language/SoundexUtils.java",
        "span_end": 53,
        "name": "SoundexUtils",
        "start_line": 30,
        "span_start": 53,
        "bug_name": "Codec_1",
        "type": "class",
        "end_line": 123
      }
    ]
  },
  "Codec_6": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream\n * is to ENCODE, but this behaviour can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n *\n * @author Apache Software Foundation\n * @version $Id$\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_6/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "span_end": 147,
        "name": "Base64InputStream",
        "start_line": 46,
        "span_start": 148,
        "bug_name": "Codec_6",
        "type": "class",
        "end_line": 190
      },
      {
        "javadoc": "/**\n * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream\n * is to ENCODE, but this behaviour can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n *\n * @author Apache Software Foundation\n * @version $Id$\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_6/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "span_end": 163,
        "name": "Base64InputStream",
        "start_line": 46,
        "span_start": 164,
        "bug_name": "Codec_6",
        "type": "class",
        "end_line": 190
      },
      {
        "javadoc": "/**\n * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream\n * is to ENCODE, but this behaviour can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n *\n * @author Apache Software Foundation\n * @version $Id$\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_6/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "span_end": 178,
        "name": "Base64InputStream",
        "start_line": 46,
        "span_start": 178,
        "bug_name": "Codec_6",
        "type": "class",
        "end_line": 190
      }
    ]
  },
  "Codec_8": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Provides Base64 encoding and decoding as defined by RFC 2045.\n *\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * The class can be parameterized in the following manner with various constructors:\n * <ul>\n * <li>URL-safe mode: Default off.</li>\n * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n * 4 in the encoded data.\n * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n * </ul>\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @author Apache Software Foundation\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_8/src/java/org/apache/commons/codec/binary/Base64.java",
        "span_end": 425,
        "name": "Base64",
        "start_line": 53,
        "span_start": 419,
        "bug_name": "Codec_8",
        "type": "class",
        "end_line": 1032
      },
      {
        "javadoc": "/**\n * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream\n * is to ENCODE, but this behaviour can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n *\n * @author Apache Software Foundation\n * @version $Id$\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_8/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "span_end": 171,
        "name": "Base64InputStream",
        "start_line": 46,
        "span_start": 169,
        "bug_name": "Codec_8",
        "type": "class",
        "end_line": 192
      }
    ]
  },
  "Codec_11": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * <p>\n * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.\n * </p>\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @author Apache Software Foundation\n * @since 1.3\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 72,
        "name": "QuotedPrintableCodec",
        "start_line": 53,
        "span_start": 70,
        "bug_name": "Codec_11",
        "type": "class",
        "end_line": 431
      },
      {
        "javadoc": "/**\n * <p>\n * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.\n * </p>\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @author Apache Software Foundation\n * @since 1.3\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 119,
        "name": "QuotedPrintableCodec",
        "start_line": 53,
        "span_start": 114,
        "bug_name": "Codec_11",
        "type": "class",
        "end_line": 431
      },
      {
        "javadoc": "/**\n * <p>\n * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.\n * </p>\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @author Apache Software Foundation\n * @since 1.3\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 131,
        "name": "QuotedPrintableCodec",
        "start_line": 53,
        "span_start": 132,
        "bug_name": "Codec_11",
        "type": "class",
        "end_line": 431
      },
      {
        "javadoc": "/**\n * <p>\n * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.\n * </p>\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @author Apache Software Foundation\n * @since 1.3\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 143,
        "name": "QuotedPrintableCodec",
        "start_line": 53,
        "span_start": 144,
        "bug_name": "Codec_11",
        "type": "class",
        "end_line": 431
      },
      {
        "javadoc": "/**\n * <p>\n * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.\n * </p>\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @author Apache Software Foundation\n * @since 1.3\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 151,
        "name": "QuotedPrintableCodec",
        "start_line": 53,
        "span_start": 152,
        "bug_name": "Codec_11",
        "type": "class",
        "end_line": 431
      },
      {
        "javadoc": "/**\n * <p>\n * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.\n * </p>\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @author Apache Software Foundation\n * @since 1.3\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 199,
        "name": "QuotedPrintableCodec",
        "start_line": 53,
        "span_start": 175,
        "bug_name": "Codec_11",
        "type": "class",
        "end_line": 431
      },
      {
        "javadoc": "/**\n * <p>\n * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521</a>.\n * </p>\n * <p>\n * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n * gateway.\n * </p>\n *\n * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n *\n * @author Apache Software Foundation\n * @since 1.3\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 235,
        "name": "QuotedPrintableCodec",
        "start_line": 53,
        "span_start": 229,
        "bug_name": "Codec_11",
        "type": "class",
        "end_line": 431
      }
    ]
  },
  "Codec_12": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Abstract superclass for Base-N input streams.\n *\n * @since 1.5\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "span_end": 144,
        "name": "BaseNCodecInputStream",
        "start_line": 31,
        "span_start": 142,
        "bug_name": "Codec_12",
        "type": "class",
        "end_line": 158
      },
      {
        "javadoc": "/**\n * Abstract superclass for Base-N input streams.\n *\n * @since 1.5\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "span_end": 156,
        "name": "BaseNCodecInputStream",
        "start_line": 31,
        "span_start": 153,
        "bug_name": "Codec_12",
        "type": "class",
        "end_line": 158
      }
    ]
  },
  "Codec_13": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Converts String to and from bytes using the encodings required by the Java specification. These encodings are\n * specified in <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">\n * Standard charsets</a>.\n *\n * <p>This class is immutable and thread-safe.</p>\n *\n * @see CharEncoding\n * @see <a href=\"http://download.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n * @version $Id$\n * @since 1.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_13/src/main/java/org/apache/commons/codec/binary/StringUtils.java",
        "span_end": 69,
        "name": "StringUtils",
        "start_line": 38,
        "span_start": 70,
        "bug_name": "Codec_13",
        "type": "class",
        "end_line": 374
      },
      {
        "javadoc": "/**\n * Encodes a string into a double metaphone value. This Implementation is based on the algorithm by <CITE>Lawrence\n * Philips</CITE>.\n * <p>\n * This class is conditionally thread-safe. The instance field {@link #maxCodeLen} is mutable\n * {@link #setMaxCodeLen(int)} but is not volatile, and accesses are not synchronized. If an instance of the class is\n * shared between threads, the caller needs to ensure that suitable synchronization is used to ensure safe publication\n * of the value between threads, and must not invoke {@link #setMaxCodeLen(int)} after initial setup.\n *\n * @see <a href=\"http://drdobbs.com/184401251?pgno=2\">Original Article</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Metaphone\">http://en.wikipedia.org/wiki/Metaphone</a>\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_13/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "span_end": 244,
        "name": "DoubleMetaphone",
        "start_line": 37,
        "span_start": 244,
        "bug_name": "Codec_13",
        "type": "class",
        "end_line": 1008
      }
    ]
  },
  "Codec_14": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * Language guessing utility.\n * <p>\n * This class encapsulates rules used to guess the possible languages that a word originates from. This is\n * done by reference to a whole series of rules distributed in resource files.\n * <p>\n * Instances of this class are typically managed through the static factory method instance().\n * Unless you are developing your own language guessing rules, you will not need to interact with this class directly.\n * <p>\n * This class is intended to be immutable and thread-safe.\n * <p>\n * <b>Lang resources</b>\n * <p>\n * Language guessing rules are typically loaded from resource files. These are UTF-8 encoded text files.\n * They are systematically named following the pattern:\n * <blockquote>org/apache/commons/codec/language/bm/lang.txt</blockquote>\n * The format of these resources is the following:\n * <ul>\n * <li><b>Rules:</b> whitespace separated strings.\n * There should be 3 columns to each row, and these will be interpreted as:\n * <ol>\n * <li>pattern: a regular expression.</li>\n * <li>languages: a '+'-separated list of languages.</li>\n * <li>acceptOnMatch: 'true' or 'false' indicating if a match rules in or rules out the language.</li>\n * </ol>\n * </li>\n * <li><b>End-of-line comments:</b> Any occurrence of '//' will cause all text following on that line to be\n * discarded as a comment.</li>\n * <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode.\n * This will skip all content until a line ending in '*' and '/' is found.</li>\n * <li><b>Blank lines:</b> All blank lines will be skipped.</li>\n * </ul>\n * <p>\n * Port of lang.php\n *\n * @since 1.6\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_14/src/main/java/org/apache/commons/codec/language/bm/Lang.java",
        "span_end": 102,
        "name": "Lang",
        "start_line": 71,
        "span_start": 98,
        "bug_name": "Codec_14",
        "type": "class",
        "end_line": 231
      },
      {
        "javadoc": "/**\n * Converts words into potential phonetic representations.\n * <p>\n * This is a two-stage process. Firstly, the word is converted into a phonetic representation that takes\n * into account the likely source language. Next, this phonetic representation is converted into a\n * pan-European 'average' representation, allowing comparison between different versions of essentially\n * the same word from different languages.\n * <p>\n * This class is intentionally immutable and thread-safe.\n * If you wish to alter the settings for a PhoneticEngine, you\n * must make a new one with the updated settings.\n * <p>\n * Ported from phoneticengine.php\n *\n * @since 1.6\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_14/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "span_end": 338,
        "name": "PhoneticEngine",
        "start_line": 53,
        "span_start": 338,
        "bug_name": "Codec_14",
        "type": "class",
        "end_line": 519
      },
      {
        "javadoc": "/**\n * Converts words into potential phonetic representations.\n * <p>\n * This is a two-stage process. Firstly, the word is converted into a phonetic representation that takes\n * into account the likely source language. Next, this phonetic representation is converted into a\n * pan-European 'average' representation, allowing comparison between different versions of essentially\n * the same word from different languages.\n * <p>\n * This class is intentionally immutable and thread-safe.\n * If you wish to alter the settings for a PhoneticEngine, you\n * must make a new one with the updated settings.\n * <p>\n * Ported from phoneticengine.php\n *\n * @since 1.6\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_14/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "span_end": 364,
        "name": "PhoneticEngine",
        "start_line": 53,
        "span_start": 361,
        "bug_name": "Codec_14",
        "type": "class",
        "end_line": 519
      },
      {
        "javadoc": "/**\n * A phoneme rule.\n * <p>\n * Rules have a pattern, left context, right context, output phoneme, set of languages for which they apply\n * and a logical flag indicating if all languages must be in play. A rule matches if:\n * <ul>\n * <li>the pattern matches at the current position</li>\n * <li>the string up until the beginning of the pattern matches the left context</li>\n * <li>the string from the end of the pattern matches the right context</li>\n * <li>logical is ALL and all languages are in scope; or</li>\n * <li>logical is any other value and at least one language is in scope</li>\n * </ul>\n * <p>\n * Rules are typically generated by parsing rules resources. In normal use, there will be no need for the user\n * to explicitly construct their own.\n * <p>\n * Rules are immutable and thread-safe.\n * <p>\n * <b>Rules resources</b>\n * <p>\n * Rules are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically\n * named following the pattern:\n * <blockquote>org/apache/commons/codec/language/bm/${NameType#getName}_${RuleType#getName}_${language}.txt</blockquote>\n * <p>\n * The format of these resources is the following:\n * <ul>\n * <li><b>Rules:</b> whitespace separated, double-quoted strings. There should be 4 columns to each row, and these\n * will be interpreted as:\n * <ol>\n * <li>pattern</li>\n * <li>left context</li>\n * <li>right context</li>\n * <li>phoneme</li>\n * </ol>\n * </li>\n * <li><b>End-of-line comments:</b> Any occurrence of '//' will cause all text following on that line to be discarded\n * as a comment.</li>\n * <li><b>Multi-line comments:</b> Any line starting with '/*' will start multi-line commenting mode. This will skip\n * all content until a line ending in '*' and '/' is found.</li>\n * <li><b>Blank lines:</b> All blank lines will be skipped.</li>\n * </ul>\n *\n * @since 1.6\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Codec_14/src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "span_end": 157,
        "name": "Rule",
        "start_line": 82,
        "span_start": 158,
        "bug_name": "Codec_14",
        "type": "class",
        "end_line": 713
      },
      {
        "file": "/Users/danielding/WORK_DIR/Codec_14/src/main/java/org/apache/commons/codec/language/bm/Rule.java",
        "span_end": 157,
        "name": "Phoneme",
        "start_line": 84,
        "span_start": 158,
        "bug_name": "Codec_14",
        "type": "class",
        "end_line": 163
      }
    ]
  },
  "Collections_25": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Provides static utility methods and decorators for {@link Iterator}\n * instances. The implementations are provided in the iterators subpackage.\n * <p>\n * WARNING: Due to human error certain binary incompatibilities were introduced\n * between Commons Collections 2.1 and 3.0. The class remained source and test\n * compatible, so if you can recompile all your classes and dependencies\n * everything is OK. Those methods which are binary incompatible are marked as\n * such, together with alternate solutions that are binary compatible\n * against versions 2.1.1 and 3.1.\n *\n * @since 2.1\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Collections_25/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
        "span_end": 605,
        "name": "IteratorUtils",
        "start_line": 82,
        "span_start": 605,
        "bug_name": "Collections_25",
        "type": "class",
        "end_line": 1499
      },
      {
        "javadoc": "/**\n * Provides static utility methods and decorators for {@link Iterator}\n * instances. The implementations are provided in the iterators subpackage.\n * <p>\n * WARNING: Due to human error certain binary incompatibilities were introduced\n * between Commons Collections 2.1 and 3.0. The class remained source and test\n * compatible, so if you can recompile all your classes and dependencies\n * everything is OK. Those methods which are binary incompatible are marked as\n * such, together with alternate solutions that are binary compatible\n * against versions 2.1.1 and 3.1.\n *\n * @since 2.1\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Collections_25/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
        "span_end": 626,
        "name": "IteratorUtils",
        "start_line": 82,
        "span_start": 626,
        "bug_name": "Collections_25",
        "type": "class",
        "end_line": 1499
      },
      {
        "javadoc": "/**\n * Provides static utility methods and decorators for {@link Iterator}\n * instances. The implementations are provided in the iterators subpackage.\n * <p>\n * WARNING: Due to human error certain binary incompatibilities were introduced\n * between Commons Collections 2.1 and 3.0. The class remained source and test\n * compatible, so if you can recompile all your classes and dependencies\n * everything is OK. Those methods which are binary incompatible are marked as\n * such, together with alternate solutions that are binary compatible\n * against versions 2.1.1 and 3.1.\n *\n * @since 2.1\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Collections_25/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
        "span_end": 648,
        "name": "IteratorUtils",
        "start_line": 82,
        "span_start": 648,
        "bug_name": "Collections_25",
        "type": "class",
        "end_line": 1499
      }
    ]
  },
  "Compress_2": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * Implements the \"ar\" archive format as an input stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 45,
        "name": "ArArchiveInputStream",
        "start_line": 33,
        "span_start": 42,
        "bug_name": "Compress_2",
        "type": "class",
        "end_line": 182
      },
      {
        "javadoc": "/**\n * Implements the \"ar\" archive format as an input stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 61,
        "name": "ArArchiveInputStream",
        "start_line": 33,
        "span_start": 60,
        "bug_name": "Compress_2",
        "type": "class",
        "end_line": 182
      },
      {
        "javadoc": "/**\n * Implements the \"ar\" archive format as an input stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 85,
        "name": "ArArchiveInputStream",
        "start_line": 33,
        "span_start": 77,
        "bug_name": "Compress_2",
        "type": "class",
        "end_line": 182
      },
      {
        "javadoc": "/**\n * Implements the \"ar\" archive format as an input stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 116,
        "name": "ArArchiveInputStream",
        "start_line": 33,
        "span_start": 114,
        "bug_name": "Compress_2",
        "type": "class",
        "end_line": 182
      },
      {
        "javadoc": "/**\n * Implements the \"ar\" archive format as an input stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 134,
        "name": "ArArchiveInputStream",
        "start_line": 33,
        "span_start": 129,
        "bug_name": "Compress_2",
        "type": "class",
        "end_line": 182
      },
      {
        "javadoc": "/**\n * Implements the \"ar\" archive format as an input stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 142,
        "name": "ArArchiveInputStream",
        "start_line": 33,
        "span_start": 143,
        "bug_name": "Compress_2",
        "type": "class",
        "end_line": 182
      }
    ]
  },
  "Compress_3": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n * Methods are provided to put entries, and then write their contents\n * by writing to this stream using write().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 54,
        "name": "TarArchiveOutputStream",
        "start_line": 33,
        "span_start": 55,
        "bug_name": "Compress_3",
        "type": "class",
        "end_line": 319
      },
      {
        "javadoc": "/**\n * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n * Methods are provided to put entries, and then write their contents\n * by writing to this stream using write().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 111,
        "name": "TarArchiveOutputStream",
        "start_line": 33,
        "span_start": 112,
        "bug_name": "Compress_3",
        "type": "class",
        "end_line": 319
      },
      {
        "javadoc": "/**\n * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n * Methods are provided to put entries, and then write their contents\n * by writing to this stream using write().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 186,
        "name": "TarArchiveOutputStream",
        "start_line": 33,
        "span_start": 187,
        "bug_name": "Compress_3",
        "type": "class",
        "end_line": 319
      },
      {
        "javadoc": "/**\n * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n * Methods are provided to put entries, and then write their contents\n * by writing to this stream using write().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 216,
        "name": "TarArchiveOutputStream",
        "start_line": 33,
        "span_start": 217,
        "bug_name": "Compress_3",
        "type": "class",
        "end_line": 319
      }
    ]
  },
  "Compress_4": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * CPIOArchiveOutputStream is a stream for writing CPIO streams. All formats of\n * CPIO are supported (old ASCII, old binary, new portable format and the new\n * portable format with CRC).\n * <p/>\n * <p/>\n * An entry can be written by creating an instance of CpioArchiveEntry and fill\n * it with the necessary values and put it into the CPIO stream. Afterwards\n * write the contents of the file into the CPIO stream. Either close the stream\n * by calling finish() or put a next entry into the cpio stream.\n * <p/>\n * <code><pre>\n * CpioArchiveOutputStream out = new CpioArchiveOutputStream(\n *         new FileOutputStream(new File(\"test.cpio\")));\n * CpioArchiveEntry entry = new CpioArchiveEntry();\n * entry.setName(\"testfile\");\n * String contents = &quot;12345&quot;;\n * entry.setFileSize(contents.length());\n * entry.setMode(CpioConstants.C_ISREG); // regular file\n * ... set other attributes, e.g. time, number of links\n * out.putNextEntry(entry);\n * out.write(testContents.getBytes());\n * out.close();\n * </pre></code>\n * <p/>\n * Note: This implementation should be compatible to cpio 2.5\n *\n * This class uses mutable fields and is not considered threadsafe.\n *\n * based on code from the jRPM project (jrpm.sourceforge.net)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_4/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "span_end": 336,
        "name": "CpioArchiveOutputStream",
        "start_line": 62,
        "span_start": 336,
        "bug_name": "Compress_4",
        "type": "class",
        "end_line": 389
      },
      {
        "javadoc": "/**\n * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n * Methods are provided to put entries, and then write their contents\n * by writing to this stream using write().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_4/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 126,
        "name": "TarArchiveOutputStream",
        "start_line": 33,
        "span_start": 126,
        "bug_name": "Compress_4",
        "type": "class",
        "end_line": 323
      },
      {
        "javadoc": "/**\n * Reimplementation of {@link java.util.zip.ZipOutputStream\n * java.util.zip.ZipOutputStream} that does handle the extended\n * functionality of this package, especially internal/external file\n * attributes and extra fields with different layouts for local file\n * data and central directory entries.\n *\n * <p>This class will try to use {@link java.io.RandomAccessFile\n * RandomAccessFile} when you know that the output is going to go to a\n * file.</p>\n *\n * <p>If RandomAccessFile cannot be used, this implementation will use\n * a Data Descriptor to store size and CRC information for {@link\n * #DEFLATED DEFLATED} entries, this means, you don't need to\n * calculate them yourself.  Unfortunately this is not possible for\n * the {@link #STORED STORED} method, here setting the CRC and\n * uncompressed size information is required before {@link\n * #putArchiveEntry(ArchiveEntry)} can be called.</p>\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 530,
        "name": "ZipArchiveOutputStream",
        "start_line": 58,
        "span_start": 530,
        "bug_name": "Compress_4",
        "type": "class",
        "end_line": 918
      },
      {
        "javadoc": "/**\n * Performs ChangeSet operations on a stream.\n * This class is thread safe and can be used multiple times.\n * It operates on a copy of the ChangeSet. If the ChangeSet changes,\n * a new Performer must be created.\n *\n * @ThreadSafe\n * @Immutable\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_4/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java",
        "span_end": 127,
        "name": "ChangeSetPerformer",
        "start_line": 41,
        "span_start": 128,
        "bug_name": "Compress_4",
        "type": "class",
        "end_line": 178
      }
    ]
  },
  "Compress_6": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Extension that adds better handling of extra fields and provides\n * access to the internal and external file attributes.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_6/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
        "span_end": 63,
        "name": "ZipArchiveEntry",
        "start_line": 32,
        "span_start": 64,
        "bug_name": "Compress_6",
        "type": "class",
        "end_line": 471
      },
      {
        "javadoc": "/**\n * Extension that adds better handling of extra fields and provides\n * access to the internal and external file attributes.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_6/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
        "span_end": 466,
        "name": "ZipArchiveEntry",
        "start_line": 32,
        "span_start": 462,
        "bug_name": "Compress_6",
        "type": "class",
        "end_line": 471
      }
    ]
  },
  "Compress_9": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n * Methods are provided to put entries, and then write their contents\n * by writing to this stream using write().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 108,
        "name": "TarArchiveOutputStream",
        "start_line": 35,
        "span_start": 108,
        "bug_name": "Compress_9",
        "type": "class",
        "end_line": 359
      },
      {
        "javadoc": "/**\n * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n * Methods are provided to put entries, and then write their contents\n * by writing to this stream using write().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 330,
        "name": "TarArchiveOutputStream",
        "start_line": 35,
        "span_start": 330,
        "bug_name": "Compress_9",
        "type": "class",
        "end_line": 359
      }
    ]
  },
  "Compress_10": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Replacement for <code>java.util.ZipFile</code>.\n *\n * <p>This class adds support for file name encodings other than UTF-8\n * (which is required to work on ZIP files created by native zip tools\n * and is able to skip a preamble like the one found in self\n * extracting archives.  Furthermore it returns instances of\n * <code>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</code>\n * instead of <code>java.util.zip.ZipEntry</code>.</p>\n *\n * <p>It doesn't extend <code>java.util.zip.ZipFile</code> as it would\n * have to reimplement all methods anyway.  Like\n * <code>java.util.ZipFile</code>, it uses RandomAccessFile under the\n * covers and supports compressed and uncompressed entries.  As of\n * Apache Commons Compress it also transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries.</p>\n *\n * <p>The method signatures mimic the ones of\n * <code>java.util.zip.ZipFile</code>, with a couple of exceptions:\n *\n * <ul>\n *   <li>There is no getName method.</li>\n *   <li>entries has been renamed to getEntries.</li>\n *   <li>getEntries and getEntry return\n *   <code>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</code>\n *   instances.</li>\n *   <li>close is allowed to throw IOException.</li>\n * </ul>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
        "span_end": 809,
        "name": "ZipFile",
        "start_line": 73,
        "span_start": 808,
        "bug_name": "Compress_10",
        "type": "class",
        "end_line": 965
      },
      {
        "javadoc": "/**\n * Replacement for <code>java.util.ZipFile</code>.\n *\n * <p>This class adds support for file name encodings other than UTF-8\n * (which is required to work on ZIP files created by native zip tools\n * and is able to skip a preamble like the one found in self\n * extracting archives.  Furthermore it returns instances of\n * <code>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</code>\n * instead of <code>java.util.zip.ZipEntry</code>.</p>\n *\n * <p>It doesn't extend <code>java.util.zip.ZipFile</code> as it would\n * have to reimplement all methods anyway.  Like\n * <code>java.util.ZipFile</code>, it uses RandomAccessFile under the\n * covers and supports compressed and uncompressed entries.  As of\n * Apache Commons Compress it also transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries.</p>\n *\n * <p>The method signatures mimic the ones of\n * <code>java.util.zip.ZipFile</code>, with a couple of exceptions:\n *\n * <ul>\n *   <li>There is no getName method.</li>\n *   <li>entries has been renamed to getEntries.</li>\n *   <li>getEntries and getEntry return\n *   <code>org.apache.commons.compress.archivers.zip.ZipArchiveEntry</code>\n *   instances.</li>\n *   <li>close is allowed to throw IOException.</li>\n * </ul>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
        "span_end": 841,
        "name": "ZipFile",
        "start_line": 73,
        "span_start": 842,
        "bug_name": "Compress_10",
        "type": "class",
        "end_line": 965
      }
    ]
  },
  "Compress_11": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Factory to create Archive[In|Out]putStreams from names or the first bytes of\n * the InputStream. In order add other implementations you should extend\n * ArchiveStreamFactory and override the appropriate methods (and call their\n * implementation from super of course).</p>\n *\n * Compressing a ZIP-File:\n *\n * <pre>\n * final OutputStream out = new FileOutputStream(output);\n * ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.ZIP, out);\n *\n * os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n * IOUtils.copy(new FileInputStream(file1), os);\n * os.closeArchiveEntry();\n *\n * os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n * IOUtils.copy(new FileInputStream(file2), os);\n * os.closeArchiveEntry();\n * os.close();\n * </pre>\n *\n * Decompressing a ZIP-File:\n *\n * <pre>\n * final InputStream is = new FileInputStream(input);\n * ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.ZIP, is);\n * ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n * OutputStream out = new FileOutputStream(new File(dir, entry.getName()));\n * IOUtils.copy(in, out);\n * out.close();\n * in.close();\n * </pre>\n *\n * @Immutable\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "span_end": 239,
        "name": "ArchiveStreamFactory",
        "start_line": 74,
        "span_start": 240,
        "bug_name": "Compress_11",
        "type": "class",
        "end_line": 255
      },
      {
        "javadoc": "/**\n * <p>Factory to create Archive[In|Out]putStreams from names or the first bytes of\n * the InputStream. In order add other implementations you should extend\n * ArchiveStreamFactory and override the appropriate methods (and call their\n * implementation from super of course).</p>\n *\n * Compressing a ZIP-File:\n *\n * <pre>\n * final OutputStream out = new FileOutputStream(output);\n * ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.ZIP, out);\n *\n * os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n * IOUtils.copy(new FileInputStream(file1), os);\n * os.closeArchiveEntry();\n *\n * os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n * IOUtils.copy(new FileInputStream(file2), os);\n * os.closeArchiveEntry();\n * os.close();\n * </pre>\n *\n * Decompressing a ZIP-File:\n *\n * <pre>\n * final InputStream is = new FileInputStream(input);\n * ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.ZIP, is);\n * ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n * OutputStream out = new FileOutputStream(new File(dir, entry.getName()));\n * IOUtils.copy(in, out);\n * out.close();\n * in.close();\n * </pre>\n *\n * @Immutable\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "span_end": 248,
        "name": "ArchiveStreamFactory",
        "start_line": 74,
        "span_start": 249,
        "bug_name": "Compress_11",
        "type": "class",
        "end_line": 255
      }
    ]
  },
  "Compress_20": {
    "bug_count": 6,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 331,
        "name": "CpioArchiveInputStream",
        "start_line": 63,
        "span_start": 331,
        "bug_name": "Compress_20",
        "type": "class",
        "end_line": 525
      },
      {
        "file": "/Users/danielding/WORK_DIR/Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 347,
        "name": "CpioArchiveInputStream",
        "start_line": 63,
        "span_start": 347,
        "bug_name": "Compress_20",
        "type": "class",
        "end_line": 525
      },
      {
        "file": "/Users/danielding/WORK_DIR/Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 361,
        "name": "CpioArchiveInputStream",
        "start_line": 63,
        "span_start": 361,
        "bug_name": "Compress_20",
        "type": "class",
        "end_line": 525
      },
      {
        "file": "/Users/danielding/WORK_DIR/Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 373,
        "name": "CpioArchiveInputStream",
        "start_line": 63,
        "span_start": 373,
        "bug_name": "Compress_20",
        "type": "class",
        "end_line": 525
      },
      {
        "file": "/Users/danielding/WORK_DIR/Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 387,
        "name": "CpioArchiveInputStream",
        "start_line": 63,
        "span_start": 387,
        "bug_name": "Compress_20",
        "type": "class",
        "end_line": 525
      },
      {
        "file": "/Users/danielding/WORK_DIR/Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 399,
        "name": "CpioArchiveInputStream",
        "start_line": 63,
        "span_start": 399,
        "bug_name": "Compress_20",
        "type": "class",
        "end_line": 525
      }
    ]
  },
  "Compress_22": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * An input stream that decompresses from the BZip2 format to be read as any other stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 67,
        "name": "BZip2CompressorInputStream",
        "start_line": 37,
        "span_start": 67,
        "bug_name": "Compress_22",
        "type": "class",
        "end_line": 1047
      },
      {
        "javadoc": "/**\n * An input stream that decompresses from the BZip2 format to be read as any other stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 135,
        "name": "BZip2CompressorInputStream",
        "start_line": 37,
        "span_start": 135,
        "bug_name": "Compress_22",
        "type": "class",
        "end_line": 1047
      },
      {
        "javadoc": "/**\n * An input stream that decompresses from the BZip2 format to be read as any other stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 232,
        "name": "BZip2CompressorInputStream",
        "start_line": 37,
        "span_start": 199,
        "bug_name": "Compress_22",
        "type": "class",
        "end_line": 1047
      },
      {
        "javadoc": "/**\n * An input stream that decompresses from the BZip2 format to be read as any other stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 853,
        "name": "BZip2CompressorInputStream",
        "start_line": 37,
        "span_start": 853,
        "bug_name": "Compress_22",
        "type": "class",
        "end_line": 1047
      },
      {
        "javadoc": "/**\n * An input stream that decompresses from the BZip2 format to be read as any other stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 871,
        "name": "BZip2CompressorInputStream",
        "start_line": 37,
        "span_start": 871,
        "bug_name": "Compress_22",
        "type": "class",
        "end_line": 1047
      },
      {
        "javadoc": "/**\n * An input stream that decompresses from the BZip2 format to be read as any other stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 913,
        "name": "BZip2CompressorInputStream",
        "start_line": 37,
        "span_start": 913,
        "bug_name": "Compress_22",
        "type": "class",
        "end_line": 1047
      },
      {
        "javadoc": "/**\n * An input stream that decompresses from the BZip2 format to be read as any other stream.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 942,
        "name": "BZip2CompressorInputStream",
        "start_line": 37,
        "span_start": 942,
        "bug_name": "Compress_22",
        "type": "class",
        "end_line": 1047
      }
    ]
  },
  "Compress_29": {
    "bug_count": 14,
    "entries": [
      {
        "javadoc": "/**\n * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n * Methods are provided to put entries, and then write their contents\n * by writing to this stream using write().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 154,
        "name": "TarArchiveOutputStream",
        "start_line": 43,
        "span_start": 155,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 700
      },
      {
        "javadoc": "/**\n * Implements an input stream that can read Zip archives.\n *\n * <p>Note that {@link ZipArchiveEntry#getSize()} may return -1 if the\n * DEFLATE algorithm is used, as the size information is not available\n * from the header.</p>\n *\n * <p>The {@link ZipFile} class is preferred when reading from files.</p>\n *\n * <p>As of Apache Commons Compress it transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries.</p>\n *\n * @see ZipFile\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "span_end": 64,
        "name": "ZipArchiveInputStream",
        "start_line": 59,
        "span_start": 65,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 1080
      },
      {
        "javadoc": "/**\n * Implements an input stream that can read Zip archives.\n *\n * <p>Note that {@link ZipArchiveEntry#getSize()} may return -1 if the\n * DEFLATE algorithm is used, as the size information is not available\n * from the header.</p>\n *\n * <p>The {@link ZipFile} class is preferred when reading from files.</p>\n *\n * <p>As of Apache Commons Compress it transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries.</p>\n *\n * @see ZipFile\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "span_end": 183,
        "name": "ZipArchiveInputStream",
        "start_line": 59,
        "span_start": 184,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 1080
      },
      {
        "javadoc": "/**\n * Factory to create Archive[In|Out]putStreams from names or the first bytes of\n * the InputStream. In order to add other implementations, you should extend\n * ArchiveStreamFactory and override the appropriate methods (and call their\n * implementation from super of course).\n *\n * Compressing a ZIP-File:\n *\n * <pre>\n * final OutputStream out = new FileOutputStream(output);\n * ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.ZIP, out);\n *\n * os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n * IOUtils.copy(new FileInputStream(file1), os);\n * os.closeArchiveEntry();\n *\n * os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n * IOUtils.copy(new FileInputStream(file2), os);\n * os.closeArchiveEntry();\n * os.close();\n * </pre>\n *\n * Decompressing a ZIP-File:\n *\n * <pre>\n * final InputStream is = new FileInputStream(input);\n * ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.ZIP, is);\n * ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n * OutputStream out = new FileOutputStream(new File(dir, entry.getName()));\n * IOUtils.copy(in, out);\n * out.close();\n * in.close();\n * </pre>\n * @Immutable provided that the deprecated method setEntryEncoding is not used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "span_end": 297,
        "name": "ArchiveStreamFactory",
        "start_line": 76,
        "span_start": 297,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 407
      },
      {
        "javadoc": "/**\n * Factory to create Archive[In|Out]putStreams from names or the first bytes of\n * the InputStream. In order to add other implementations, you should extend\n * ArchiveStreamFactory and override the appropriate methods (and call their\n * implementation from super of course).\n *\n * Compressing a ZIP-File:\n *\n * <pre>\n * final OutputStream out = new FileOutputStream(output);\n * ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.ZIP, out);\n *\n * os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n * IOUtils.copy(new FileInputStream(file1), os);\n * os.closeArchiveEntry();\n *\n * os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n * IOUtils.copy(new FileInputStream(file2), os);\n * os.closeArchiveEntry();\n * os.close();\n * </pre>\n *\n * Decompressing a ZIP-File:\n *\n * <pre>\n * final InputStream is = new FileInputStream(input);\n * ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.ZIP, is);\n * ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n * OutputStream out = new FileOutputStream(new File(dir, entry.getName()));\n * IOUtils.copy(in, out);\n * out.close();\n * in.close();\n * </pre>\n * @Immutable provided that the deprecated method setEntryEncoding is not used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "span_end": 360,
        "name": "ArchiveStreamFactory",
        "start_line": 76,
        "span_start": 360,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 407
      },
      {
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 96,
        "name": "CpioArchiveInputStream",
        "start_line": 67,
        "span_start": 97,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 564
      },
      {
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 154,
        "name": "CpioArchiveInputStream",
        "start_line": 67,
        "span_start": 155,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 564
      },
      {
        "javadoc": "/**\n * CPIOArchiveOutputStream is a stream for writing CPIO streams. All formats of\n * CPIO are supported (old ASCII, old binary, new portable format and the new\n * portable format with CRC).\n *\n * <p>An entry can be written by creating an instance of CpioArchiveEntry and fill\n * it with the necessary values and put it into the CPIO stream. Afterwards\n * write the contents of the file into the CPIO stream. Either close the stream\n * by calling finish() or put a next entry into the cpio stream.</p>\n *\n * <pre>\n * CpioArchiveOutputStream out = new CpioArchiveOutputStream(\n *         new FileOutputStream(new File(\"test.cpio\")));\n * CpioArchiveEntry entry = new CpioArchiveEntry();\n * entry.setName(\"testfile\");\n * String contents = &quot;12345&quot;;\n * entry.setFileSize(contents.length());\n * entry.setMode(CpioConstants.C_ISREG); // regular file\n * ... set other attributes, e.g. time, number of links\n * out.putArchiveEntry(entry);\n * out.write(testContents.getBytes());\n * out.close();\n * </pre>\n *\n * <p>Note: This implementation should be compatible to cpio 2.5</p>\n *\n * <p>This class uses mutable fields and is not considered threadsafe.</p>\n *\n * <p>based on code from the jRPM project (jrpm.sourceforge.net)</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "span_end": 97,
        "name": "CpioArchiveOutputStream",
        "start_line": 64,
        "span_start": 98,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 560
      },
      {
        "javadoc": "/**\n * CPIOArchiveOutputStream is a stream for writing CPIO streams. All formats of\n * CPIO are supported (old ASCII, old binary, new portable format and the new\n * portable format with CRC).\n *\n * <p>An entry can be written by creating an instance of CpioArchiveEntry and fill\n * it with the necessary values and put it into the CPIO stream. Afterwards\n * write the contents of the file into the CPIO stream. Either close the stream\n * by calling finish() or put a next entry into the cpio stream.</p>\n *\n * <pre>\n * CpioArchiveOutputStream out = new CpioArchiveOutputStream(\n *         new FileOutputStream(new File(\"test.cpio\")));\n * CpioArchiveEntry entry = new CpioArchiveEntry();\n * entry.setName(\"testfile\");\n * String contents = &quot;12345&quot;;\n * entry.setFileSize(contents.length());\n * entry.setMode(CpioConstants.C_ISREG); // regular file\n * ... set other attributes, e.g. time, number of links\n * out.putArchiveEntry(entry);\n * out.write(testContents.getBytes());\n * out.close();\n * </pre>\n *\n * <p>Note: This implementation should be compatible to cpio 2.5</p>\n *\n * <p>This class uses mutable fields and is not considered threadsafe.</p>\n *\n * <p>based on code from the jRPM project (jrpm.sourceforge.net)</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "span_end": 161,
        "name": "CpioArchiveOutputStream",
        "start_line": 64,
        "span_start": 162,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 560
      },
      {
        "javadoc": "/**\n * The DumpArchiveInputStream reads a UNIX dump archive as an InputStream.\n * Methods are provided to position at each successive entry in\n * the archive, and the read each entry as a normal input stream\n * using read().\n *\n * There doesn't seem to exist a hint on the encoding of string values\n * in any piece documentation.  Given the main purpose of dump/restore\n * is backing up a system it seems very likely the format uses the\n * current default encoding of the system.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java",
        "span_end": 79,
        "name": "DumpArchiveInputStream",
        "start_line": 51,
        "span_start": 80,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 554
      },
      {
        "javadoc": "/**\n * The DumpArchiveInputStream reads a UNIX dump archive as an InputStream.\n * Methods are provided to position at each successive entry in\n * the archive, and the read each entry as a normal input stream\n * using read().\n *\n * There doesn't seem to exist a hint on the encoding of string values\n * in any piece documentation.  Given the main purpose of dump/restore\n * is backing up a system it seems very likely the format uses the\n * current default encoding of the system.\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java",
        "span_end": 103,
        "name": "DumpArchiveInputStream",
        "start_line": 51,
        "span_start": 104,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 554
      },
      {
        "javadoc": "/**\n * The TarInputStream reads a UNIX tar archive as an InputStream.\n * methods are provided to position at each successive entry in\n * the archive, and the read each entry as a normal input stream\n * using read().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
        "span_end": 78,
        "name": "TarArchiveInputStream",
        "start_line": 48,
        "span_start": 79,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 722
      },
      {
        "javadoc": "/**\n * The TarInputStream reads a UNIX tar archive as an InputStream.\n * methods are provided to position at each successive entry in\n * the archive, and the read each entry as a normal input stream\n * using read().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
        "span_end": 141,
        "name": "TarArchiveInputStream",
        "start_line": 48,
        "span_start": 142,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 722
      },
      {
        "javadoc": "/**\n * The TarOutputStream writes a UNIX tar archive as an OutputStream.\n * Methods are provided to put entries, and then write their contents\n * by writing to this stream using write().\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 89,
        "name": "TarArchiveOutputStream",
        "start_line": 43,
        "span_start": 90,
        "bug_name": "Compress_29",
        "type": "class",
        "end_line": 700
      }
    ]
  },
  "Compress_33": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * <p>Factory to create Compressor[In|Out]putStreams from names. To add other\n * implementations you should extend CompressorStreamFactory and override the\n * appropriate methods (and call their implementation from super of course).</p>\n *\n * Example (Compressing a file):\n *\n * <pre>\n * final OutputStream out = new FileOutputStream(output);\n * CompressorOutputStream cos =\n *      new CompressorStreamFactory().createCompressorOutputStream(CompressorStreamFactory.BZIP2, out);\n * IOUtils.copy(new FileInputStream(input), cos);\n * cos.close();\n * </pre>\n *\n * Example (Decompressing a file):\n * <pre>\n * final InputStream is = new FileInputStream(input);\n * CompressorInputStream in =\n *      new CompressorStreamFactory().createCompressorInputStream(CompressorStreamFactory.BZIP2, is);\n * IOUtils.copy(in, new FileOutputStream(output));\n * in.close();\n * </pre>\n * @Immutable provided that the deprecated method setDecompressConcatenated is not used.\n * @ThreadSafe even if the deprecated method setDecompressConcatenated is used\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
        "span_end": 239,
        "name": "CompressorStreamFactory",
        "start_line": 69,
        "span_start": 240,
        "bug_name": "Compress_33",
        "type": "class",
        "end_line": 374
      },
      {
        "javadoc": "/**\n * Deflate decompressor.\n * @since 1.9\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_33/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java",
        "span_end": 32,
        "name": "DeflateCompressorInputStream",
        "start_line": 32,
        "span_start": 33,
        "bug_name": "Compress_33",
        "type": "class",
        "end_line": 106
      },
      {
        "javadoc": "/**\n * Deflate decompressor.\n * @since 1.9\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_33/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java",
        "span_end": 106,
        "name": "DeflateCompressorInputStream",
        "start_line": 32,
        "span_start": 106,
        "bug_name": "Compress_33",
        "type": "class",
        "end_line": 106
      }
    ]
  },
  "Compress_34": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * An extra field that stores UNIX UID/GID data (owner &amp; group ownership) for a given\n * zip entry.  We're using the field definition given in Info-Zip's source archive:\n * zip-3.0.tar.gz/proginfo/extrafld.txt\n *\n * <pre>\n * Local-header version:\n *\n * Value         Size        Description\n * -----         ----        -----------\n * 0x7875        Short       tag for this extra block type (\"ux\")\n * TSize         Short       total data size for this block\n * Version       1 byte      version of this extra field, currently 1\n * UIDSize       1 byte      Size of UID field\n * UID           Variable    UID for this entry (little endian)\n * GIDSize       1 byte      Size of GID field\n * GID           Variable    GID for this entry (little endian)\n *\n * Central-header version:\n *\n * Value         Size        Description\n * -----         ----        -----------\n * 0x7855        Short       tag for this extra block type (\"Ux\")\n * TSize         Short       total data size for this block (0)\n * </pre>\n * @since 1.5\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java",
        "span_end": 57,
        "name": "X7875_NewUnix",
        "start_line": 56,
        "span_start": 58,
        "bug_name": "Compress_34",
        "type": "class",
        "end_line": 345
      },
      {
        "javadoc": "/**\n * An extra field that stores UNIX UID/GID data (owner &amp; group ownership) for a given\n * zip entry.  We're using the field definition given in Info-Zip's source archive:\n * zip-3.0.tar.gz/proginfo/extrafld.txt\n *\n * <pre>\n * Local-header version:\n *\n * Value         Size        Description\n * -----         ----        -----------\n * 0x7875        Short       tag for this extra block type (\"ux\")\n * TSize         Short       total data size for this block\n * Version       1 byte      version of this extra field, currently 1\n * UIDSize       1 byte      Size of UID field\n * UID           Variable    UID for this entry (little endian)\n * GIDSize       1 byte      Size of GID field\n * GID           Variable    GID for this entry (little endian)\n *\n * Central-header version:\n *\n * Value         Size        Description\n * -----         ----        -----------\n * 0x7855        Short       tag for this extra block type (\"Ux\")\n * TSize         Short       total data size for this block (0)\n * </pre>\n * @since 1.5\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java",
        "span_end": 146,
        "name": "X7875_NewUnix",
        "start_line": 56,
        "span_start": 146,
        "bug_name": "Compress_34",
        "type": "class",
        "end_line": 345
      }
    ]
  },
  "Compress_35": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Compress_35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
        "span_end": 594,
        "name": "TarUtils",
        "start_line": 36,
        "span_start": 594,
        "bug_name": "Compress_35",
        "type": "class",
        "end_line": 615
      },
      {
        "file": "/Users/danielding/WORK_DIR/Compress_35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
        "span_end": 606,
        "name": "TarUtils",
        "start_line": 36,
        "span_start": 602,
        "bug_name": "Compress_35",
        "type": "class",
        "end_line": 615
      }
    ]
  },
  "Compress_39": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Generic Archive utilities\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java",
        "span_end": 30,
        "name": "ArchiveUtils",
        "start_line": 29,
        "span_start": 31,
        "bug_name": "Compress_39",
        "type": "class",
        "end_line": 290
      },
      {
        "javadoc": "/**\n * Generic Archive utilities\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java",
        "span_end": 273,
        "name": "ArchiveUtils",
        "start_line": 29,
        "span_start": 273,
        "bug_name": "Compress_39",
        "type": "class",
        "end_line": 290
      }
    ]
  },
  "Compress_40": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Reads bits from an InputStream.\n * @since 1.10\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
        "span_end": 85,
        "name": "BitInputStream",
        "start_line": 31,
        "span_start": 85,
        "bug_name": "Compress_40",
        "type": "class",
        "end_line": 110
      },
      {
        "javadoc": "/**\n * Reads bits from an InputStream.\n * @since 1.10\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
        "span_end": 100,
        "name": "BitInputStream",
        "start_line": 31,
        "span_start": 98,
        "bug_name": "Compress_40",
        "type": "class",
        "end_line": 110
      },
      {
        "javadoc": "/**\n * Reads bits from an InputStream.\n * @since 1.10\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
        "span_end": 107,
        "name": "BitInputStream",
        "start_line": 31,
        "span_start": 108,
        "bug_name": "Compress_40",
        "type": "class",
        "end_line": 110
      }
    ]
  },
  "Compress_42": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Compress_42/src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java",
        "span_end": 34,
        "name": "UnixStat",
        "start_line": 25,
        "span_start": 35,
        "bug_name": "Compress_42",
        "type": "interface",
        "end_line": 67
      },
      {
        "javadoc": "/**\n * Extension that adds better handling of extra fields and provides\n * access to the internal and external file attributes.\n *\n * <p>The extra data is expected to follow the recommendation of\n * <a href=\"http://www.pkware.com/documents/casestudies/APPNOTE.TXT\">APPNOTE.TXT</a>:</p>\n * <ul>\n *   <li>the extra byte array consists of a sequence of extra fields</li>\n *   <li>each extra fields starts by a two byte header id followed by\n *   a two byte sequence holding the length of the remainder of\n *   data.</li>\n * </ul>\n *\n * <p>Any extra data that cannot be parsed by the rules above will be\n * consumed as \"unparseable\" extra data and treated differently by the\n * methods of this class.  Versions prior to Apache Commons Compress\n * 1.1 would have thrown an exception if any attempt was made to read\n * or write extra data not conforming to the recommendation.</p>\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_42/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
        "span_end": 297,
        "name": "ZipArchiveEntry",
        "start_line": 50,
        "span_start": 297,
        "bug_name": "Compress_42",
        "type": "class",
        "end_line": 860
      }
    ]
  },
  "Compress_43": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Reimplementation of {@link java.util.zip.ZipOutputStream\n * java.util.zip.ZipOutputStream} that does handle the extended\n * functionality of this package, especially internal/external file\n * attributes and extra fields with different layouts for local file\n * data and central directory entries.\n *\n * <p>This class will try to use {@link\n * java.nio.channels.SeekableByteChannel} when it knows that the\n * output is going to go to a file.</p>\n *\n * <p>If SeekableByteChannel cannot be used, this implementation will use\n * a Data Descriptor to store size and CRC information for {@link\n * #DEFLATED DEFLATED} entries, this means, you don't need to\n * calculate them yourself.  Unfortunately this is not possible for\n * the {@link #STORED STORED} method, here setting the CRC and\n * uncompressed size information is required before {@link\n * #putArchiveEntry(ArchiveEntry)} can be called.</p>\n *\n * <p>As of Apache Commons Compress 1.3 it transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries in most cases but explicit\n * control is provided via {@link #setUseZip64}.  If the stream can not\n * use SeekableByteChannel and you try to write a ZipArchiveEntry of\n * unknown size then Zip64 extensions will be disabled by default.</p>\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 1034,
        "name": "ZipArchiveOutputStream",
        "start_line": 83,
        "span_start": 1034,
        "bug_name": "Compress_43",
        "type": "class",
        "end_line": 1686
      },
      {
        "javadoc": "/**\n * Reimplementation of {@link java.util.zip.ZipOutputStream\n * java.util.zip.ZipOutputStream} that does handle the extended\n * functionality of this package, especially internal/external file\n * attributes and extra fields with different layouts for local file\n * data and central directory entries.\n *\n * <p>This class will try to use {@link\n * java.nio.channels.SeekableByteChannel} when it knows that the\n * output is going to go to a file.</p>\n *\n * <p>If SeekableByteChannel cannot be used, this implementation will use\n * a Data Descriptor to store size and CRC information for {@link\n * #DEFLATED DEFLATED} entries, this means, you don't need to\n * calculate them yourself.  Unfortunately this is not possible for\n * the {@link #STORED STORED} method, here setting the CRC and\n * uncompressed size information is required before {@link\n * #putArchiveEntry(ArchiveEntry)} can be called.</p>\n *\n * <p>As of Apache Commons Compress 1.3 it transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries in most cases but explicit\n * control is provided via {@link #setUseZip64}.  If the stream can not\n * use SeekableByteChannel and you try to write a ZipArchiveEntry of\n * unknown size then Zip64 extensions will be disabled by default.</p>\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 1075,
        "name": "ZipArchiveOutputStream",
        "start_line": 83,
        "span_start": 1075,
        "bug_name": "Compress_43",
        "type": "class",
        "end_line": 1686
      },
      {
        "javadoc": "/**\n * Reimplementation of {@link java.util.zip.ZipOutputStream\n * java.util.zip.ZipOutputStream} that does handle the extended\n * functionality of this package, especially internal/external file\n * attributes and extra fields with different layouts for local file\n * data and central directory entries.\n *\n * <p>This class will try to use {@link\n * java.nio.channels.SeekableByteChannel} when it knows that the\n * output is going to go to a file.</p>\n *\n * <p>If SeekableByteChannel cannot be used, this implementation will use\n * a Data Descriptor to store size and CRC information for {@link\n * #DEFLATED DEFLATED} entries, this means, you don't need to\n * calculate them yourself.  Unfortunately this is not possible for\n * the {@link #STORED STORED} method, here setting the CRC and\n * uncompressed size information is required before {@link\n * #putArchiveEntry(ArchiveEntry)} can be called.</p>\n *\n * <p>As of Apache Commons Compress 1.3 it transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries in most cases but explicit\n * control is provided via {@link #setUseZip64}.  If the stream can not\n * use SeekableByteChannel and you try to write a ZipArchiveEntry of\n * unknown size then Zip64 extensions will be disabled by default.</p>\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 1171,
        "name": "ZipArchiveOutputStream",
        "start_line": 83,
        "span_start": 1171,
        "bug_name": "Compress_43",
        "type": "class",
        "end_line": 1686
      },
      {
        "javadoc": "/**\n * Reimplementation of {@link java.util.zip.ZipOutputStream\n * java.util.zip.ZipOutputStream} that does handle the extended\n * functionality of this package, especially internal/external file\n * attributes and extra fields with different layouts for local file\n * data and central directory entries.\n *\n * <p>This class will try to use {@link\n * java.nio.channels.SeekableByteChannel} when it knows that the\n * output is going to go to a file.</p>\n *\n * <p>If SeekableByteChannel cannot be used, this implementation will use\n * a Data Descriptor to store size and CRC information for {@link\n * #DEFLATED DEFLATED} entries, this means, you don't need to\n * calculate them yourself.  Unfortunately this is not possible for\n * the {@link #STORED STORED} method, here setting the CRC and\n * uncompressed size information is required before {@link\n * #putArchiveEntry(ArchiveEntry)} can be called.</p>\n *\n * <p>As of Apache Commons Compress 1.3 it transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries in most cases but explicit\n * control is provided via {@link #setUseZip64}.  If the stream can not\n * use SeekableByteChannel and you try to write a ZipArchiveEntry of\n * unknown size then Zip64 extensions will be disabled by default.</p>\n *\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 1493,
        "name": "ZipArchiveOutputStream",
        "start_line": 83,
        "span_start": 1492,
        "bug_name": "Compress_43",
        "type": "class",
        "end_line": 1686
      }
    ]
  },
  "Compress_47": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Implements an input stream that can read Zip archives.\n *\n * <p>As of Apache Commons Compress it transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries.</p>\n *\n * <p>The {@link ZipFile} class is preferred when reading from files\n * as {@link ZipArchiveInputStream} is limited by not being able to\n * read the central directory header before returning entries.  In\n * particular {@link ZipArchiveInputStream}</p>\n *\n * <ul>\n *\n *  <li>may return entries that are not part of the central directory\n *  at all and shouldn't be considered part of the archive.</li>\n *\n *  <li>may return several entries with the same name.</li>\n *\n *  <li>will not return internal or external attributes.</li>\n *\n *  <li>may return incomplete extra field data.</li>\n *\n *  <li>may return unknown sizes and CRC values for entries until the\n *  next entry has been reached if the archive uses the data\n *  descriptor feature.</li>\n *\n * </ul>\n *\n * @see ZipFile\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "span_end": 415,
        "name": "ZipArchiveInputStream",
        "start_line": 78,
        "span_start": 415,
        "bug_name": "Compress_47",
        "type": "class",
        "end_line": 1164
      },
      {
        "javadoc": "/**\n * Implements an input stream that can read Zip archives.\n *\n * <p>As of Apache Commons Compress it transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries.</p>\n *\n * <p>The {@link ZipFile} class is preferred when reading from files\n * as {@link ZipArchiveInputStream} is limited by not being able to\n * read the central directory header before returning entries.  In\n * particular {@link ZipArchiveInputStream}</p>\n *\n * <ul>\n *\n *  <li>may return entries that are not part of the central directory\n *  at all and shouldn't be considered part of the archive.</li>\n *\n *  <li>may return several entries with the same name.</li>\n *\n *  <li>will not return internal or external attributes.</li>\n *\n *  <li>may return incomplete extra field data.</li>\n *\n *  <li>may return unknown sizes and CRC values for entries until the\n *  next entry has been reached if the archive uses the data\n *  descriptor feature.</li>\n *\n * </ul>\n *\n * @see ZipFile\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "span_end": 439,
        "name": "ZipArchiveInputStream",
        "start_line": 78,
        "span_start": 440,
        "bug_name": "Compress_47",
        "type": "class",
        "end_line": 1164
      },
      {
        "javadoc": "/**\n * Implements an input stream that can read Zip archives.\n *\n * <p>As of Apache Commons Compress it transparently supports Zip64\n * extensions and thus individual entries and archives larger than 4\n * GB or with more than 65536 entries.</p>\n *\n * <p>The {@link ZipFile} class is preferred when reading from files\n * as {@link ZipArchiveInputStream} is limited by not being able to\n * read the central directory header before returning entries.  In\n * particular {@link ZipArchiveInputStream}</p>\n *\n * <ul>\n *\n *  <li>may return entries that are not part of the central directory\n *  at all and shouldn't be considered part of the archive.</li>\n *\n *  <li>may return several entries with the same name.</li>\n *\n *  <li>will not return internal or external attributes.</li>\n *\n *  <li>may return incomplete extra field data.</li>\n *\n *  <li>may return unknown sizes and CRC values for entries until the\n *  next entry has been reached if the archive uses the data\n *  descriptor feature.</li>\n *\n * </ul>\n *\n * @see ZipFile\n * @NotThreadSafe\n */\n",
        "file": "/Users/danielding/WORK_DIR/Compress_47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "span_end": 808,
        "name": "ZipArchiveInputStream",
        "start_line": 78,
        "span_start": 809,
        "bug_name": "Compress_47",
        "type": "class",
        "end_line": 1164
      }
    ]
  },
  "Csv_7": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Parses CSV files according to the specified format.\n *\n * Because CSV appears in many different dialects, the parser supports many formats by allowing the\n * specification of a {@link CSVFormat}.\n *\n * The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.\n *\n * <h2>Creating instances</h2>\n * <p>\n * There are several static factory methods that can be used to create instances for various types of resources:\n * </p>\n * <ul>\n *     <li>{@link #parse(java.io.File, CSVFormat)}</li>\n *     <li>{@link #parse(String, CSVFormat)}</li>\n *     <li>{@link #parse(java.net.URL, java.nio.charset.Charset, CSVFormat)}</li>\n * </ul>\n * <p>\n * Alternatively parsers can also be created by passing a {@link Reader} directly to the sole constructor.\n *\n * For those who like fluent APIs, parsers can be created using {@link CSVFormat#parse(java.io.Reader)} as a shortcut:\n * </p>\n * <pre>\n * for(CSVRecord record : CSVFormat.EXCEL.parse(in)) {\n *     ...\n * }\n * </pre>\n *\n * <h2>Parsing record wise</h2>\n * <p>\n * To parse a CSV input from a file, you write:\n * </p>\n *\n * <pre>\n * File csvData = new File(&quot;/path/to/csv&quot;);\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * This will read the parse the contents of the file using the\n * <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format.\n * </p>\n *\n * <p>\n * To parse CSV input in a format like Excel, you write:\n * </p>\n *\n * <pre>\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * If the predefined formats don't match the format at hands, custom formats can be defined. More information about\n * customising CSVFormats is available in {@link CSVFormat CSVFormat JavaDoc}.\n * </p>\n *\n * <h2>Parsing into memory</h2>\n * <p>\n * If parsing record wise is not desired, the contents of the input can be read completely into memory.\n * </p>\n *\n * <pre>\n * Reader in = new StringReader(&quot;a;b\\nc;d&quot;);\n * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);\n * List&lt;CSVRecord&gt; list = parser.getRecords();\n * </pre>\n *\n * <p>\n * There are two constraints that have to be kept in mind:\n * </p>\n *\n * <ol>\n *     <li>Parsing into memory starts at the current position of the parser. If you have already parsed records from\n *     the input, those records will not end up in the in memory representation of your CSV data.</li>\n *     <li>Parsing into memory may consume a lot of system resources depending on the input. For example if you're\n *     parsing a 150MB file of CSV data the contents will be read completely into memory.</li>\n * </ol>\n *\n * <h2>Notes</h2>\n * <p>\n * Internal parser state is completely covered by the format and the reader-state.\n * </p>\n *\n * @version $Id$\n *\n * @see <a href=\"package-summary.html\">package documentation for more details</a>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Csv_7/src/main/java/org/apache/commons/csv/CSVParser.java",
        "span_end": 370,
        "name": "CSVParser",
        "start_line": 132,
        "span_start": 371,
        "bug_name": "Csv_7",
        "type": "class",
        "end_line": 489
      }
    ]
  },
  "Csv_8": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Specifies the format of a CSV file and parses input.\n *\n * <h2>Using predefined formats</h2>\n *\n * <p>\n * You can use one of the predefined formats:\n * </p>\n *\n * <ul>\n *      <li>{@link #DEFAULT}</li>\n *      <li>{@link #EXCEL}</li>\n *      <li>{@link #MYSQL}</li>\n *      <li>{@link #RFC4180}</li>\n *      <li>{@link #TDF}</li>\n * </ul>\n *\n * <p>\n * For example:\n * </p>\n *\n * <pre>\n * CSVParser parser = CSVFormat.EXCEL.parse(reader);\n * </pre>\n *\n * <p>\n * The {@link CSVRecord} provides static methods to parse other input types, for example:\n * </p>\n *\n * <pre>CSVParser parser = CSVFormat.parseFile(file, CSVFormat.EXCEL);</pre>\n *\n * <h2>Defining formats</h2>\n *\n * <p>\n * You can extend a format by calling the {@code with} methods. For example:\n * </p>\n *\n * <pre>\n * CSVFormat.EXCEL\n *   .withNullString(&quot;N/A&quot;)\n *   .withIgnoreSurroundingSpaces(true);\n * </pre>\n *\n * <h2>Defining column names</h2>\n *\n * <p>\n * To define the column names you want to use to access records, write:\n * </p>\n *\n * <pre>\n * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;);\n * </pre>\n *\n * <p>\n * Calling {@link #withHeader(String...)} let's you use the given names to address values in a {@link CSVRecord}, and\n * assumes that your CSV source does not contain a first record that also defines column names.\n *\n * If it does, then you are overriding this metadata with your names and you should skip the first record by calling\n * {@link #withSkipHeaderRecord(boolean)} with {@code true}.\n * </p>\n *\n * <h2>Parsing</h2>\n *\n * <p>\n * You can use a format directly to parse a reader. For example, to parse an Excel file with columns header, write:\n * </p>\n *\n * <pre>\n * Reader in = ...;\n * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;).parse(in);\n * </pre>\n *\n * <p>\n * For other input types, like resources, files, and URLs, use the static methods on {@link CSVParser}.\n * </p>\n *\n * <h2>Referencing columns safely</h2>\n *\n * <p>\n * If your source contains a header record, you can simplify your code and safely reference columns,\n * by using {@link #withHeader(String...)} with no arguments:\n * </p>\n *\n * <pre>\n * CSVFormat.EXCEL.withHeader();\n * </pre>\n *\n * <p>\n * This causes the parser to read the first record and use its values as column names.\n *\n * Then, call one of the {@link CSVRecord} get method that takes a String column name argument:\n * </p>\n *\n * <pre>\n * String value = record.get(&quot;Col1&quot;);\n * </pre>\n *\n * <p>\n * This makes your code impervious to changes in column order in the CSV file.\n * </p>\n *\n * <h2>Notes</h2>\n *\n * <p>\n * This class is immutable.\n * </p>\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Csv_8/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "span_end": 315,
        "name": "CSVFormat",
        "start_line": 145,
        "span_start": 316,
        "bug_name": "Csv_8",
        "type": "class",
        "end_line": 904
      },
      {
        "javadoc": "/**\n * Specifies the format of a CSV file and parses input.\n *\n * <h2>Using predefined formats</h2>\n *\n * <p>\n * You can use one of the predefined formats:\n * </p>\n *\n * <ul>\n *      <li>{@link #DEFAULT}</li>\n *      <li>{@link #EXCEL}</li>\n *      <li>{@link #MYSQL}</li>\n *      <li>{@link #RFC4180}</li>\n *      <li>{@link #TDF}</li>\n * </ul>\n *\n * <p>\n * For example:\n * </p>\n *\n * <pre>\n * CSVParser parser = CSVFormat.EXCEL.parse(reader);\n * </pre>\n *\n * <p>\n * The {@link CSVRecord} provides static methods to parse other input types, for example:\n * </p>\n *\n * <pre>CSVParser parser = CSVFormat.parseFile(file, CSVFormat.EXCEL);</pre>\n *\n * <h2>Defining formats</h2>\n *\n * <p>\n * You can extend a format by calling the {@code with} methods. For example:\n * </p>\n *\n * <pre>\n * CSVFormat.EXCEL\n *   .withNullString(&quot;N/A&quot;)\n *   .withIgnoreSurroundingSpaces(true);\n * </pre>\n *\n * <h2>Defining column names</h2>\n *\n * <p>\n * To define the column names you want to use to access records, write:\n * </p>\n *\n * <pre>\n * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;);\n * </pre>\n *\n * <p>\n * Calling {@link #withHeader(String...)} let's you use the given names to address values in a {@link CSVRecord}, and\n * assumes that your CSV source does not contain a first record that also defines column names.\n *\n * If it does, then you are overriding this metadata with your names and you should skip the first record by calling\n * {@link #withSkipHeaderRecord(boolean)} with {@code true}.\n * </p>\n *\n * <h2>Parsing</h2>\n *\n * <p>\n * You can use a format directly to parse a reader. For example, to parse an Excel file with columns header, write:\n * </p>\n *\n * <pre>\n * Reader in = ...;\n * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;).parse(in);\n * </pre>\n *\n * <p>\n * For other input types, like resources, files, and URLs, use the static methods on {@link CSVParser}.\n * </p>\n *\n * <h2>Referencing columns safely</h2>\n *\n * <p>\n * If your source contains a header record, you can simplify your code and safely reference columns,\n * by using {@link #withHeader(String...)} with no arguments:\n * </p>\n *\n * <pre>\n * CSVFormat.EXCEL.withHeader();\n * </pre>\n *\n * <p>\n * This causes the parser to read the first record and use its values as column names.\n *\n * Then, call one of the {@link CSVRecord} get method that takes a String column name argument:\n * </p>\n *\n * <pre>\n * String value = record.get(&quot;Col1&quot;);\n * </pre>\n *\n * <p>\n * This makes your code impervious to changes in column order in the CSV file.\n * </p>\n *\n * <h2>Notes</h2>\n *\n * <p>\n * This class is immutable.\n * </p>\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Csv_8/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "span_end": 671,
        "name": "CSVFormat",
        "start_line": 145,
        "span_start": 665,
        "bug_name": "Csv_8",
        "type": "class",
        "end_line": 904
      }
    ]
  },
  "Csv_13": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Specifies the format of a CSV file and parses input.\n *\n * <h2>Using predefined formats</h2>\n *\n * <p>\n * You can use one of the predefined formats:\n * </p>\n *\n * <ul>\n * <li>{@link #DEFAULT}</li>\n * <li>{@link #EXCEL}</li>\n * <li>{@link #MYSQL}</li>\n * <li>{@link #RFC4180}</li>\n * <li>{@link #TDF}</li>\n * </ul>\n *\n * <p>\n * For example:\n * </p>\n *\n * <pre>\n * CSVParser parser = CSVFormat.EXCEL.parse(reader);\n * </pre>\n *\n * <p>\n * The {@link CSVParser} provides static methods to parse other input types, for example:\n * </p>\n *\n * <pre>\n * CSVParser parser = CSVParser.parse(file, StandardCharsets.US_ASCII, CSVFormat.EXCEL);\n * </pre>\n *\n * <h2>Defining formats</h2>\n *\n * <p>\n * You can extend a format by calling the {@code with} methods. For example:\n * </p>\n *\n * <pre>\n * CSVFormat.EXCEL.withNullString(&quot;N/A&quot;).withIgnoreSurroundingSpaces(true);\n * </pre>\n *\n * <h2>Defining column names</h2>\n *\n * <p>\n * To define the column names you want to use to access records, write:\n * </p>\n *\n * <pre>\n * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;);\n * </pre>\n *\n * <p>\n * Calling {@link #withHeader(String...)} let's you use the given names to address values in a {@link CSVRecord}, and\n * assumes that your CSV source does not contain a first record that also defines column names.\n *\n * If it does, then you are overriding this metadata with your names and you should skip the first record by calling\n * {@link #withSkipHeaderRecord(boolean)} with {@code true}.\n * </p>\n *\n * <h2>Parsing</h2>\n *\n * <p>\n * You can use a format directly to parse a reader. For example, to parse an Excel file with columns header, write:\n * </p>\n *\n * <pre>\n * Reader in = ...;\n * CSVFormat.EXCEL.withHeader(&quot;Col1&quot;, &quot;Col2&quot;, &quot;Col3&quot;).parse(in);\n * </pre>\n *\n * <p>\n * For other input types, like resources, files, and URLs, use the static methods on {@link CSVParser}.\n * </p>\n *\n * <h2>Referencing columns safely</h2>\n *\n * <p>\n * If your source contains a header record, you can simplify your code and safely reference columns, by using\n * {@link #withHeader(String...)} with no arguments:\n * </p>\n *\n * <pre>\n * CSVFormat.EXCEL.withHeader();\n * </pre>\n *\n * <p>\n * This causes the parser to read the first record and use its values as column names.\n *\n * Then, call one of the {@link CSVRecord} get method that takes a String column name argument:\n * </p>\n *\n * <pre>\n * String value = record.get(&quot;Col1&quot;);\n * </pre>\n *\n * <p>\n * This makes your code impervious to changes in column order in the CSV file.\n * </p>\n *\n * <h2>Notes</h2>\n *\n * <p>\n * This class is immutable.\n * </p>\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Csv_13/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "span_end": 319,
        "name": "CSVFormat",
        "start_line": 148,
        "span_start": 319,
        "bug_name": "Csv_13",
        "type": "class",
        "end_line": 1290
      },
      {
        "javadoc": "/**\n * Prints values in a CSV format.\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Csv_13/src/main/java/org/apache/commons/csv/CSVPrinter.java",
        "span_end": 139,
        "name": "CSVPrinter",
        "start_line": 36,
        "span_start": 139,
        "bug_name": "Csv_13",
        "type": "class",
        "end_line": 520
      }
    ]
  },
  "Csv_16": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Parses CSV files according to the specified format.\n *\n * Because CSV appears in many different dialects, the parser supports many formats by allowing the\n * specification of a {@link CSVFormat}.\n *\n * The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.\n *\n * <h2>Creating instances</h2>\n * <p>\n * There are several static factory methods that can be used to create instances for various types of resources:\n * </p>\n * <ul>\n *     <li>{@link #parse(java.io.File, Charset, CSVFormat)}</li>\n *     <li>{@link #parse(String, CSVFormat)}</li>\n *     <li>{@link #parse(java.net.URL, java.nio.charset.Charset, CSVFormat)}</li>\n * </ul>\n * <p>\n * Alternatively parsers can also be created by passing a {@link Reader} directly to the sole constructor.\n *\n * For those who like fluent APIs, parsers can be created using {@link CSVFormat#parse(java.io.Reader)} as a shortcut:\n * </p>\n * <pre>\n * for(CSVRecord record : CSVFormat.EXCEL.parse(in)) {\n *     ...\n * }\n * </pre>\n *\n * <h2>Parsing record wise</h2>\n * <p>\n * To parse a CSV input from a file, you write:\n * </p>\n *\n * <pre>\n * File csvData = new File(&quot;/path/to/csv&quot;);\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * This will read the parse the contents of the file using the\n * <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format.\n * </p>\n *\n * <p>\n * To parse CSV input in a format like Excel, you write:\n * </p>\n *\n * <pre>\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * If the predefined formats don't match the format at hands, custom formats can be defined. More information about\n * customising CSVFormats is available in {@link CSVFormat CSVFormat Javadoc}.\n * </p>\n *\n * <h2>Parsing into memory</h2>\n * <p>\n * If parsing record wise is not desired, the contents of the input can be read completely into memory.\n * </p>\n *\n * <pre>\n * Reader in = new StringReader(&quot;a;b\\nc;d&quot;);\n * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);\n * List&lt;CSVRecord&gt; list = parser.getRecords();\n * </pre>\n *\n * <p>\n * There are two constraints that have to be kept in mind:\n * </p>\n *\n * <ol>\n *     <li>Parsing into memory starts at the current position of the parser. If you have already parsed records from\n *     the input, those records will not end up in the in memory representation of your CSV data.</li>\n *     <li>Parsing into memory may consume a lot of system resources depending on the input. For example if you're\n *     parsing a 150MB file of CSV data the contents will be read completely into memory.</li>\n * </ol>\n *\n * <h2>Notes</h2>\n * <p>\n * Internal parser state is completely covered by the format and the reader-state.\n * </p>\n *\n * @see <a href=\"package-summary.html\">package documentation for more details</a>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Csv_16/src/main/java/org/apache/commons/csv/CSVParser.java",
        "span_end": 288,
        "name": "CSVParser",
        "start_line": 134,
        "span_start": 289,
        "bug_name": "Csv_16",
        "type": "class",
        "end_line": 625
      },
      {
        "javadoc": "/**\n * Parses CSV files according to the specified format.\n *\n * Because CSV appears in many different dialects, the parser supports many formats by allowing the\n * specification of a {@link CSVFormat}.\n *\n * The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.\n *\n * <h2>Creating instances</h2>\n * <p>\n * There are several static factory methods that can be used to create instances for various types of resources:\n * </p>\n * <ul>\n *     <li>{@link #parse(java.io.File, Charset, CSVFormat)}</li>\n *     <li>{@link #parse(String, CSVFormat)}</li>\n *     <li>{@link #parse(java.net.URL, java.nio.charset.Charset, CSVFormat)}</li>\n * </ul>\n * <p>\n * Alternatively parsers can also be created by passing a {@link Reader} directly to the sole constructor.\n *\n * For those who like fluent APIs, parsers can be created using {@link CSVFormat#parse(java.io.Reader)} as a shortcut:\n * </p>\n * <pre>\n * for(CSVRecord record : CSVFormat.EXCEL.parse(in)) {\n *     ...\n * }\n * </pre>\n *\n * <h2>Parsing record wise</h2>\n * <p>\n * To parse a CSV input from a file, you write:\n * </p>\n *\n * <pre>\n * File csvData = new File(&quot;/path/to/csv&quot;);\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * This will read the parse the contents of the file using the\n * <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format.\n * </p>\n *\n * <p>\n * To parse CSV input in a format like Excel, you write:\n * </p>\n *\n * <pre>\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * If the predefined formats don't match the format at hands, custom formats can be defined. More information about\n * customising CSVFormats is available in {@link CSVFormat CSVFormat Javadoc}.\n * </p>\n *\n * <h2>Parsing into memory</h2>\n * <p>\n * If parsing record wise is not desired, the contents of the input can be read completely into memory.\n * </p>\n *\n * <pre>\n * Reader in = new StringReader(&quot;a;b\\nc;d&quot;);\n * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);\n * List&lt;CSVRecord&gt; list = parser.getRecords();\n * </pre>\n *\n * <p>\n * There are two constraints that have to be kept in mind:\n * </p>\n *\n * <ol>\n *     <li>Parsing into memory starts at the current position of the parser. If you have already parsed records from\n *     the input, those records will not end up in the in memory representation of your CSV data.</li>\n *     <li>Parsing into memory may consume a lot of system resources depending on the input. For example if you're\n *     parsing a 150MB file of CSV data the contents will be read completely into memory.</li>\n * </ol>\n *\n * <h2>Notes</h2>\n * <p>\n * Internal parser state is completely covered by the format and the reader-state.\n * </p>\n *\n * @see <a href=\"package-summary.html\">package documentation for more details</a>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Csv_16/src/main/java/org/apache/commons/csv/CSVParser.java",
        "span_end": 356,
        "name": "CSVParser",
        "start_line": 134,
        "span_start": 357,
        "bug_name": "Csv_16",
        "type": "class",
        "end_line": 625
      },
      {
        "javadoc": "/**\n * Parses CSV files according to the specified format.\n *\n * Because CSV appears in many different dialects, the parser supports many formats by allowing the\n * specification of a {@link CSVFormat}.\n *\n * The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.\n *\n * <h2>Creating instances</h2>\n * <p>\n * There are several static factory methods that can be used to create instances for various types of resources:\n * </p>\n * <ul>\n *     <li>{@link #parse(java.io.File, Charset, CSVFormat)}</li>\n *     <li>{@link #parse(String, CSVFormat)}</li>\n *     <li>{@link #parse(java.net.URL, java.nio.charset.Charset, CSVFormat)}</li>\n * </ul>\n * <p>\n * Alternatively parsers can also be created by passing a {@link Reader} directly to the sole constructor.\n *\n * For those who like fluent APIs, parsers can be created using {@link CSVFormat#parse(java.io.Reader)} as a shortcut:\n * </p>\n * <pre>\n * for(CSVRecord record : CSVFormat.EXCEL.parse(in)) {\n *     ...\n * }\n * </pre>\n *\n * <h2>Parsing record wise</h2>\n * <p>\n * To parse a CSV input from a file, you write:\n * </p>\n *\n * <pre>\n * File csvData = new File(&quot;/path/to/csv&quot;);\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * This will read the parse the contents of the file using the\n * <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format.\n * </p>\n *\n * <p>\n * To parse CSV input in a format like Excel, you write:\n * </p>\n *\n * <pre>\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * If the predefined formats don't match the format at hands, custom formats can be defined. More information about\n * customising CSVFormats is available in {@link CSVFormat CSVFormat Javadoc}.\n * </p>\n *\n * <h2>Parsing into memory</h2>\n * <p>\n * If parsing record wise is not desired, the contents of the input can be read completely into memory.\n * </p>\n *\n * <pre>\n * Reader in = new StringReader(&quot;a;b\\nc;d&quot;);\n * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);\n * List&lt;CSVRecord&gt; list = parser.getRecords();\n * </pre>\n *\n * <p>\n * There are two constraints that have to be kept in mind:\n * </p>\n *\n * <ol>\n *     <li>Parsing into memory starts at the current position of the parser. If you have already parsed records from\n *     the input, those records will not end up in the in memory representation of your CSV data.</li>\n *     <li>Parsing into memory may consume a lot of system resources depending on the input. For example if you're\n *     parsing a 150MB file of CSV data the contents will be read completely into memory.</li>\n * </ol>\n *\n * <h2>Notes</h2>\n * <p>\n * Internal parser state is completely covered by the format and the reader-state.\n * </p>\n *\n * @see <a href=\"package-summary.html\">package documentation for more details</a>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Csv_16/src/main/java/org/apache/commons/csv/CSVParser.java",
        "span_end": 523,
        "name": "CSVParser",
        "start_line": 134,
        "span_start": 523,
        "bug_name": "Csv_16",
        "type": "class",
        "end_line": 625
      },
      {
        "javadoc": "/**\n * Parses CSV files according to the specified format.\n *\n * Because CSV appears in many different dialects, the parser supports many formats by allowing the\n * specification of a {@link CSVFormat}.\n *\n * The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.\n *\n * <h2>Creating instances</h2>\n * <p>\n * There are several static factory methods that can be used to create instances for various types of resources:\n * </p>\n * <ul>\n *     <li>{@link #parse(java.io.File, Charset, CSVFormat)}</li>\n *     <li>{@link #parse(String, CSVFormat)}</li>\n *     <li>{@link #parse(java.net.URL, java.nio.charset.Charset, CSVFormat)}</li>\n * </ul>\n * <p>\n * Alternatively parsers can also be created by passing a {@link Reader} directly to the sole constructor.\n *\n * For those who like fluent APIs, parsers can be created using {@link CSVFormat#parse(java.io.Reader)} as a shortcut:\n * </p>\n * <pre>\n * for(CSVRecord record : CSVFormat.EXCEL.parse(in)) {\n *     ...\n * }\n * </pre>\n *\n * <h2>Parsing record wise</h2>\n * <p>\n * To parse a CSV input from a file, you write:\n * </p>\n *\n * <pre>\n * File csvData = new File(&quot;/path/to/csv&quot;);\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * This will read the parse the contents of the file using the\n * <a href=\"http://tools.ietf.org/html/rfc4180\" target=\"_blank\">RFC 4180</a> format.\n * </p>\n *\n * <p>\n * To parse CSV input in a format like Excel, you write:\n * </p>\n *\n * <pre>\n * CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);\n * for (CSVRecord csvRecord : parser) {\n *     ...\n * }\n * </pre>\n *\n * <p>\n * If the predefined formats don't match the format at hands, custom formats can be defined. More information about\n * customising CSVFormats is available in {@link CSVFormat CSVFormat Javadoc}.\n * </p>\n *\n * <h2>Parsing into memory</h2>\n * <p>\n * If parsing record wise is not desired, the contents of the input can be read completely into memory.\n * </p>\n *\n * <pre>\n * Reader in = new StringReader(&quot;a;b\\nc;d&quot;);\n * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);\n * List&lt;CSVRecord&gt; list = parser.getRecords();\n * </pre>\n *\n * <p>\n * There are two constraints that have to be kept in mind:\n * </p>\n *\n * <ol>\n *     <li>Parsing into memory starts at the current position of the parser. If you have already parsed records from\n *     the input, those records will not end up in the in memory representation of your CSV data.</li>\n *     <li>Parsing into memory may consume a lot of system resources depending on the input. For example if you're\n *     parsing a 150MB file of CSV data the contents will be read completely into memory.</li>\n * </ol>\n *\n * <h2>Notes</h2>\n * <p>\n * Internal parser state is completely covered by the format and the reader-state.\n * </p>\n *\n * @see <a href=\"package-summary.html\">package documentation for more details</a>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Csv_16/src/main/java/org/apache/commons/csv/CSVParser.java",
        "span_end": 571,
        "name": "CSVParser",
        "start_line": 134,
        "span_start": 571,
        "bug_name": "Csv_16",
        "type": "class",
        "end_line": 625
      }
    ]
  },
  "Gson_1": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A static factory class used to construct the \"TypeInfo\" objects.\n *\n * @author Inderjeet Singh\n * @author Joel Leitch\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_1/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "span_end": 94,
        "name": "TypeInfoFactory",
        "start_line": 32,
        "span_start": 93,
        "bug_name": "Gson_1",
        "type": "class",
        "end_line": 135
      },
      {
        "javadoc": "/**\n * A static factory class used to construct the \"TypeInfo\" objects.\n *\n * @author Inderjeet Singh\n * @author Joel Leitch\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_1/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "span_end": 113,
        "name": "TypeInfoFactory",
        "start_line": 32,
        "span_start": 109,
        "bug_name": "Gson_1",
        "type": "class",
        "end_line": 135
      }
    ]
  },
  "Gson_3": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Returns a function that can construct an instance of a requested type.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
        "span_end": 175,
        "name": "ConstructorConstructor",
        "start_line": 44,
        "span_start": 175,
        "bug_name": "Gson_3",
        "type": "class",
        "end_line": 220
      }
    ]
  },
  "Gson_4": {
    "bug_count": 12,
    "entries": [
      {
        "javadoc": "/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "span_end": 576,
        "name": "JsonReader",
        "start_line": 190,
        "span_start": 574,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 1623
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 625,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 622,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      },
      {
        "javadoc": "/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "span_end": 587,
        "name": "JsonReader",
        "start_line": 190,
        "span_start": 585,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 1623
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 325,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 325,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 418,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 418,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 435,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 435,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 454,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 454,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 466,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 466,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 483,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 483,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 495,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 495,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 518,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 518,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 613,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 613,
        "bug_name": "Gson_4",
        "type": "class",
        "end_line": 648
      }
    ]
  },
  "Gson_7": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_7/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "span_end": 955,
        "name": "JsonReader",
        "start_line": 190,
        "span_start": 954,
        "bug_name": "Gson_7",
        "type": "class",
        "end_line": 1617
      },
      {
        "javadoc": "/**\n * Reads a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value as a stream of tokens. This stream includes both literal\n * values (strings, numbers, booleans, and nulls) as well as the begin and\n * end delimiters of objects and arrays. The tokens are traversed in\n * depth-first order, the same order that they appear in the JSON document.\n * Within JSON objects, name/value pairs are represented by a single token.\n *\n * <h3>Parsing JSON</h3>\n * To create a recursive descent parser for your own JSON streams, first create\n * an entry point method that creates a {@code JsonReader}.\n *\n * <p>Next, create handler methods for each structure in your JSON text. You'll\n * need a method for each object type and for each array type.\n * <ul>\n *   <li>Within <strong>array handling</strong> methods, first call {@link\n *       #beginArray} to consume the array's opening bracket. Then create a\n *       while loop that accumulates values, terminating when {@link #hasNext}\n *       is false. Finally, read the array's closing bracket by calling {@link\n *       #endArray}.\n *   <li>Within <strong>object handling</strong> methods, first call {@link\n *       #beginObject} to consume the object's opening brace. Then create a\n *       while loop that assigns values to local variables based on their name.\n *       This loop should terminate when {@link #hasNext} is false. Finally,\n *       read the object's closing brace by calling {@link #endObject}.\n * </ul>\n * <p>When a nested object or array is encountered, delegate to the\n * corresponding handler method.\n *\n * <p>When an unknown name is encountered, strict parsers should fail with an\n * exception. Lenient parsers should call {@link #skipValue()} to recursively\n * skip the value's nested tokens, which may otherwise conflict.\n *\n * <p>If a value may be null, you should first check using {@link #peek()}.\n * Null literals can be consumed using either {@link #nextNull()} or {@link\n * #skipValue()}.\n *\n * <h3>Example</h3>\n * Suppose we'd like to parse a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I read a JSON stream in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonReader!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code implements the parser for the above structure: <pre>   {@code\n *\n *   public List<Message> readJsonStream(InputStream in) throws IOException {\n *     JsonReader reader = new JsonReader(new InputStreamReader(in, \"UTF-8\"));\n *     try {\n *       return readMessagesArray(reader);\n *     } finally {\n *       reader.close();\n *     }\n *   }\n *\n *   public List<Message> readMessagesArray(JsonReader reader) throws IOException {\n *     List<Message> messages = new ArrayList<Message>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       messages.add(readMessage(reader));\n *     }\n *     reader.endArray();\n *     return messages;\n *   }\n *\n *   public Message readMessage(JsonReader reader) throws IOException {\n *     long id = -1;\n *     String text = null;\n *     User user = null;\n *     List<Double> geo = null;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"id\")) {\n *         id = reader.nextLong();\n *       } else if (name.equals(\"text\")) {\n *         text = reader.nextString();\n *       } else if (name.equals(\"geo\") && reader.peek() != JsonToken.NULL) {\n *         geo = readDoublesArray(reader);\n *       } else if (name.equals(\"user\")) {\n *         user = readUser(reader);\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new Message(id, text, user, geo);\n *   }\n *\n *   public List<Double> readDoublesArray(JsonReader reader) throws IOException {\n *     List<Double> doubles = new ArrayList<Double>();\n *\n *     reader.beginArray();\n *     while (reader.hasNext()) {\n *       doubles.add(reader.nextDouble());\n *     }\n *     reader.endArray();\n *     return doubles;\n *   }\n *\n *   public User readUser(JsonReader reader) throws IOException {\n *     String username = null;\n *     int followersCount = -1;\n *\n *     reader.beginObject();\n *     while (reader.hasNext()) {\n *       String name = reader.nextName();\n *       if (name.equals(\"name\")) {\n *         username = reader.nextString();\n *       } else if (name.equals(\"followers_count\")) {\n *         followersCount = reader.nextInt();\n *       } else {\n *         reader.skipValue();\n *       }\n *     }\n *     reader.endObject();\n *     return new User(username, followersCount);\n *   }}</pre>\n *\n * <h3>Number Handling</h3>\n * This reader permits numeric values to be read as strings and string values to\n * be read as numbers. For example, both elements of the JSON array {@code\n * [1, \"1\"]} may be read using either {@link #nextInt} or {@link #nextString}.\n * This behavior is intended to prevent lossy numeric conversions: double is\n * JavaScript's only numeric type and very large values like {@code\n * 9007199254740993} cannot be represented exactly on that platform. To minimize\n * precision loss, extremely large values should be written and read as strings\n * in JSON.\n *\n * <a name=\"nonexecuteprefix\"/><h3>Non-Execute Prefix</h3>\n * Web servers that serve private data using JSON may be vulnerable to <a\n * href=\"http://en.wikipedia.org/wiki/JSON#Cross-site_request_forgery\">Cross-site\n * request forgery</a> attacks. In such an attack, a malicious site gains access\n * to a private JSON file by executing it with an HTML {@code <script>} tag.\n *\n * <p>Prefixing JSON files with <code>\")]}'\\n\"</code> makes them non-executable\n * by {@code <script>} tags, disarming the attack. Since the prefix is malformed\n * JSON, strict parsing fails when it is encountered. This class permits the\n * non-execute prefix when {@link #setLenient(boolean) lenient parsing} is\n * enabled.\n *\n * <p>Each {@code JsonReader} may be used to read a single JSON stream. Instances\n * of this class are not thread safe.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_7/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "span_end": 1183,
        "name": "JsonReader",
        "start_line": 190,
        "span_start": 1182,
        "bug_name": "Gson_7",
        "type": "class",
        "end_line": 1617
      }
    ]
  },
  "Gson_8": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Do sneaky things to allocate objects without invoking their constructors.\n *\n * @author Joel Leitch\n * @author Jesse Wilson\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
        "span_end": 47,
        "name": "UnsafeAllocator",
        "start_line": 30,
        "span_start": 48,
        "bug_name": "Gson_8",
        "type": "class",
        "end_line": 110
      },
      {
        "javadoc": "/**\n * Do sneaky things to allocate objects without invoking their constructors.\n *\n * @author Joel Leitch\n * @author Jesse Wilson\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
        "span_end": 70,
        "name": "UnsafeAllocator",
        "start_line": 30,
        "span_start": 71,
        "bug_name": "Gson_8",
        "type": "class",
        "end_line": 110
      },
      {
        "javadoc": "/**\n * Do sneaky things to allocate objects without invoking their constructors.\n *\n * @author Joel Leitch\n * @author Jesse Wilson\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
        "span_end": 89,
        "name": "UnsafeAllocator",
        "start_line": 30,
        "span_start": 90,
        "bug_name": "Gson_8",
        "type": "class",
        "end_line": 110
      },
      {
        "javadoc": "/**\n * Do sneaky things to allocate objects without invoking their constructors.\n *\n * @author Joel Leitch\n * @author Jesse Wilson\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
        "span_end": 110,
        "name": "UnsafeAllocator",
        "start_line": 30,
        "span_start": 110,
        "bug_name": "Gson_8",
        "type": "class",
        "end_line": 110
      }
    ]
  },
  "Gson_9": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * This writer creates a JsonElement.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_9/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java",
        "span_end": 161,
        "name": "JsonTreeWriter",
        "start_line": 33,
        "span_start": 162,
        "bug_name": "Gson_9",
        "type": "class",
        "end_line": 201
      },
      {
        "javadoc": "/**\n * Type adapters for basic types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_9/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
        "span_end": 168,
        "name": "TypeAdapters",
        "start_line": 63,
        "span_start": 165,
        "bug_name": "Gson_9",
        "type": "class",
        "end_line": 928
      },
      {
        "javadoc": "/**\n * Writes a JSON (<a href=\"http://www.ietf.org/rfc/rfc7159.txt\">RFC 7159</a>)\n * encoded value to a stream, one token at a time. The stream includes both\n * literal values (strings, numbers, booleans and nulls) as well as the begin\n * and end delimiters of objects and arrays.\n *\n * <h3>Encoding JSON</h3>\n * To encode your data as JSON, create a new {@code JsonWriter}. Each JSON\n * document must contain one top-level array or object. Call methods on the\n * writer as you walk the structure's contents, nesting arrays and objects as\n * necessary:\n * <ul>\n *   <li>To write <strong>arrays</strong>, first call {@link #beginArray()}.\n *       Write each of the array's elements with the appropriate {@link #value}\n *       methods or by nesting other arrays and objects. Finally close the array\n *       using {@link #endArray()}.\n *   <li>To write <strong>objects</strong>, first call {@link #beginObject()}.\n *       Write each of the object's properties by alternating calls to\n *       {@link #name} with the property's value. Write property values with the\n *       appropriate {@link #value} method or by nesting other objects or arrays.\n *       Finally close the object using {@link #endObject()}.\n * </ul>\n *\n * <h3>Example</h3>\n * Suppose we'd like to encode a stream of messages such as the following: <pre> {@code\n * [\n *   {\n *     \"id\": 912345678901,\n *     \"text\": \"How do I stream JSON in Java?\",\n *     \"geo\": null,\n *     \"user\": {\n *       \"name\": \"json_newb\",\n *       \"followers_count\": 41\n *      }\n *   },\n *   {\n *     \"id\": 912345678902,\n *     \"text\": \"@json_newb just use JsonWriter!\",\n *     \"geo\": [50.454722, -104.606667],\n *     \"user\": {\n *       \"name\": \"jesse\",\n *       \"followers_count\": 2\n *     }\n *   }\n * ]}</pre>\n * This code encodes the above structure: <pre>   {@code\n *   public void writeJsonStream(OutputStream out, List<Message> messages) throws IOException {\n *     JsonWriter writer = new JsonWriter(new OutputStreamWriter(out, \"UTF-8\"));\n *     writer.setIndent(\"    \");\n *     writeMessagesArray(writer, messages);\n *     writer.close();\n *   }\n *\n *   public void writeMessagesArray(JsonWriter writer, List<Message> messages) throws IOException {\n *     writer.beginArray();\n *     for (Message message : messages) {\n *       writeMessage(writer, message);\n *     }\n *     writer.endArray();\n *   }\n *\n *   public void writeMessage(JsonWriter writer, Message message) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"id\").value(message.getId());\n *     writer.name(\"text\").value(message.getText());\n *     if (message.getGeo() != null) {\n *       writer.name(\"geo\");\n *       writeDoublesArray(writer, message.getGeo());\n *     } else {\n *       writer.name(\"geo\").nullValue();\n *     }\n *     writer.name(\"user\");\n *     writeUser(writer, message.getUser());\n *     writer.endObject();\n *   }\n *\n *   public void writeUser(JsonWriter writer, User user) throws IOException {\n *     writer.beginObject();\n *     writer.name(\"name\").value(user.getName());\n *     writer.name(\"followers_count\").value(user.getFollowersCount());\n *     writer.endObject();\n *   }\n *\n *   public void writeDoublesArray(JsonWriter writer, List<Double> doubles) throws IOException {\n *     writer.beginArray();\n *     for (Double value : doubles) {\n *       writer.value(value);\n *     }\n *     writer.endArray();\n *   }}</pre>\n *\n * <p>Each {@code JsonWriter} may be used to write a single JSON stream.\n * Instances of this class are not thread safe. Calls that would result in a\n * malformed JSON string will fail with an {@link IllegalStateException}.\n *\n * @author Jesse Wilson\n * @since 1.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_9/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 475,
        "name": "JsonWriter",
        "start_line": 130,
        "span_start": 476,
        "bug_name": "Gson_9",
        "type": "class",
        "end_line": 650
      }
    ]
  },
  "Gson_14": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Static methods for working with types.\n *\n * @author Bob Lee\n * @author Jesse Wilson\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_14/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "span_end": 79,
        "name": "$Gson$Types",
        "start_line": 43,
        "span_start": 79,
        "bug_name": "Gson_14",
        "type": "class",
        "end_line": 591
      },
      {
        "javadoc": "/**\n * Static methods for working with types.\n *\n * @author Bob Lee\n * @author Jesse Wilson\n */\n",
        "file": "/Users/danielding/WORK_DIR/Gson_14/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "span_end": 90,
        "name": "$Gson$Types",
        "start_line": 43,
        "span_start": 90,
        "bug_name": "Gson_14",
        "type": "class",
        "end_line": 591
      }
    ]
  },
  "JacksonCore_1": {
    "bug_count": 3,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/JacksonCore_1/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java",
        "span_end": 295,
        "name": "NumberInput",
        "start_line": 5,
        "span_start": 295,
        "bug_name": "JacksonCore_1",
        "type": "class",
        "end_line": 308
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonCore_1/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java",
        "span_end": 305,
        "name": "NumberInput",
        "start_line": 5,
        "span_start": 305,
        "bug_name": "JacksonCore_1",
        "type": "class",
        "end_line": 308
      },
      {
        "javadoc": "/**\n *  TextBuffer is a class similar to {@link StringBuffer}, with\n *  following differences:\n * <ul>\n *   <li>TextBuffer uses segments character arrays, to avoid having\n *      to do additional array copies when array is not big enough.\n *      This means that only reallocating that is necessary is done only once:\n *      if and when caller\n *      wants to access contents in a linear array (char[], String).\n *     </li>\n *   <li>TextBuffer can also be initialized in \"shared mode\", in which\n *      it will just act as a wrapper to a single char array managed\n *      by another object (like parser that owns it)\n *     </li>\n *   <li>TextBuffer is not synchronized.\n *     </li>\n *  </ul>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_1/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java",
        "span_end": 394,
        "name": "TextBuffer",
        "start_line": 27,
        "span_start": 390,
        "bug_name": "JacksonCore_1",
        "type": "class",
        "end_line": 717
      }
    ]
  },
  "JacksonCore_2": {
    "bug_count": 8,
    "entries": [
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 951,
        "name": "ReaderBasedJsonParser",
        "start_line": 17,
        "span_start": 952,
        "bug_name": "JacksonCore_2",
        "type": "class",
        "end_line": 2027
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 1080,
        "name": "ReaderBasedJsonParser",
        "start_line": 17,
        "span_start": 1081,
        "bug_name": "JacksonCore_2",
        "type": "class",
        "end_line": 2027
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 1162,
        "name": "ReaderBasedJsonParser",
        "start_line": 17,
        "span_start": 1162,
        "bug_name": "JacksonCore_2",
        "type": "class",
        "end_line": 2027
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.InputStream} as the input source.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1243,
        "name": "UTF8StreamJsonParser",
        "start_line": 17,
        "span_start": 1244,
        "bug_name": "JacksonCore_2",
        "type": "class",
        "end_line": 3218
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.InputStream} as the input source.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1279,
        "name": "UTF8StreamJsonParser",
        "start_line": 17,
        "span_start": 1280,
        "bug_name": "JacksonCore_2",
        "type": "class",
        "end_line": 3218
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.InputStream} as the input source.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1406,
        "name": "UTF8StreamJsonParser",
        "start_line": 17,
        "span_start": 1407,
        "bug_name": "JacksonCore_2",
        "type": "class",
        "end_line": 3218
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.InputStream} as the input source.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1422,
        "name": "UTF8StreamJsonParser",
        "start_line": 17,
        "span_start": 1421,
        "bug_name": "JacksonCore_2",
        "type": "class",
        "end_line": 3218
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.InputStream} as the input source.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 2577,
        "name": "UTF8StreamJsonParser",
        "start_line": 17,
        "span_start": 2575,
        "bug_name": "JacksonCore_2",
        "type": "class",
        "end_line": 3218
      }
    ]
  },
  "JacksonCore_9": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n *  Intermediate base class used by all Jackson {@link JsonParser}\n *  implementations, but does not add any additional fields that depend\n *  on particular method of obtaining input.\n * <p>\n *  Note that 'minimal' here mostly refers to minimal number of fields\n *  (size) and functionality that is specific to certain types\n *  of parser implementations; but not necessarily to number of methods.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_9/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
        "span_end": 391,
        "name": "ParserMinimalBase",
        "start_line": 22,
        "span_start": 392,
        "bug_name": "JacksonCore_9",
        "type": "class",
        "end_line": 593
      },
      {
        "javadoc": "/**\n *  Intermediate base class used by all Jackson {@link JsonParser}\n *  implementations, but does not add any additional fields that depend\n *  on particular method of obtaining input.\n * <p>\n *  Note that 'minimal' here mostly refers to minimal number of fields\n *  (size) and functionality that is specific to certain types\n *  of parser implementations; but not necessarily to number of methods.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_9/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
        "span_end": 399,
        "name": "ParserMinimalBase",
        "start_line": 22,
        "span_start": 400,
        "bug_name": "JacksonCore_9",
        "type": "class",
        "end_line": 593
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_9/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 252,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 253,
        "bug_name": "JacksonCore_9",
        "type": "class",
        "end_line": 2302
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_9/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 265,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 266,
        "bug_name": "JacksonCore_9",
        "type": "class",
        "end_line": 2302
      },
      {
        "javadoc": "/**\n *  This is a concrete implementation of {@link JsonParser}, which is\n *  based on a {@link java.io.InputStream} as the input source.\n * <p>\n *  Note: non-final since version 2.3.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_9/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 304,
        "name": "UTF8StreamJsonParser",
        "start_line": 21,
        "span_start": 305,
        "bug_name": "JacksonCore_9",
        "type": "class",
        "end_line": 3617
      },
      {
        "javadoc": "/**\n *  This is a concrete implementation of {@link JsonParser}, which is\n *  based on a {@link java.io.InputStream} as the input source.\n * <p>\n *  Note: non-final since version 2.3.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_9/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 318,
        "name": "UTF8StreamJsonParser",
        "start_line": 21,
        "span_start": 319,
        "bug_name": "JacksonCore_9",
        "type": "class",
        "end_line": 3617
      }
    ]
  },
  "JacksonCore_10": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Replacement for <code>BytesToNameCanonicalizer</code> which aims at more localized\n * memory access due to flattening of name quad data.\n * Performance improvement modest for simple JSON document data binding (maybe 3%),\n * but should help more for larger symbol tables, or for binary formats like Smile.\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "span_end": 925,
        "name": "ByteQuadsCanonicalizer",
        "start_line": 17,
        "span_start": 925,
        "bug_name": "JacksonCore_10",
        "type": "class",
        "end_line": 1265
      },
      {
        "javadoc": "/**\n * Replacement for <code>BytesToNameCanonicalizer</code> which aims at more localized\n * memory access due to flattening of name quad data.\n * Performance improvement modest for simple JSON document data binding (maybe 3%),\n * but should help more for larger symbol tables, or for binary formats like Smile.\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "span_end": 984,
        "name": "ByteQuadsCanonicalizer",
        "start_line": 17,
        "span_start": 984,
        "bug_name": "JacksonCore_10",
        "type": "class",
        "end_line": 1265
      }
    ]
  },
  "JacksonCore_12": {
    "bug_count": 8,
    "entries": [
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 622,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 622,
        "bug_name": "JacksonCore_12",
        "type": "class",
        "end_line": 2733
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 634,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 630,
        "bug_name": "JacksonCore_12",
        "type": "class",
        "end_line": 2733
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 779,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 773,
        "bug_name": "JacksonCore_12",
        "type": "class",
        "end_line": 2733
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 861,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 851,
        "bug_name": "JacksonCore_12",
        "type": "class",
        "end_line": 2733
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 916,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 917,
        "bug_name": "JacksonCore_12",
        "type": "class",
        "end_line": 2733
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 966,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 967,
        "bug_name": "JacksonCore_12",
        "type": "class",
        "end_line": 2733
      },
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 2673,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 2671,
        "bug_name": "JacksonCore_12",
        "type": "class",
        "end_line": 2733
      },
      {
        "javadoc": "/**\n *  This is a concrete implementation of {@link JsonParser}, which is\n *  based on a {@link java.io.InputStream} as the input source.\n * <p>\n *  Note: non-final since version 2.3.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 3622,
        "name": "UTF8StreamJsonParser",
        "start_line": 21,
        "span_start": 3622,
        "bug_name": "JacksonCore_12",
        "type": "class",
        "end_line": 3664
      }
    ]
  },
  "JacksonCore_16": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n *  Helper class that can be used to sequence multiple physical\n *  {@link JsonParser}s to create a single logical sequence of\n *  tokens, as a single {@link JsonParser}.\n * <p>\n *  Fairly simple use of {@link JsonParserDelegate}: only need\n *  to override {@link #nextToken} to handle transition\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_16/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
        "span_end": 34,
        "name": "JsonParserSequence",
        "start_line": 16,
        "span_start": 35,
        "bug_name": "JacksonCore_16",
        "type": "class",
        "end_line": 152
      },
      {
        "javadoc": "/**\n *  Helper class that can be used to sequence multiple physical\n *  {@link JsonParser}s to create a single logical sequence of\n *  tokens, as a single {@link JsonParser}.\n * <p>\n *  Fairly simple use of {@link JsonParserDelegate}: only need\n *  to override {@link #nextToken} to handle transition\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_16/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
        "span_end": 44,
        "name": "JsonParserSequence",
        "start_line": 16,
        "span_start": 45,
        "bug_name": "JacksonCore_16",
        "type": "class",
        "end_line": 152
      },
      {
        "javadoc": "/**\n *  Helper class that can be used to sequence multiple physical\n *  {@link JsonParser}s to create a single logical sequence of\n *  tokens, as a single {@link JsonParser}.\n * <p>\n *  Fairly simple use of {@link JsonParserDelegate}: only need\n *  to override {@link #nextToken} to handle transition\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_16/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
        "span_end": 112,
        "name": "JsonParserSequence",
        "start_line": 16,
        "span_start": 104,
        "bug_name": "JacksonCore_16",
        "type": "class",
        "end_line": 152
      }
    ]
  },
  "JacksonCore_17": {
    "bug_count": 3,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/JacksonCore_17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
        "span_end": 538,
        "name": "UTF8JsonGenerator",
        "start_line": 10,
        "span_start": 528,
        "bug_name": "JacksonCore_17",
        "type": "class",
        "end_line": 1988
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonCore_17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
        "span_end": 671,
        "name": "UTF8JsonGenerator",
        "start_line": 10,
        "span_start": 672,
        "bug_name": "JacksonCore_17",
        "type": "class",
        "end_line": 1988
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonCore_17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
        "span_end": 1887,
        "name": "UTF8JsonGenerator",
        "start_line": 10,
        "span_start": 1887,
        "bug_name": "JacksonCore_17",
        "type": "class",
        "end_line": 1988
      }
    ]
  },
  "JacksonCore_18": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * This base class implements part of API that a JSON generator exposes\n * to applications, adds shared internal methods that sub-classes\n * can use and adds some abstract methods sub-classes must implement.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_18/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java",
        "span_end": 52,
        "name": "GeneratorBase",
        "start_line": 17,
        "span_start": 53,
        "bug_name": "JacksonCore_18",
        "type": "class",
        "end_line": 457
      },
      {
        "javadoc": "/**\n * This base class implements part of API that a JSON generator exposes\n * to applications, adds shared internal methods that sub-classes\n * can use and adds some abstract methods sub-classes must implement.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_18/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java",
        "span_end": 434,
        "name": "GeneratorBase",
        "start_line": 17,
        "span_start": 434,
        "bug_name": "JacksonCore_18",
        "type": "class",
        "end_line": 457
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonCore_18/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
        "span_end": 913,
        "name": "UTF8JsonGenerator",
        "start_line": 10,
        "span_start": 910,
        "bug_name": "JacksonCore_18",
        "type": "class",
        "end_line": 2035
      },
      {
        "javadoc": "/**\n * {@link JsonGenerator} that outputs JSON content using a {@link java.io.Writer}\n * which handles character encoding.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java",
        "span_end": 690,
        "name": "WriterBasedJsonGenerator",
        "start_line": 14,
        "span_start": 687,
        "bug_name": "JacksonCore_18",
        "type": "class",
        "end_line": 1883
      }
    ]
  },
  "JacksonCore_19": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 1417,
        "name": "ReaderBasedJsonParser",
        "start_line": 19,
        "span_start": 1418,
        "bug_name": "JacksonCore_19",
        "type": "class",
        "end_line": 2751
      },
      {
        "javadoc": "/**\n *  This is a concrete implementation of {@link JsonParser}, which is\n *  based on a {@link java.io.InputStream} as the input source.\n * <p>\n *  Note: non-final since version 2.3.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_19/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1543,
        "name": "UTF8StreamJsonParser",
        "start_line": 21,
        "span_start": 1544,
        "bug_name": "JacksonCore_19",
        "type": "class",
        "end_line": 3678
      }
    ]
  },
  "JacksonCore_21": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_21/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 237,
        "name": "FilteringParserDelegate",
        "start_line": 20,
        "span_start": 238,
        "bug_name": "JacksonCore_21",
        "type": "class",
        "end_line": 909
      },
      {
        "javadoc": "/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_21/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 247,
        "name": "FilteringParserDelegate",
        "start_line": 20,
        "span_start": 248,
        "bug_name": "JacksonCore_21",
        "type": "class",
        "end_line": 909
      }
    ]
  },
  "JacksonCore_22": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 417,
        "name": "FilteringParserDelegate",
        "start_line": 20,
        "span_start": 417,
        "bug_name": "JacksonCore_22",
        "type": "class",
        "end_line": 905
      },
      {
        "javadoc": "/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 440,
        "name": "FilteringParserDelegate",
        "start_line": 20,
        "span_start": 440,
        "bug_name": "JacksonCore_22",
        "type": "class",
        "end_line": 905
      },
      {
        "javadoc": "/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 575,
        "name": "FilteringParserDelegate",
        "start_line": 20,
        "span_start": 575,
        "bug_name": "JacksonCore_22",
        "type": "class",
        "end_line": 905
      },
      {
        "javadoc": "/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 600,
        "name": "FilteringParserDelegate",
        "start_line": 20,
        "span_start": 600,
        "bug_name": "JacksonCore_22",
        "type": "class",
        "end_line": 905
      },
      {
        "javadoc": "/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 717,
        "name": "FilteringParserDelegate",
        "start_line": 20,
        "span_start": 717,
        "bug_name": "JacksonCore_22",
        "type": "class",
        "end_line": 905
      },
      {
        "javadoc": "/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 732,
        "name": "FilteringParserDelegate",
        "start_line": 20,
        "span_start": 732,
        "bug_name": "JacksonCore_22",
        "type": "class",
        "end_line": 905
      },
      {
        "javadoc": "/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 770,
        "name": "FilteringParserDelegate",
        "start_line": 20,
        "span_start": 771,
        "bug_name": "JacksonCore_22",
        "type": "class",
        "end_line": 905
      }
    ]
  },
  "JacksonCore_24": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Intermediate base class used by all Jackson {@link JsonParser}\n * implementations. Contains most common things that are independent\n * of actual underlying input source.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java",
        "span_end": 871,
        "name": "ParserBase",
        "start_line": 23,
        "span_start": 869,
        "bug_name": "JacksonCore_24",
        "type": "class",
        "end_line": 1186
      },
      {
        "javadoc": "/**\n * Intermediate base class used by all Jackson {@link JsonParser}\n * implementations. Contains most common things that are independent\n * of actual underlying input source.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java",
        "span_end": 887,
        "name": "ParserBase",
        "start_line": 23,
        "span_start": 887,
        "bug_name": "JacksonCore_24",
        "type": "class",
        "end_line": 1186
      },
      {
        "javadoc": "/**\n *  Intermediate base class used by all Jackson {@link JsonParser}\n *  implementations, but does not add any additional fields that depend\n *  on particular method of obtaining input.\n * <p>\n *  Note that 'minimal' here mostly refers to minimal number of fields\n *  (size) and functionality that is specific to certain types\n *  of parser implementations; but not necessarily to number of methods.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
        "span_end": 569,
        "name": "ParserMinimalBase",
        "start_line": 25,
        "span_start": 565,
        "bug_name": "JacksonCore_24",
        "type": "class",
        "end_line": 744
      },
      {
        "javadoc": "/**\n *  Intermediate base class used by all Jackson {@link JsonParser}\n *  implementations, but does not add any additional fields that depend\n *  on particular method of obtaining input.\n * <p>\n *  Note that 'minimal' here mostly refers to minimal number of fields\n *  (size) and functionality that is specific to certain types\n *  of parser implementations; but not necessarily to number of methods.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonCore_24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
        "span_end": 586,
        "name": "ParserMinimalBase",
        "start_line": 25,
        "span_start": 582,
        "bug_name": "JacksonCore_24",
        "type": "class",
        "end_line": 744
      }
    ]
  },
  "JacksonDatabind_3": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Separate implementation for serializing String arrays (instead of\n * using {@link ObjectArrayDeserializer}.\n * Used if (and only if) no custom value deserializers are used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_3/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 66,
        "name": "StringArrayDeserializer",
        "start_line": 18,
        "span_start": 66,
        "bug_name": "JacksonDatabind_3",
        "type": "class",
        "end_line": 153
      },
      {
        "javadoc": "/**\n * Separate implementation for serializing String arrays (instead of\n * using {@link ObjectArrayDeserializer}.\n * Used if (and only if) no custom value deserializers are used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_3/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 95,
        "name": "StringArrayDeserializer",
        "start_line": 18,
        "span_start": 95,
        "bug_name": "JacksonDatabind_3",
        "type": "class",
        "end_line": 153
      }
    ]
  },
  "JacksonDatabind_4": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Separate implementation for serializing String arrays (instead of\n * using {@link ObjectArrayDeserializer}.\n * Used if (and only if) no custom value deserializers are used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_4/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 58,
        "name": "StringArrayDeserializer",
        "start_line": 17,
        "span_start": 59,
        "bug_name": "JacksonDatabind_4",
        "type": "class",
        "end_line": 154
      },
      {
        "javadoc": "/**\n * Separate implementation for serializing String arrays (instead of\n * using {@link ObjectArrayDeserializer}.\n * Used if (and only if) no custom value deserializers are used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_4/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 75,
        "name": "StringArrayDeserializer",
        "start_line": 17,
        "span_start": 75,
        "bug_name": "JacksonDatabind_4",
        "type": "class",
        "end_line": 154
      },
      {
        "javadoc": "/**\n * Separate implementation for serializing String arrays (instead of\n * using {@link ObjectArrayDeserializer}.\n * Used if (and only if) no custom value deserializers are used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_4/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 92,
        "name": "StringArrayDeserializer",
        "start_line": 17,
        "span_start": 93,
        "bug_name": "JacksonDatabind_4",
        "type": "class",
        "end_line": 154
      },
      {
        "javadoc": "/**\n * Separate implementation for serializing String arrays (instead of\n * using {@link ObjectArrayDeserializer}.\n * Used if (and only if) no custom value deserializers are used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_4/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 102,
        "name": "StringArrayDeserializer",
        "start_line": 17,
        "span_start": 102,
        "bug_name": "JacksonDatabind_4",
        "type": "class",
        "end_line": 154
      }
    ]
  },
  "JacksonDatabind_6": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_6/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 409,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 406,
        "bug_name": "JacksonDatabind_6",
        "type": "class",
        "end_line": 473
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_6/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 422,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 421,
        "bug_name": "JacksonDatabind_6",
        "type": "class",
        "end_line": 473
      }
    ]
  },
  "JacksonDatabind_8": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Container class for storing information on creators (based on annotations,\n * visibility), to be able to build actual instantiator later on.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_8/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 282,
        "name": "CreatorCollector",
        "start_line": 22,
        "span_start": 283,
        "bug_name": "JacksonDatabind_8",
        "type": "class",
        "end_line": 359
      },
      {
        "javadoc": "/**\n * Container class for storing information on creators (based on annotations,\n * visibility), to be able to build actual instantiator later on.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_8/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 300,
        "name": "CreatorCollector",
        "start_line": 22,
        "span_start": 290,
        "bug_name": "JacksonDatabind_8",
        "type": "class",
        "end_line": 359
      }
    ]
  },
  "JacksonDatabind_10": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * Class similar to {@link BeanPropertyWriter}, but that will be used\n * for serializing {@link com.fasterxml.jackson.annotation.JsonAnyGetter} annotated\n * (Map) properties\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_10/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
        "span_end": 33,
        "name": "AnyGetterWriter",
        "start_line": 15,
        "span_start": 24,
        "bug_name": "JacksonDatabind_10",
        "type": "class",
        "end_line": 84
      },
      {
        "javadoc": "/**\n * Class similar to {@link BeanPropertyWriter}, but that will be used\n * for serializing {@link com.fasterxml.jackson.annotation.JsonAnyGetter} annotated\n * (Map) properties\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_10/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
        "span_end": 51,
        "name": "AnyGetterWriter",
        "start_line": 15,
        "span_start": 52,
        "bug_name": "JacksonDatabind_10",
        "type": "class",
        "end_line": 84
      },
      {
        "javadoc": "/**\n * Class similar to {@link BeanPropertyWriter}, but that will be used\n * for serializing {@link com.fasterxml.jackson.annotation.JsonAnyGetter} annotated\n * (Map) properties\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_10/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
        "span_end": 74,
        "name": "AnyGetterWriter",
        "start_line": 15,
        "span_start": 75,
        "bug_name": "JacksonDatabind_10",
        "type": "class",
        "end_line": 84
      },
      {
        "javadoc": "/**\n * Class similar to {@link BeanPropertyWriter}, but that will be used\n * for serializing {@link com.fasterxml.jackson.annotation.JsonAnyGetter} annotated\n * (Map) properties\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_10/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
        "span_end": 81,
        "name": "AnyGetterWriter",
        "start_line": 15,
        "span_start": 82,
        "bug_name": "JacksonDatabind_10",
        "type": "class",
        "end_line": 84
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for any regular Java beans\n *  (as defined by \"having at least one get method recognizable as bean\n *  accessor\" -- where {@link Object#getClass} does not count);\n *  as well as for \"standard\" JDK types. Latter is achieved\n *  by delegating calls to {@link BasicSerializerFactory}\n *  to find serializers both for \"standard\" JDK types (and in some cases,\n *  sub-classes as is the case for collection classes like\n *  {@link java.util.List}s and {@link java.util.Map}s) and bean (value)\n *  classes.\n * <p>\n *  Note about delegating calls to {@link BasicSerializerFactory}:\n *  although it would be nicer to use linear delegation\n *  for construction (to essentially dispatch all calls first to the\n *  underlying {@link BasicSerializerFactory}; or alternatively after\n *  failing to provide bean-based serializer}, there is a problem:\n *  priority levels for detecting standard types are mixed. That is,\n *  we want to check if a type is a bean after some of \"standard\" JDK\n *  types, but before the rest.\n *  As a result, \"mixed\" delegation used, and calls are NOT done using\n *  regular {@link SerializerFactory} interface but rather via\n *  direct calls to {@link BasicSerializerFactory}.\n * <p>\n *  Finally, since all caching is handled by the serializer provider\n *  (not factory) and there is no configurability, this\n *  factory is stateless.\n *  This means that a global singleton instance can be used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_10/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "span_end": 396,
        "name": "BeanSerializerFactory",
        "start_line": 51,
        "span_start": 395,
        "bug_name": "JacksonDatabind_10",
        "type": "class",
        "end_line": 735
      }
    ]
  },
  "JacksonDatabind_13": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Complete {@link DeserializationContext} implementation that adds\n * extended API for {@link ObjectMapper} (and {@link ObjectReader})\n * to call, as well as implements certain parts that base class\n * has left abstract.\n * The remaining abstract methods ({@link #createInstance}, {@link #with})\n * are left so that custom implementations will properly implement them\n * to return intended subtype.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_13/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
        "span_end": 86,
        "name": "DefaultDeserializationContext",
        "start_line": 27,
        "span_start": 87,
        "bug_name": "JacksonDatabind_13",
        "type": "class",
        "end_line": 325
      },
      {
        "javadoc": "/**\n * Specialized {@link SettableBeanProperty} implementation used\n * for virtual property that represents Object Id that is used\n * for some POJO types (or properties).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_13/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
        "span_end": 91,
        "name": "ObjectIdValueProperty",
        "start_line": 16,
        "span_start": 92,
        "bug_name": "JacksonDatabind_13",
        "type": "class",
        "end_line": 118
      }
    ]
  },
  "JacksonDatabind_14": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n *  Builder object that can be used for per-serialization configuration of\n *  deserialization parameters, such as root type to use or object\n *  to update (instead of constructing new instance).\n * <p>\n *  Uses \"fluent\" (or, kind of, builder) pattern so that instances are immutable\n *  (and thus fully thread-safe with no external synchronization);\n *  new instances are constructed for different configurations.\n *  Instances are initially constructed by {@link ObjectMapper} and can be\n *  reused, shared, cached; both because of thread-safety and because\n *  instances are relatively light-weight.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_14/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
        "span_end": 1476,
        "name": "ObjectReader",
        "start_line": 37,
        "span_start": 1476,
        "bug_name": "JacksonDatabind_14",
        "type": "class",
        "end_line": 1726
      },
      {
        "javadoc": "/**\n *  Builder object that can be used for per-serialization configuration of\n *  deserialization parameters, such as root type to use or object\n *  to update (instead of constructing new instance).\n * <p>\n *  Uses \"fluent\" (or, kind of, builder) pattern so that instances are immutable\n *  (and thus fully thread-safe with no external synchronization);\n *  new instances are constructed for different configurations.\n *  Instances are initially constructed by {@link ObjectMapper} and can be\n *  reused, shared, cached; both because of thread-safety and because\n *  instances are relatively light-weight.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_14/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
        "span_end": 1577,
        "name": "ObjectReader",
        "start_line": 37,
        "span_start": 1577,
        "bug_name": "JacksonDatabind_14",
        "type": "class",
        "end_line": 1726
      }
    ]
  },
  "JacksonDatabind_15": {
    "bug_count": 11,
    "entries": [
      {
        "javadoc": "/**\n *  Base class for type token classes used both to contain information\n *  and as keys for deserializers.\n * <p>\n *  Instances can (only) be constructed by\n *  <code>com.fasterxml.jackson.databind.type.TypeFactory</code>.\n * <p>\n *  Since 2.2 this implements {@link java.lang.reflect.Type} to allow\n *  it to be pushed through interfaces that only expose that type.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/JavaType.java",
        "span_end": 301,
        "name": "JavaType",
        "start_line": 18,
        "span_start": 302,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 467
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for any regular Java beans\n *  (as defined by \"having at least one get method recognizable as bean\n *  accessor\" -- where {@link Object#getClass} does not count);\n *  as well as for \"standard\" JDK types. Latter is achieved\n *  by delegating calls to {@link BasicSerializerFactory}\n *  to find serializers both for \"standard\" JDK types (and in some cases,\n *  sub-classes as is the case for collection classes like\n *  {@link java.util.List}s and {@link java.util.Map}s) and bean (value)\n *  classes.\n * <p>\n *  Note about delegating calls to {@link BasicSerializerFactory}:\n *  although it would be nicer to use linear delegation\n *  for construction (to essentially dispatch all calls first to the\n *  underlying {@link BasicSerializerFactory}; or alternatively after\n *  failing to provide bean-based serializer}, there is a problem:\n *  priority levels for detecting standard types are mixed. That is,\n *  we want to check if a type is a bean after some of \"standard\" JDK\n *  types, but before the rest.\n *  As a result, \"mixed\" delegation used, and calls are NOT done using\n *  regular {@link SerializerFactory} interface but rather via\n *  direct calls to {@link BasicSerializerFactory}.\n * <p>\n *  Finally, since all caching is handled by the serializer provider\n *  (not factory) and there is no configurability, this\n *  factory is stateless.\n *  This means that a global singleton instance can be used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "span_end": 163,
        "name": "BeanSerializerFactory",
        "start_line": 51,
        "span_start": 163,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 740
      },
      {
        "javadoc": "/**\n * Base class both for the standard bean serializer, and couple\n * of variants that only differ in small details.\n * Can be used for custom bean serializers as well, although that\n * is not the primary design goal.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
        "span_end": 370,
        "name": "BeanSerializerBase",
        "start_line": 36,
        "span_start": 370,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 795
      },
      {
        "javadoc": "/**\n *  Serializer implementation where given Java type is first converted\n *  to an intermediate \"delegate type\" (using a configured\n *  {@link Converter}, and then this delegate value is serialized by Jackson.\n * <p>\n *  Note that although types may be related, they must not be same; trying\n *  to do this will result in an exception.\n *\n *  @since 2.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 127,
        "name": "StdDelegatingSerializer",
        "start_line": 26,
        "span_start": 121,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 257
      },
      {
        "javadoc": "/**\n *  Serializer implementation where given Java type is first converted\n *  to an intermediate \"delegate type\" (using a configured\n *  {@link Converter}, and then this delegate value is serialized by Jackson.\n * <p>\n *  Note that although types may be related, they must not be same; trying\n *  to do this will result in an exception.\n *\n *  @since 2.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 161,
        "name": "StdDelegatingSerializer",
        "start_line": 26,
        "span_start": 161,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 257
      },
      {
        "javadoc": "/**\n *  Serializer implementation where given Java type is first converted\n *  to an intermediate \"delegate type\" (using a configured\n *  {@link Converter}, and then this delegate value is serialized by Jackson.\n * <p>\n *  Note that although types may be related, they must not be same; trying\n *  to do this will result in an exception.\n *\n *  @since 2.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 172,
        "name": "StdDelegatingSerializer",
        "start_line": 26,
        "span_start": 172,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 257
      },
      {
        "javadoc": "/**\n *  Serializer implementation where given Java type is first converted\n *  to an intermediate \"delegate type\" (using a configured\n *  {@link Converter}, and then this delegate value is serialized by Jackson.\n * <p>\n *  Note that although types may be related, they must not be same; trying\n *  to do this will result in an exception.\n *\n *  @since 2.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 179,
        "name": "StdDelegatingSerializer",
        "start_line": 26,
        "span_start": 180,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 257
      },
      {
        "javadoc": "/**\n *  Serializer implementation where given Java type is first converted\n *  to an intermediate \"delegate type\" (using a configured\n *  {@link Converter}, and then this delegate value is serialized by Jackson.\n * <p>\n *  Note that although types may be related, they must not be same; trying\n *  to do this will result in an exception.\n *\n *  @since 2.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 186,
        "name": "StdDelegatingSerializer",
        "start_line": 26,
        "span_start": 187,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 257
      },
      {
        "javadoc": "/**\n *  Serializer implementation where given Java type is first converted\n *  to an intermediate \"delegate type\" (using a configured\n *  {@link Converter}, and then this delegate value is serialized by Jackson.\n * <p>\n *  Note that although types may be related, they must not be same; trying\n *  to do this will result in an exception.\n *\n *  @since 2.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 224,
        "name": "StdDelegatingSerializer",
        "start_line": 26,
        "span_start": 224,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 257
      },
      {
        "javadoc": "/**\n *  Serializer implementation where given Java type is first converted\n *  to an intermediate \"delegate type\" (using a configured\n *  {@link Converter}, and then this delegate value is serialized by Jackson.\n * <p>\n *  Note that although types may be related, they must not be same; trying\n *  to do this will result in an exception.\n *\n *  @since 2.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 256,
        "name": "StdDelegatingSerializer",
        "start_line": 26,
        "span_start": 256,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 257
      },
      {
        "javadoc": "/**\n * Base class used by all standard serializers, and can also\n * be used for custom serializers (in fact, this is the recommended\n * base class to use).\n * Provides convenience methods for implementing {@link SchemaAware}\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "span_end": 262,
        "name": "StdSerializer",
        "start_line": 27,
        "span_start": 262,
        "bug_name": "JacksonDatabind_15",
        "type": "class",
        "end_line": 291
      }
    ]
  },
  "JacksonDatabind_18": {
    "bug_count": 9,
    "entries": [
      {
        "javadoc": "/**\n * Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 41,
        "name": "MappingIterator",
        "start_line": 14,
        "span_start": 28,
        "bug_name": "JacksonDatabind_18",
        "type": "class",
        "end_line": 366
      },
      {
        "javadoc": "/**\n * Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 74,
        "name": "MappingIterator",
        "start_line": 14,
        "span_start": 69,
        "bug_name": "JacksonDatabind_18",
        "type": "class",
        "end_line": 366
      },
      {
        "javadoc": "/**\n * Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 98,
        "name": "MappingIterator",
        "start_line": 14,
        "span_start": 98,
        "bug_name": "JacksonDatabind_18",
        "type": "class",
        "end_line": 366
      },
      {
        "javadoc": "/**\n * Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 143,
        "name": "MappingIterator",
        "start_line": 14,
        "span_start": 138,
        "bug_name": "JacksonDatabind_18",
        "type": "class",
        "end_line": 366
      },
      {
        "javadoc": "/**\n * Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 191,
        "name": "MappingIterator",
        "start_line": 14,
        "span_start": 189,
        "bug_name": "JacksonDatabind_18",
        "type": "class",
        "end_line": 366
      },
      {
        "javadoc": "/**\n * Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 228,
        "name": "MappingIterator",
        "start_line": 14,
        "span_start": 210,
        "bug_name": "JacksonDatabind_18",
        "type": "class",
        "end_line": 366
      },
      {
        "javadoc": "/**\n * Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 245,
        "name": "MappingIterator",
        "start_line": 14,
        "span_start": 236,
        "bug_name": "JacksonDatabind_18",
        "type": "class",
        "end_line": 366
      },
      {
        "javadoc": "/**\n * Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 255,
        "name": "MappingIterator",
        "start_line": 14,
        "span_start": 254,
        "bug_name": "JacksonDatabind_18",
        "type": "class",
        "end_line": 366
      },
      {
        "javadoc": "/**\n * Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 353,
        "name": "MappingIterator",
        "start_line": 14,
        "span_start": 352,
        "bug_name": "JacksonDatabind_18",
        "type": "class",
        "end_line": 366
      }
    ]
  },
  "JacksonDatabind_20": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n *  Node that maps to JSON Object structures in JSON content.\n * <p>\n *  Note: class was <code>final</code> temporarily for Jackson 2.2.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_20/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java",
        "span_end": 323,
        "name": "ObjectNode",
        "start_line": 24,
        "span_start": 324,
        "bug_name": "JacksonDatabind_20",
        "type": "class",
        "end_line": 806
      }
    ]
  },
  "JacksonDatabind_21": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_21/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 68,
        "name": "JacksonAnnotationIntrospector",
        "start_line": 26,
        "span_start": 64,
        "bug_name": "JacksonDatabind_21",
        "type": "class",
        "end_line": 991
      }
    ]
  },
  "JacksonDatabind_22": {
    "bug_count": 12,
    "entries": [
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 603,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 580,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for any regular Java beans\n *  (as defined by \"having at least one get method recognizable as bean\n *  accessor\" -- where {@link Object#getClass} does not count);\n *  as well as for \"standard\" JDK types. Latter is achieved\n *  by delegating calls to {@link BasicSerializerFactory}\n *  to find serializers both for \"standard\" JDK types (and in some cases,\n *  sub-classes as is the case for collection classes like\n *  {@link java.util.List}s and {@link java.util.Map}s) and bean (value)\n *  classes.\n * <p>\n *  Note about delegating calls to {@link BasicSerializerFactory}:\n *  although it would be nicer to use linear delegation\n *  for construction (to essentially dispatch all calls first to the\n *  underlying {@link BasicSerializerFactory}; or alternatively after\n *  failing to provide bean-based serializer}, there is a problem:\n *  priority levels for detecting standard types are mixed. That is,\n *  we want to check if a type is a bean after some of \"standard\" JDK\n *  types, but before the rest.\n *  As a result, \"mixed\" delegation used, and calls are NOT done using\n *  regular {@link SerializerFactory} interface but rather via\n *  direct calls to {@link BasicSerializerFactory}.\n * <p>\n *  Finally, since all caching is handled by the serializer provider\n *  (not factory) and there is no configurability, this\n *  factory is stateless.\n *  This means that a global singleton instance can be used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "span_end": 211,
        "name": "BeanSerializerFactory",
        "start_line": 52,
        "span_start": 212,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 783
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 624,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 612,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 640,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 636,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 654,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 655,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 690,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 691,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 742,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 737,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 755,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 756,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 783,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 784,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 831,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 831,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for standard JDK classes,\n *  as well as custom classes that extend standard classes or implement\n *  one of \"well-known\" interfaces (such as {@link java.util.Collection}).\n * <p>\n *  Since all the serializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is essentially stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 840,
        "name": "BasicSerializerFactory",
        "start_line": 36,
        "span_start": 841,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 1105
      },
      {
        "javadoc": "/**\n *  Factory class that can provide serializers for any regular Java beans\n *  (as defined by \"having at least one get method recognizable as bean\n *  accessor\" -- where {@link Object#getClass} does not count);\n *  as well as for \"standard\" JDK types. Latter is achieved\n *  by delegating calls to {@link BasicSerializerFactory}\n *  to find serializers both for \"standard\" JDK types (and in some cases,\n *  sub-classes as is the case for collection classes like\n *  {@link java.util.List}s and {@link java.util.Map}s) and bean (value)\n *  classes.\n * <p>\n *  Note about delegating calls to {@link BasicSerializerFactory}:\n *  although it would be nicer to use linear delegation\n *  for construction (to essentially dispatch all calls first to the\n *  underlying {@link BasicSerializerFactory}; or alternatively after\n *  failing to provide bean-based serializer}, there is a problem:\n *  priority levels for detecting standard types are mixed. That is,\n *  we want to check if a type is a bean after some of \"standard\" JDK\n *  types, but before the rest.\n *  As a result, \"mixed\" delegation used, and calls are NOT done using\n *  regular {@link SerializerFactory} interface but rather via\n *  direct calls to {@link BasicSerializerFactory}.\n * <p>\n *  Finally, since all caching is handled by the serializer provider\n *  (not factory) and there is no configurability, this\n *  factory is stateless.\n *  This means that a global singleton instance can be used.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "span_end": 177,
        "name": "BeanSerializerFactory",
        "start_line": 52,
        "span_start": 174,
        "bug_name": "JacksonDatabind_22",
        "type": "class",
        "end_line": 783
      }
    ]
  },
  "JacksonDatabind_23": {
    "bug_count": 14,
    "entries": [
      {
        "javadoc": "/**\n * Container class for serializers used for handling standard JDK-provided types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 53,
        "name": "NumberSerializers",
        "start_line": 21,
        "span_start": 54,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 241
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 53,
        "name": "Base",
        "start_line": 51,
        "span_start": 54,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 109
      },
      {
        "javadoc": "/**\n * Container class for serializers used for handling standard JDK-provided types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 123,
        "name": "NumberSerializers",
        "start_line": 21,
        "span_start": 120,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 241
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 123,
        "name": "ShortSerializer",
        "start_line": 117,
        "span_start": 120,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 129
      },
      {
        "javadoc": "/**\n * Container class for serializers used for handling standard JDK-provided types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 158,
        "name": "NumberSerializers",
        "start_line": 21,
        "span_start": 159,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 241
      },
      {
        "javadoc": "/**\n *  This is the special serializer for regular {@link java.lang.Integer}s\n *  (and primitive ints)\n * <p>\n *  Since this is one of \"native\" types, no type information is ever\n *  included on serialization (unlike for most scalar types)\n * <p>\n *  NOTE: as of 2.6, generic signature changed to Object, to avoid generation\n *  of bridge methods.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 158,
        "name": "IntegerSerializer",
        "start_line": 141,
        "span_start": 159,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 159
      },
      {
        "javadoc": "/**\n * Container class for serializers used for handling standard JDK-provided types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 174,
        "name": "NumberSerializers",
        "start_line": 21,
        "span_start": 175,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 241
      },
      {
        "javadoc": "/**\n * Similar to {@link IntegerSerializer}, but will not cast to Integer:\n * instead, cast is to {@link java.lang.Number}, and conversion is\n * by calling {@link java.lang.Number#intValue}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 174,
        "name": "IntLikeSerializer",
        "start_line": 166,
        "span_start": 175,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 180
      },
      {
        "javadoc": "/**\n * Container class for serializers used for handling standard JDK-provided types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 189,
        "name": "NumberSerializers",
        "start_line": 21,
        "span_start": 185,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 241
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 189,
        "name": "LongSerializer",
        "start_line": 182,
        "span_start": 185,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 195
      },
      {
        "javadoc": "/**\n * Container class for serializers used for handling standard JDK-provided types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 204,
        "name": "NumberSerializers",
        "start_line": 21,
        "span_start": 200,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 241
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 204,
        "name": "FloatSerializer",
        "start_line": 197,
        "span_start": 200,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 210
      },
      {
        "javadoc": "/**\n * Container class for serializers used for handling standard JDK-provided types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 226,
        "name": "NumberSerializers",
        "start_line": 21,
        "span_start": 222,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 241
      },
      {
        "javadoc": "/**\n *  This is the special serializer for regular {@link java.lang.Double}s\n *  (and primitive doubles)\n * <p>\n *  Since this is one of \"native\" types, no type information is ever\n *  included on serialization (unlike for most scalar types as of 1.5)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 226,
        "name": "DoubleSerializer",
        "start_line": 219,
        "span_start": 222,
        "bug_name": "JacksonDatabind_23",
        "type": "class",
        "end_line": 240
      }
    ]
  },
  "JacksonDatabind_25": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n *  Abstract factory base class that can provide deserializers for standard\n *  JDK classes, including collection classes and simple heuristics for\n *  \"upcasting\" common collection interface types\n *  (such as {@link java.util.Collection}).\n * <p>\n *  Since all simple deserializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_25/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "span_end": 1757,
        "name": "BasicDeserializerFactory",
        "start_line": 35,
        "span_start": 1757,
        "bug_name": "JacksonDatabind_25",
        "type": "class",
        "end_line": 1895
      },
      {
        "javadoc": "/**\n * Class that defines caching layer between callers (like\n * {@link ObjectMapper},\n * {@link com.fasterxml.jackson.databind.DeserializationContext})\n * and classes that construct deserializers\n * ({@link com.fasterxml.jackson.databind.deser.DeserializerFactory}).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_25/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "span_end": 477,
        "name": "DeserializerCache",
        "start_line": 21,
        "span_start": 477,
        "bug_name": "JacksonDatabind_25",
        "type": "class",
        "end_line": 607
      },
      {
        "javadoc": "/**\n * Base class for all standard Jackson {@link TypeDeserializer}s.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_25/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "span_end": 177,
        "name": "TypeDeserializerBase",
        "start_line": 22,
        "span_start": 177,
        "bug_name": "JacksonDatabind_25",
        "type": "class",
        "end_line": 279
      },
      {
        "javadoc": "/**\n *  Simple {@link AbstractTypeResolver} implementation, which is\n *  based on static mapping from abstract super types into\n *  sub types (concrete or abstract), but retaining generic\n *  parameterization.\n *  Can be used for things like specifying which implementation of\n *  {@link java.util.Collection} to use:\n * <pre>\n *   SimpleAbstractTypeResolver resolver = new SimpleAbstractTypeResolver();\n *   // To make all properties declared as Collection, List, to LinkedList\n *   resolver.addMapping(Collection.class, LinkedList.class);\n *   resolver.addMapping(List.class, LinkedList.class);\n * </pre>\n *  Can also be used as an alternative to per-class annotations when defining\n *  concrete implementations; however, only works with abstract types (since\n *  this is only called for abstract types)\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_25/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java",
        "span_end": 80,
        "name": "SimpleAbstractTypeResolver",
        "start_line": 29,
        "span_start": 80,
        "bug_name": "JacksonDatabind_25",
        "type": "class",
        "end_line": 90
      }
    ]
  },
  "JacksonDatabind_29": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Helper class that is used to flatten JSON structure when using\n * \"external type id\" (see {@link com.fasterxml.jackson.annotation.JsonTypeInfo.As#EXTERNAL_PROPERTY}).\n * This is needed to store temporary state and buffer tokens, as the structure is\n * rearranged a bit so that actual type deserializer can resolve type and\n * finalize deserialization.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_29/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
        "span_end": 227,
        "name": "ExternalTypeHandler",
        "start_line": 19,
        "span_start": 228,
        "bug_name": "JacksonDatabind_29",
        "type": "class",
        "end_line": 323
      },
      {
        "javadoc": "/**\n * Helper class that is used to flatten JSON structure when using\n * \"external type id\" (see {@link com.fasterxml.jackson.annotation.JsonTypeInfo.As#EXTERNAL_PROPERTY}).\n * This is needed to store temporary state and buffer tokens, as the structure is\n * rearranged a bit so that actual type deserializer can resolve type and\n * finalize deserialization.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_29/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
        "span_end": 250,
        "name": "ExternalTypeHandler",
        "start_line": 19,
        "span_start": 251,
        "bug_name": "JacksonDatabind_29",
        "type": "class",
        "end_line": 323
      }
    ]
  },
  "JacksonDatabind_30": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n *  ObjectMapper provides functionality for reading and writing JSON,\n *  either to and from basic POJOs (Plain Old Java Objects), or to and from\n *  a general-purpose JSON Tree Model ({@link JsonNode}), as well as\n *  related functionality for performing conversions.\n *  It is also highly customizable to work both with different styles of JSON\n *  content, and to support more advanced Object concepts such as\n *  polymorphism and Object identity.\n *  <code>ObjectMapper</code> also acts as a factory for more advanced {@link ObjectReader}\n *  and {@link ObjectWriter} classes.\n *  Mapper (and {@link ObjectReader}s, {@link ObjectWriter}s it constructs) will\n *  use instances of {@link JsonParser} and {@link JsonGenerator}\n *  for implementing actual reading/writing of JSON.\n *  Note that although most read and write methods are exposed through this class,\n *  some of the functionality is only exposed via {@link ObjectReader} and\n *  {@link ObjectWriter}: specifically, reading/writing of longer sequences of\n *  values is only available through {@link ObjectReader#readValues(InputStream)}\n *  and {@link ObjectWriter#writeValues(OutputStream)}.\n * <p>\n * Simplest usage is of form:\n * <pre>\n *   final ObjectMapper mapper = new ObjectMapper(); // can use static singleton, inject: just make sure to reuse!\n *   MyValue value = new MyValue();\n *   // ... and configure\n *   File newState = new File(\"my-stuff.json\");\n *   mapper.writeValue(newState, value); // writes JSON serialization of MyValue instance\n *   // or, read\n *   MyValue older = mapper.readValue(new File(\"my-older-stuff.json\"), MyValue.class);\n *\n *   // Or if you prefer JSON Tree representation:\n *   JsonNode root = mapper.readTree(newState);\n *   // and find values by, for example, using a {@link com.fasterxml.jackson.core.JsonPointer} expression:\n *   int age = root.at(\"/personal/age\").getValueAsInt();\n * </pre>\n * <p>\n *  The main conversion API is defined in {@link ObjectCodec}, so that\n *  implementation details of this class need not be exposed to\n *  streaming parser and generator classes. Usage via {@link ObjectCodec} is,\n *  however, usually only for cases where dependency to {@link ObjectMapper} is\n *  either not possible (from Streaming API), or undesireable (when only relying\n *  on Streaming API).\n * <p>\n *  Mapper instances are fully thread-safe provided that ALL configuration of the\n *  instance occurs before ANY read or write calls. If configuration of a mapper\n *  is modified after first usage, changes may or may not take effect, and configuration\n *  calls themselves may fail.\n *  If you need to use different configuration, you have two main possibilities:\n * <ul>\n *  <li>Construct and use {@link ObjectReader} for reading, {@link ObjectWriter} for writing.\n *     Both types are fully immutable and you can freely create new instances with different\n *     configuration using either factory methods of {@link ObjectMapper}, or readers/writers\n *     themselves. Construction of new {@link ObjectReader}s and {@link ObjectWriter}s is\n *     a very light-weight operation so it is usually appropriate to create these on per-call\n *     basis, as needed, for configuring things like optional indentation of JSON.\n *   </li>\n *  <li>If the specific kind of configurability is not available via {@link ObjectReader} and\n *    {@link ObjectWriter}, you may need to use multiple {@link ObjectMapper} instead (for example:\n *    you can not change mix-in annotations on-the-fly; or, set of custom (de)serializers).\n *    To help with this usage, you may want to use method {@link #copy()} which creates a clone\n *    of the mapper with specific configuration, and allows configuration of the copied instance\n *    before it gets used. Note that {@link #copy} operation is as expensive as constructing\n *    a new {@link ObjectMapper} instance: if possible, you should still pool and reuse mappers\n *    if you intend to use them for multiple operations.\n *   </li>\n *  </ul>\n * <p>\n *  Note on caching: root-level deserializers are always cached, and accessed\n *  using full (generics-aware) type information. This is different from\n *  caching of referenced types, which is more limited and is done only\n *  for a subset of all deserializer types. The main reason for difference\n *  is that at root-level there is no incoming reference (and hence no\n *  referencing property, no referral information or annotations to\n *  produce differing deserializers), and that the performance impact\n *  greatest at root level (since it'll essentially cache the full\n *  graph of deserializers involved).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "span_end": 2509,
        "name": "ObjectMapper",
        "start_line": 111,
        "span_start": 2510,
        "bug_name": "JacksonDatabind_30",
        "type": "class",
        "end_line": 3852
      },
      {
        "javadoc": "/**\n *  ObjectMapper provides functionality for reading and writing JSON,\n *  either to and from basic POJOs (Plain Old Java Objects), or to and from\n *  a general-purpose JSON Tree Model ({@link JsonNode}), as well as\n *  related functionality for performing conversions.\n *  It is also highly customizable to work both with different styles of JSON\n *  content, and to support more advanced Object concepts such as\n *  polymorphism and Object identity.\n *  <code>ObjectMapper</code> also acts as a factory for more advanced {@link ObjectReader}\n *  and {@link ObjectWriter} classes.\n *  Mapper (and {@link ObjectReader}s, {@link ObjectWriter}s it constructs) will\n *  use instances of {@link JsonParser} and {@link JsonGenerator}\n *  for implementing actual reading/writing of JSON.\n *  Note that although most read and write methods are exposed through this class,\n *  some of the functionality is only exposed via {@link ObjectReader} and\n *  {@link ObjectWriter}: specifically, reading/writing of longer sequences of\n *  values is only available through {@link ObjectReader#readValues(InputStream)}\n *  and {@link ObjectWriter#writeValues(OutputStream)}.\n * <p>\n * Simplest usage is of form:\n * <pre>\n *   final ObjectMapper mapper = new ObjectMapper(); // can use static singleton, inject: just make sure to reuse!\n *   MyValue value = new MyValue();\n *   // ... and configure\n *   File newState = new File(\"my-stuff.json\");\n *   mapper.writeValue(newState, value); // writes JSON serialization of MyValue instance\n *   // or, read\n *   MyValue older = mapper.readValue(new File(\"my-older-stuff.json\"), MyValue.class);\n *\n *   // Or if you prefer JSON Tree representation:\n *   JsonNode root = mapper.readTree(newState);\n *   // and find values by, for example, using a {@link com.fasterxml.jackson.core.JsonPointer} expression:\n *   int age = root.at(\"/personal/age\").getValueAsInt();\n * </pre>\n * <p>\n *  The main conversion API is defined in {@link ObjectCodec}, so that\n *  implementation details of this class need not be exposed to\n *  streaming parser and generator classes. Usage via {@link ObjectCodec} is,\n *  however, usually only for cases where dependency to {@link ObjectMapper} is\n *  either not possible (from Streaming API), or undesireable (when only relying\n *  on Streaming API).\n * <p>\n *  Mapper instances are fully thread-safe provided that ALL configuration of the\n *  instance occurs before ANY read or write calls. If configuration of a mapper\n *  is modified after first usage, changes may or may not take effect, and configuration\n *  calls themselves may fail.\n *  If you need to use different configuration, you have two main possibilities:\n * <ul>\n *  <li>Construct and use {@link ObjectReader} for reading, {@link ObjectWriter} for writing.\n *     Both types are fully immutable and you can freely create new instances with different\n *     configuration using either factory methods of {@link ObjectMapper}, or readers/writers\n *     themselves. Construction of new {@link ObjectReader}s and {@link ObjectWriter}s is\n *     a very light-weight operation so it is usually appropriate to create these on per-call\n *     basis, as needed, for configuring things like optional indentation of JSON.\n *   </li>\n *  <li>If the specific kind of configurability is not available via {@link ObjectReader} and\n *    {@link ObjectWriter}, you may need to use multiple {@link ObjectMapper} instead (for example:\n *    you can not change mix-in annotations on-the-fly; or, set of custom (de)serializers).\n *    To help with this usage, you may want to use method {@link #copy()} which creates a clone\n *    of the mapper with specific configuration, and allows configuration of the copied instance\n *    before it gets used. Note that {@link #copy} operation is as expensive as constructing\n *    a new {@link ObjectMapper} instance: if possible, you should still pool and reuse mappers\n *    if you intend to use them for multiple operations.\n *   </li>\n *  </ul>\n * <p>\n *  Note on caching: root-level deserializers are always cached, and accessed\n *  using full (generics-aware) type information. This is different from\n *  caching of referenced types, which is more limited and is done only\n *  for a subset of all deserializer types. The main reason for difference\n *  is that at root-level there is no incoming reference (and hence no\n *  referencing property, no referral information or annotations to\n *  produce differing deserializers), and that the performance impact\n *  greatest at root level (since it'll essentially cache the full\n *  graph of deserializers involved).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "span_end": 3425,
        "name": "ObjectMapper",
        "start_line": 111,
        "span_start": 3426,
        "bug_name": "JacksonDatabind_30",
        "type": "class",
        "end_line": 3852
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 79,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 80,
        "bug_name": "JacksonDatabind_30",
        "type": "class",
        "end_line": 1830
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 192,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 188,
        "bug_name": "JacksonDatabind_30",
        "type": "class",
        "end_line": 1830
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 963,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 959,
        "bug_name": "JacksonDatabind_30",
        "type": "class",
        "end_line": 1830
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 972,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 973,
        "bug_name": "JacksonDatabind_30",
        "type": "class",
        "end_line": 1830
      }
    ]
  },
  "JacksonDatabind_31": {
    "bug_count": 13,
    "entries": [
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 1090,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 1091,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 1097,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 1098,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 672,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 672,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 686,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 686,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 731,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 731,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 744,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 739,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 775,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 755,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 783,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 783,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 792,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 792,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 811,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 801,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 829,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 829,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 837,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 837,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      },
      {
        "javadoc": "/**\n *  Utility class used for efficient storage of {@link JsonToken}\n *  sequences, needed for temporary buffering.\n *  Space efficient for different sequence lengths (especially so for smaller\n *  ones; but not significantly less efficient for larger), highly efficient\n *  for linear iteration and appending. Implemented as segmented/chunked\n *  linked list of tokens; only modifications are via appends.\n * <p>\n *  Note that before version 2.0, this class was located in the \"core\"\n *  bundle, not data-binding; but since it was only used by data binding,\n *  was moved here to reduce size of core package\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 853,
        "name": "TokenBuffer",
        "start_line": 27,
        "span_start": 853,
        "bug_name": "JacksonDatabind_31",
        "type": "class",
        "end_line": 1855
      }
    ]
  },
  "JacksonDatabind_32": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Deserializer implementation that is used if it is necessary to bind content of\n * \"unknown\" type; something declared as basic {@link java.lang.Object}\n * (either explicitly, or due to type erasure).\n * If so, \"natural\" mapping is used to convert JSON values to their natural\n * Java object matches: JSON arrays to Java {@link java.util.List}s (or, if configured,\n * Object[]), JSON objects to {@link java.util.Map}s, numbers to\n * {@link java.lang.Number}s, booleans to {@link java.lang.Boolean}s and\n * strings to {@link java.lang.String} (and nulls to nulls).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_32/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "span_end": 220,
        "name": "UntypedObjectDeserializer",
        "start_line": 31,
        "span_start": 221,
        "bug_name": "JacksonDatabind_32",
        "type": "class",
        "end_line": 673
      },
      {
        "javadoc": "/**\n * Deserializer implementation that is used if it is necessary to bind content of\n * \"unknown\" type; something declared as basic {@link java.lang.Object}\n * (either explicitly, or due to type erasure).\n * If so, \"natural\" mapping is used to convert JSON values to their natural\n * Java object matches: JSON arrays to Java {@link java.util.List}s (or, if configured,\n * Object[]), JSON objects to {@link java.util.Map}s, numbers to\n * {@link java.lang.Number}s, booleans to {@link java.lang.Boolean}s and\n * strings to {@link java.lang.String} (and nulls to nulls).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_32/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "span_end": 536,
        "name": "UntypedObjectDeserializer",
        "start_line": 31,
        "span_start": 535,
        "bug_name": "JacksonDatabind_32",
        "type": "class",
        "end_line": 673
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_32/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "span_end": 536,
        "name": "Vanilla",
        "start_line": 473,
        "span_start": 535,
        "bug_name": "JacksonDatabind_32",
        "type": "class",
        "end_line": 672
      }
    ]
  },
  "JacksonDatabind_36": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_36/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 250,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 250,
        "bug_name": "JacksonDatabind_36",
        "type": "class",
        "end_line": 566
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_36/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 556,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 557,
        "bug_name": "JacksonDatabind_36",
        "type": "class",
        "end_line": 566
      }
    ]
  },
  "JacksonDatabind_38": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Type that represents Java Collection types (Lists, Sets).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_38/src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java",
        "span_end": 50,
        "name": "CollectionType",
        "start_line": 9,
        "span_start": 50,
        "bug_name": "JacksonDatabind_38",
        "type": "class",
        "end_line": 128
      },
      {
        "javadoc": "/**\n * Type that represents \"true\" Java Map types.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_38/src/main/java/com/fasterxml/jackson/databind/type/MapType.java",
        "span_end": 48,
        "name": "MapType",
        "start_line": 9,
        "span_start": 47,
        "bug_name": "JacksonDatabind_38",
        "type": "class",
        "end_line": 155
      },
      {
        "javadoc": "/**\n * Simple types are defined as anything other than one of recognized\n * container types (arrays, Collections, Maps). For our needs we\n * need not know anything further, since we have no way of dealing\n * with generic types other than Collections and Maps.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_38/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
        "span_end": 117,
        "name": "SimpleType",
        "start_line": 13,
        "span_start": 116,
        "bug_name": "JacksonDatabind_38",
        "type": "class",
        "end_line": 283
      },
      {
        "javadoc": "/**\n * Simple types are defined as anything other than one of recognized\n * container types (arrays, Collections, Maps). For our needs we\n * need not know anything further, since we have no way of dealing\n * with generic types other than Collections and Maps.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_38/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
        "span_end": 250,
        "name": "SimpleType",
        "start_line": 13,
        "span_start": 251,
        "bug_name": "JacksonDatabind_38",
        "type": "class",
        "end_line": 283
      }
    ]
  },
  "JacksonDatabind_41": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_41/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 602,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 602,
        "bug_name": "JacksonDatabind_41",
        "type": "class",
        "end_line": 1355
      },
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_41/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 610,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 610,
        "bug_name": "JacksonDatabind_41",
        "type": "class",
        "end_line": 1355
      }
    ]
  },
  "JacksonDatabind_43": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Specialized {@link SettableBeanProperty} implementation used\n * for virtual property that represents Object Id that is used\n * for some POJO types (or properties).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_43/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
        "span_end": 87,
        "name": "ObjectIdValueProperty",
        "start_line": 16,
        "span_start": 78,
        "bug_name": "JacksonDatabind_43",
        "type": "class",
        "end_line": 113
      }
    ]
  },
  "JacksonDatabind_48": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n *  Object that contains baseline configuration for deserialization\n *  process. An instance is owned by {@link ObjectMapper}, which\n *  passes an immutable instance to be used for deserialization process.\n * <p>\n *  Note that instances are considered immutable and as such no copies\n *  should need to be created for sharing; all copying is done with\n *  \"fluent factory\" methods.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_48/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "span_end": 779,
        "name": "DeserializationConfig",
        "start_line": 30,
        "span_start": 780,
        "bug_name": "JacksonDatabind_48",
        "type": "class",
        "end_line": 963
      },
      {
        "javadoc": "/**\n *  Object that contains baseline configuration for serialization\n *  process. An instance is owned by {@link ObjectMapper}, which\n *  passes an immutable instance for serialization process to\n *  {@link SerializerProvider} and {@link SerializerFactory}\n *  (either directly, or through {@link ObjectWriter}.\n * <p>\n *  Note that instances are considered immutable and as such no copies\n *  should need to be created for sharing; all copying is done with\n *  \"fluent factory\" methods.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_48/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
        "span_end": 864,
        "name": "SerializationConfig",
        "start_line": 36,
        "span_start": 865,
        "bug_name": "JacksonDatabind_48",
        "type": "class",
        "end_line": 1007
      }
    ]
  },
  "JacksonDatabind_50": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * Deserializer class that can deserialize instances of\n * arbitrary bean objects, usually from JSON Object structs,\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 386,
        "name": "BeanDeserializer",
        "start_line": 16,
        "span_start": 387,
        "bug_name": "JacksonDatabind_50",
        "type": "class",
        "end_line": 936
      },
      {
        "javadoc": "/**\n * Deserializer class that can deserialize instances of\n * arbitrary bean objects, usually from JSON Object structs,\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 432,
        "name": "BeanDeserializer",
        "start_line": 16,
        "span_start": 429,
        "bug_name": "JacksonDatabind_50",
        "type": "class",
        "end_line": 936
      },
      {
        "javadoc": "/**\n * Deserializer class that can deserialize instances of\n * arbitrary bean objects, usually from JSON Object structs,\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 464,
        "name": "BeanDeserializer",
        "start_line": 16,
        "span_start": 465,
        "bug_name": "JacksonDatabind_50",
        "type": "class",
        "end_line": 936
      },
      {
        "javadoc": "/**\n * Deserializer class that can deserialize instances of\n * arbitrary bean objects, usually from JSON Object structs,\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 478,
        "name": "BeanDeserializer",
        "start_line": 16,
        "span_start": 479,
        "bug_name": "JacksonDatabind_50",
        "type": "class",
        "end_line": 936
      },
      {
        "javadoc": "/**\n * Deserializer class that can deserialize instances of\n * arbitrary bean objects, usually from JSON Object structs,\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 933,
        "name": "BeanDeserializer",
        "start_line": 16,
        "span_start": 933,
        "bug_name": "JacksonDatabind_50",
        "type": "class",
        "end_line": 936
      }
    ]
  },
  "JacksonDatabind_52": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_52/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 612,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 612,
        "bug_name": "JacksonDatabind_52",
        "type": "class",
        "end_line": 1647
      },
      {
        "javadoc": "/**\n * Helper class that is used to flatten JSON structure when using\n * \"external type id\" (see {@link com.fasterxml.jackson.annotation.JsonTypeInfo.As#EXTERNAL_PROPERTY}).\n * This is needed to store temporary state and buffer tokens, as the structure is\n * rearranged a bit so that actual type deserializer can resolve type and\n * finalize deserialization.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_52/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
        "span_end": 310,
        "name": "ExternalTypeHandler",
        "start_line": 19,
        "span_start": 310,
        "bug_name": "JacksonDatabind_52",
        "type": "class",
        "end_line": 378
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_52/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
        "span_end": 310,
        "name": "Builder",
        "start_line": 290,
        "span_start": 310,
        "bug_name": "JacksonDatabind_52",
        "type": "class",
        "end_line": 317
      }
    ]
  },
  "JacksonDatabind_53": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * Helper class used for resolving type parameters for given class\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "span_end": 303,
        "name": "TypeBindings",
        "start_line": 11,
        "span_start": 302,
        "bug_name": "JacksonDatabind_53",
        "type": "class",
        "end_line": 430
      },
      {
        "javadoc": "/**\n * Helper class used for resolving type parameters for given class\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "span_end": 427,
        "name": "TypeBindings",
        "start_line": 11,
        "span_start": 428,
        "bug_name": "JacksonDatabind_53",
        "type": "class",
        "end_line": 430
      },
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 117,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 117,
        "bug_name": "JacksonDatabind_53",
        "type": "class",
        "end_line": 1373
      },
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 402,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 385,
        "bug_name": "JacksonDatabind_53",
        "type": "class",
        "end_line": 1373
      },
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 458,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 456,
        "bug_name": "JacksonDatabind_53",
        "type": "class",
        "end_line": 1373
      },
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 1165,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 1160,
        "bug_name": "JacksonDatabind_53",
        "type": "class",
        "end_line": 1373
      },
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 1227,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 1225,
        "bug_name": "JacksonDatabind_53",
        "type": "class",
        "end_line": 1373
      }
    ]
  },
  "JacksonDatabind_54": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Helper class for {@link BeanSerializerFactory} that is used to\n * construct {@link BeanPropertyWriter} instances. Can be sub-classed\n * to change behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_54/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
        "span_end": 134,
        "name": "PropertyBuilder",
        "start_line": 15,
        "span_start": 134,
        "bug_name": "JacksonDatabind_54",
        "type": "class",
        "end_line": 331
      },
      {
        "javadoc": "/**\n * Helper class for {@link BeanSerializerFactory} that is used to\n * construct {@link BeanPropertyWriter} instances. Can be sub-classed\n * to change behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_54/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
        "span_end": 150,
        "name": "PropertyBuilder",
        "start_line": 15,
        "span_start": 150,
        "bug_name": "JacksonDatabind_54",
        "type": "class",
        "end_line": 331
      }
    ]
  },
  "JacksonDatabind_55": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_55/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java",
        "span_end": 82,
        "name": "StdKeySerializers",
        "start_line": 11,
        "span_start": 82,
        "bug_name": "JacksonDatabind_55",
        "type": "class",
        "end_line": 218
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_55/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java",
        "span_end": 215,
        "name": "StdKeySerializers",
        "start_line": 11,
        "span_start": 215,
        "bug_name": "JacksonDatabind_55",
        "type": "class",
        "end_line": 218
      }
    ]
  },
  "JacksonDatabind_56": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Base class for simple deserializers that only accept JSON String\n * values as the source.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_56/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
        "span_end": 237,
        "name": "FromStringDeserializer",
        "start_line": 26,
        "span_start": 231,
        "bug_name": "JacksonDatabind_56",
        "type": "class",
        "end_line": 293
      },
      {
        "javadoc": "/**\n * \"Chameleon\" deserializer that works on simple types that are deserialized\n * from a simple String.\n *\n * @since 2.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_56/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
        "span_end": 237,
        "name": "Std",
        "start_line": 181,
        "span_start": 231,
        "bug_name": "JacksonDatabind_56",
        "type": "class",
        "end_line": 292
      },
      {
        "javadoc": "/**\n * Base class for simple deserializers that only accept JSON String\n * values as the source.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_56/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
        "span_end": 292,
        "name": "FromStringDeserializer",
        "start_line": 26,
        "span_start": 292,
        "bug_name": "JacksonDatabind_56",
        "type": "class",
        "end_line": 293
      },
      {
        "javadoc": "/**\n * \"Chameleon\" deserializer that works on simple types that are deserialized\n * from a simple String.\n *\n * @since 2.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_56/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
        "span_end": 292,
        "name": "Std",
        "start_line": 181,
        "span_start": 292,
        "bug_name": "JacksonDatabind_56",
        "type": "class",
        "end_line": 292
      }
    ]
  },
  "JacksonDatabind_59": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n *  Base class for type token classes used both to contain information\n *  and as keys for deserializers.\n * <p>\n *  Instances can (only) be constructed by\n *  <code>com.fasterxml.jackson.databind.type.TypeFactory</code>.\n * <p>\n *  Since 2.2 this implements {@link java.lang.reflect.Type} to allow\n *  it to be pushed through interfaces that only expose that type.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_59/src/main/java/com/fasterxml/jackson/databind/JavaType.java",
        "span_end": 139,
        "name": "JavaType",
        "start_line": 20,
        "span_start": 140,
        "bug_name": "JacksonDatabind_59",
        "type": "class",
        "end_line": 551
      },
      {
        "javadoc": "/**\n * Type that represents things that act similar to {@link java.util.Collection};\n * but may or may not be instances of that interface.\n * This specifically allows framework to check for configuration and annotation\n * settings used for Map types, and pass these to custom handlers that may be more\n * familiar with actual type.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_59/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType.java",
        "span_end": 135,
        "name": "CollectionLikeType",
        "start_line": 15,
        "span_start": 136,
        "bug_name": "JacksonDatabind_59",
        "type": "class",
        "end_line": 250
      },
      {
        "javadoc": "/**\n * Type that represents Map-like types; things that consist of key/value pairs\n * but that do not necessarily implement {@link java.util.Map}, but that do not\n * have enough introspection functionality to allow for some level of generic\n * handling. This specifically allows framework to check for configuration and\n * annotation settings used for Map types, and pass these to custom handlers\n * that may be more familiar with actual type.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_59/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "span_end": 148,
        "name": "MapLikeType",
        "start_line": 16,
        "span_start": 148,
        "bug_name": "JacksonDatabind_59",
        "type": "class",
        "end_line": 287
      },
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_59/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 427,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 428,
        "bug_name": "JacksonDatabind_59",
        "type": "class",
        "end_line": 1426
      }
    ]
  },
  "JacksonDatabind_60": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n *  Serializer class that can serialize Object that have a\n *  {@link com.fasterxml.jackson.annotation.JsonValue} annotation to\n *  indicate that serialization should be done by calling the method\n *  annotated, and serializing result it returns.\n * <p>\n *  Implementation note: we will post-process resulting serializer\n *  (much like what is done with {@link BeanSerializer})\n *  to figure out actual serializers for final types.\n *   This must be done from {@link #createContextual} method, and NOT from constructor;\n *  otherwise we could end up with an infinite loop.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_60/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
        "span_end": 226,
        "name": "JsonValueSerializer",
        "start_line": 33,
        "span_start": 226,
        "bug_name": "JacksonDatabind_60",
        "type": "class",
        "end_line": 383
      },
      {
        "javadoc": "/**\n *  Serializer class that can serialize Object that have a\n *  {@link com.fasterxml.jackson.annotation.JsonValue} annotation to\n *  indicate that serialization should be done by calling the method\n *  annotated, and serializing result it returns.\n * <p>\n *  Implementation note: we will post-process resulting serializer\n *  (much like what is done with {@link BeanSerializer})\n *  to figure out actual serializers for final types.\n *   This must be done from {@link #createContextual} method, and NOT from constructor;\n *  otherwise we could end up with an infinite loop.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_60/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
        "span_end": 380,
        "name": "JsonValueSerializer",
        "start_line": 33,
        "span_start": 363,
        "bug_name": "JacksonDatabind_60",
        "type": "class",
        "end_line": 383
      }
    ]
  },
  "JacksonDatabind_61": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n *  ObjectMapper provides functionality for reading and writing JSON,\n *  either to and from basic POJOs (Plain Old Java Objects), or to and from\n *  a general-purpose JSON Tree Model ({@link JsonNode}), as well as\n *  related functionality for performing conversions.\n *  It is also highly customizable to work both with different styles of JSON\n *  content, and to support more advanced Object concepts such as\n *  polymorphism and Object identity.\n *  <code>ObjectMapper</code> also acts as a factory for more advanced {@link ObjectReader}\n *  and {@link ObjectWriter} classes.\n *  Mapper (and {@link ObjectReader}s, {@link ObjectWriter}s it constructs) will\n *  use instances of {@link JsonParser} and {@link JsonGenerator}\n *  for implementing actual reading/writing of JSON.\n *  Note that although most read and write methods are exposed through this class,\n *  some of the functionality is only exposed via {@link ObjectReader} and\n *  {@link ObjectWriter}: specifically, reading/writing of longer sequences of\n *  values is only available through {@link ObjectReader#readValues(InputStream)}\n *  and {@link ObjectWriter#writeValues(OutputStream)}.\n * <p>\n * Simplest usage is of form:\n * <pre>\n *   final ObjectMapper mapper = new ObjectMapper(); // can use static singleton, inject: just make sure to reuse!\n *   MyValue value = new MyValue();\n *   // ... and configure\n *   File newState = new File(\"my-stuff.json\");\n *   mapper.writeValue(newState, value); // writes JSON serialization of MyValue instance\n *   // or, read\n *   MyValue older = mapper.readValue(new File(\"my-older-stuff.json\"), MyValue.class);\n *\n *   // Or if you prefer JSON Tree representation:\n *   JsonNode root = mapper.readTree(newState);\n *   // and find values by, for example, using a {@link com.fasterxml.jackson.core.JsonPointer} expression:\n *   int age = root.at(\"/personal/age\").getValueAsInt();\n * </pre>\n * <p>\n *  The main conversion API is defined in {@link ObjectCodec}, so that\n *  implementation details of this class need not be exposed to\n *  streaming parser and generator classes. Usage via {@link ObjectCodec} is,\n *  however, usually only for cases where dependency to {@link ObjectMapper} is\n *  either not possible (from Streaming API), or undesireable (when only relying\n *  on Streaming API).\n * <p>\n *  Mapper instances are fully thread-safe provided that ALL configuration of the\n *  instance occurs before ANY read or write calls. If configuration of a mapper\n *  is modified after first usage, changes may or may not take effect, and configuration\n *  calls themselves may fail.\n *  If you need to use different configuration, you have two main possibilities:\n * <ul>\n *  <li>Construct and use {@link ObjectReader} for reading, {@link ObjectWriter} for writing.\n *     Both types are fully immutable and you can freely create new instances with different\n *     configuration using either factory methods of {@link ObjectMapper}, or readers/writers\n *     themselves. Construction of new {@link ObjectReader}s and {@link ObjectWriter}s is\n *     a very light-weight operation so it is usually appropriate to create these on per-call\n *     basis, as needed, for configuring things like optional indentation of JSON.\n *   </li>\n *  <li>If the specific kind of configurability is not available via {@link ObjectReader} and\n *    {@link ObjectWriter}, you may need to use multiple {@link ObjectMapper} instead (for example:\n *    you can not change mix-in annotations on-the-fly; or, set of custom (de)serializers).\n *    To help with this usage, you may want to use method {@link #copy()} which creates a clone\n *    of the mapper with specific configuration, and allows configuration of the copied instance\n *    before it gets used. Note that {@link #copy} operation is as expensive as constructing\n *    a new {@link ObjectMapper} instance: if possible, you should still pool and reuse mappers\n *    if you intend to use them for multiple operations.\n *   </li>\n *  </ul>\n * <p>\n *  Note on caching: root-level deserializers are always cached, and accessed\n *  using full (generics-aware) type information. This is different from\n *  caching of referenced types, which is more limited and is done only\n *  for a subset of all deserializer types. The main reason for difference\n *  is that at root-level there is no incoming reference (and hence no\n *  referencing property, no referral information or annotations to\n *  produce differing deserializers), and that the performance impact\n *  greatest at root level (since it'll essentially cache the full\n *  graph of deserializers involved).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_61/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "span_end": 231,
        "name": "ObjectMapper",
        "start_line": 114,
        "span_start": 232,
        "bug_name": "JacksonDatabind_61",
        "type": "class",
        "end_line": 3917
      },
      {
        "javadoc": "/**\n *  Customized {@link TypeResolverBuilder} that provides type resolver builders\n *  used with so-called \"default typing\"\n *  (see {@link ObjectMapper#enableDefaultTyping()} for details).\n * <p>\n *  Type resolver construction is based on configuration: implementation takes care\n *  of only providing builders in cases where type information should be applied.\n *  This is important since build calls may be sent for any and all types, and\n *  type information should NOT be applied to all of them.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_61/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "span_end": 231,
        "name": "DefaultTypeResolverBuilder",
        "start_line": 191,
        "span_start": 232,
        "bug_name": "JacksonDatabind_61",
        "type": "class",
        "end_line": 264
      },
      {
        "javadoc": "/**\n * Default {@link TypeResolverBuilder} implementation.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_61/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "span_end": 73,
        "name": "StdTypeResolverBuilder",
        "start_line": 15,
        "span_start": 74,
        "bug_name": "JacksonDatabind_61",
        "type": "class",
        "end_line": 228
      },
      {
        "javadoc": "/**\n * Default {@link TypeResolverBuilder} implementation.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_61/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "span_end": 103,
        "name": "StdTypeResolverBuilder",
        "start_line": 15,
        "span_start": 104,
        "bug_name": "JacksonDatabind_61",
        "type": "class",
        "end_line": 228
      }
    ]
  },
  "JacksonDatabind_65": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Default {@link KeyDeserializer} implementation used for most {@link java.util.Map}\n * types Jackson supports.\n * Implemented as \"chameleon\" (or swiss pocket knife) class; not particularly elegant,\n * but helps reduce number of classes and jar size (class metadata adds significant\n * per-class overhead; much more than bytecode).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_65/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "span_end": 128,
        "name": "StdKeyDeserializer",
        "start_line": 26,
        "span_start": 128,
        "bug_name": "JacksonDatabind_65",
        "type": "class",
        "end_line": 427
      },
      {
        "javadoc": "/**\n *  Default {@link BeanDescription} implementation used by Jackson.\n * <p>\n *  Although sub-classing is a theoretical possibility there are no known\n *  use cases for that, nor is such usage tested or supported.\n *  Separation from API is mostly to isolate some implementation details\n *  here and keep API simple.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_65/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "span_end": 525,
        "name": "BasicBeanDescription",
        "start_line": 27,
        "span_start": 525,
        "bug_name": "JacksonDatabind_65",
        "type": "class",
        "end_line": 696
      },
      {
        "javadoc": "/**\n *  Default {@link BeanDescription} implementation used by Jackson.\n * <p>\n *  Although sub-classing is a theoretical possibility there are no known\n *  use cases for that, nor is such usage tested or supported.\n *  Separation from API is mostly to isolate some implementation details\n *  here and keep API simple.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_65/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "span_end": 558,
        "name": "BasicBeanDescription",
        "start_line": 27,
        "span_start": 558,
        "bug_name": "JacksonDatabind_65",
        "type": "class",
        "end_line": 696
      }
    ]
  },
  "JacksonDatabind_66": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Default {@link KeyDeserializer} implementation used for most {@link java.util.Map}\n * types Jackson supports.\n * Implemented as \"chameleon\" (or swiss pocket knife) class; not particularly elegant,\n * but helps reduce number of classes and jar size (class metadata adds significant\n * per-class overhead; much more than bytecode).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_66/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "span_end": 316,
        "name": "StdKeyDeserializer",
        "start_line": 26,
        "span_start": 314,
        "bug_name": "JacksonDatabind_66",
        "type": "class",
        "end_line": 429
      },
      {
        "javadoc": "/**\n * Key deserializer that wraps a \"regular\" deserializer (but one\n * that must recognize FIELD_NAMEs as text!) to reuse existing\n * handlers as key handlers.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_66/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "span_end": 316,
        "name": "DelegatingKD",
        "start_line": 291,
        "span_start": 314,
        "bug_name": "JacksonDatabind_66",
        "type": "class",
        "end_line": 327
      }
    ]
  },
  "JacksonDatabind_68": {
    "bug_count": 10,
    "entries": [
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1194,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1192,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      },
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1225,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1220,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      },
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1238,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1235,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      },
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1250,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1248,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      },
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1273,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1270,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      },
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1295,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1292,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      },
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1307,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1305,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      },
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1322,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1319,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      },
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1359,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1336,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      },
      {
        "javadoc": "/**\n * Base class for <code>BeanDeserializer</code>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1399,
        "name": "BeanDeserializerBase",
        "start_line": 29,
        "span_start": 1400,
        "bug_name": "JacksonDatabind_68",
        "type": "class",
        "end_line": 1659
      }
    ]
  },
  "JacksonDatabind_69": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * Container class for storing information on creators (based on annotations,\n * visibility), to be able to build actual instantiator later on.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 176,
        "name": "CreatorCollector",
        "start_line": 20,
        "span_start": 165,
        "bug_name": "JacksonDatabind_69",
        "type": "class",
        "end_line": 392
      },
      {
        "javadoc": "/**\n * Container class for storing information on creators (based on annotations,\n * visibility), to be able to build actual instantiator later on.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 194,
        "name": "CreatorCollector",
        "start_line": 20,
        "span_start": 195,
        "bug_name": "JacksonDatabind_69",
        "type": "class",
        "end_line": 392
      },
      {
        "javadoc": "/**\n * Container class for storing information on creators (based on annotations,\n * visibility), to be able to build actual instantiator later on.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 299,
        "name": "CreatorCollector",
        "start_line": 20,
        "span_start": 299,
        "bug_name": "JacksonDatabind_69",
        "type": "class",
        "end_line": 392
      },
      {
        "javadoc": "/**\n * Container class for storing information on creators (based on annotations,\n * visibility), to be able to build actual instantiator later on.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 310,
        "name": "CreatorCollector",
        "start_line": 20,
        "span_start": 310,
        "bug_name": "JacksonDatabind_69",
        "type": "class",
        "end_line": 392
      },
      {
        "javadoc": "/**\n * Container class for storing information on creators (based on annotations,\n * visibility), to be able to build actual instantiator later on.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 332,
        "name": "CreatorCollector",
        "start_line": 20,
        "span_start": 332,
        "bug_name": "JacksonDatabind_69",
        "type": "class",
        "end_line": 392
      },
      {
        "javadoc": "/**\n * Container class for storing information on creators (based on annotations,\n * visibility), to be able to build actual instantiator later on.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 340,
        "name": "CreatorCollector",
        "start_line": 20,
        "span_start": 341,
        "bug_name": "JacksonDatabind_69",
        "type": "class",
        "end_line": 392
      }
    ]
  },
  "JacksonDatabind_72": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * This sub-class is used to handle special case of value being a\n * non-static inner class. If so, we will have to use a special\n * alternative for default constructor; but otherwise can delegate\n * to regular implementation.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_72/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java",
        "span_end": 92,
        "name": "InnerClassProperty",
        "start_line": 19,
        "span_start": 93,
        "bug_name": "JacksonDatabind_72",
        "type": "class",
        "end_line": 167
      },
      {
        "javadoc": "/**\n * This sub-class is used to handle special case of value being a\n * non-static inner class. If so, we will have to use a special\n * alternative for default constructor; but otherwise can delegate\n * to regular implementation.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_72/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java",
        "span_end": 167,
        "name": "InnerClassProperty",
        "start_line": 19,
        "span_start": 167,
        "bug_name": "JacksonDatabind_72",
        "type": "class",
        "end_line": 167
      }
    ]
  },
  "JacksonDatabind_73": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Helper class used for aggregating information about all possible\n * properties of a POJO.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_73/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "span_end": 731,
        "name": "POJOPropertiesCollector",
        "start_line": 17,
        "span_start": 731,
        "bug_name": "JacksonDatabind_73",
        "type": "class",
        "end_line": 1079
      },
      {
        "javadoc": "/**\n * Helper class used for aggregating information about a single\n * potential POJO property.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_73/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "span_end": 644,
        "name": "POJOPropertyBuilder",
        "start_line": 15,
        "span_start": 644,
        "bug_name": "JacksonDatabind_73",
        "type": "class",
        "end_line": 1238
      },
      {
        "javadoc": "/**\n * Helper class used for aggregating information about a single\n * potential POJO property.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_73/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "span_end": 682,
        "name": "POJOPropertyBuilder",
        "start_line": 15,
        "span_start": 683,
        "bug_name": "JacksonDatabind_73",
        "type": "class",
        "end_line": 1238
      }
    ]
  },
  "JacksonDatabind_75": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n *  Standard serializer used for {@link java.lang.Enum} types.\n * <p>\n *  Based on {@link StdScalarSerializer} since the JSON value is\n *  scalar (String).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_75/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
        "span_end": 86,
        "name": "EnumSerializer",
        "start_line": 27,
        "span_start": 86,
        "bug_name": "JacksonDatabind_75",
        "type": "class",
        "end_line": 240
      },
      {
        "javadoc": "/**\n *  Standard serializer used for {@link java.lang.Enum} types.\n * <p>\n *  Based on {@link StdScalarSerializer} since the JSON value is\n *  scalar (String).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_75/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
        "span_end": 104,
        "name": "EnumSerializer",
        "start_line": 27,
        "span_start": 104,
        "bug_name": "JacksonDatabind_75",
        "type": "class",
        "end_line": 240
      },
      {
        "javadoc": "/**\n *  Standard serializer used for {@link java.lang.Enum} types.\n * <p>\n *  Based on {@link StdScalarSerializer} since the JSON value is\n *  scalar (String).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_75/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
        "span_end": 225,
        "name": "EnumSerializer",
        "start_line": 27,
        "span_start": 217,
        "bug_name": "JacksonDatabind_75",
        "type": "class",
        "end_line": 240
      }
    ]
  },
  "JacksonDatabind_77": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n *  Concrete deserializer factory class that adds full Bean deserializer\n *  construction logic using class introspection.\n *  Note that factories specifically do not implement any form of caching:\n *  aside from configuration they are stateless; caching is implemented\n *  by other components.\n * <p>\n *  Instances of this class are fully immutable as all configuration is\n *  done by using \"fluent factories\" (methods that construct new factory\n *  instances with different configuration, instead of modifying instance).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_77/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 142,
        "name": "BeanDeserializerFactory",
        "start_line": 30,
        "span_start": 143,
        "bug_name": "JacksonDatabind_77",
        "type": "class",
        "end_line": 845
      },
      {
        "javadoc": "/**\n *  Concrete deserializer factory class that adds full Bean deserializer\n *  construction logic using class introspection.\n *  Note that factories specifically do not implement any form of caching:\n *  aside from configuration they are stateless; caching is implemented\n *  by other components.\n * <p>\n *  Instances of this class are fully immutable as all configuration is\n *  done by using \"fluent factories\" (methods that construct new factory\n *  instances with different configuration, instead of modifying instance).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_77/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 842,
        "name": "BeanDeserializerFactory",
        "start_line": 30,
        "span_start": 842,
        "bug_name": "JacksonDatabind_77",
        "type": "class",
        "end_line": 845
      }
    ]
  },
  "JacksonDatabind_78": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n *  Concrete deserializer factory class that adds full Bean deserializer\n *  construction logic using class introspection.\n *  Note that factories specifically do not implement any form of caching:\n *  aside from configuration they are stateless; caching is implemented\n *  by other components.\n * <p>\n *  Instances of this class are fully immutable as all configuration is\n *  done by using \"fluent factories\" (methods that construct new factory\n *  instances with different configuration, instead of modifying instance).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_78/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 55,
        "name": "BeanDeserializerFactory",
        "start_line": 29,
        "span_start": 48,
        "bug_name": "JacksonDatabind_78",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n *  Concrete deserializer factory class that adds full Bean deserializer\n *  construction logic using class introspection.\n *  Note that factories specifically do not implement any form of caching:\n *  aside from configuration they are stateless; caching is implemented\n *  by other components.\n * <p>\n *  Instances of this class are fully immutable as all configuration is\n *  done by using \"fluent factories\" (methods that construct new factory\n *  instances with different configuration, instead of modifying instance).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_78/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 155,
        "name": "BeanDeserializerFactory",
        "start_line": 29,
        "span_start": 156,
        "bug_name": "JacksonDatabind_78",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n *  Concrete deserializer factory class that adds full Bean deserializer\n *  construction logic using class introspection.\n *  Note that factories specifically do not implement any form of caching:\n *  aside from configuration they are stateless; caching is implemented\n *  by other components.\n * <p>\n *  Instances of this class are fully immutable as all configuration is\n *  done by using \"fluent factories\" (methods that construct new factory\n *  instances with different configuration, instead of modifying instance).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_78/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 878,
        "name": "BeanDeserializerFactory",
        "start_line": 29,
        "span_start": 878,
        "bug_name": "JacksonDatabind_78",
        "type": "class",
        "end_line": 881
      }
    ]
  },
  "JacksonDatabind_79": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_79/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 582,
        "name": "JacksonAnnotationIntrospector",
        "start_line": 29,
        "span_start": 579,
        "bug_name": "JacksonDatabind_79",
        "type": "class",
        "end_line": 1316
      },
      {
        "javadoc": "/**\n * Container object that encapsulates information usually\n * derived from {@link JsonIdentityInfo} annotation or its\n * custom alternatives\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_79/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java",
        "span_end": 24,
        "name": "ObjectIdInfo",
        "start_line": 14,
        "span_start": 25,
        "bug_name": "JacksonDatabind_79",
        "type": "class",
        "end_line": 84
      },
      {
        "javadoc": "/**\n * Container object that encapsulates information usually\n * derived from {@link JsonIdentityInfo} annotation or its\n * custom alternatives\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_79/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java",
        "span_end": 62,
        "name": "ObjectIdInfo",
        "start_line": 14,
        "span_start": 63,
        "bug_name": "JacksonDatabind_79",
        "type": "class",
        "end_line": 84
      },
      {
        "javadoc": "/**\n * Base class both for the standard bean serializer, and couple\n * of variants that only differ in small details.\n * Can be used for custom bean serializers as well, although that\n * is not the primary design goal.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_79/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
        "span_end": 434,
        "name": "BeanSerializerBase",
        "start_line": 36,
        "span_start": 432,
        "bug_name": "JacksonDatabind_79",
        "type": "class",
        "end_line": 824
      }
    ]
  },
  "JacksonDatabind_80": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Standard {@link SubtypeResolver} implementation.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_80/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "span_end": 78,
        "name": "StdSubtypeResolver",
        "start_line": 16,
        "span_start": 79,
        "bug_name": "JacksonDatabind_80",
        "type": "class",
        "end_line": 291
      },
      {
        "javadoc": "/**\n * Standard {@link SubtypeResolver} implementation.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_80/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "span_end": 85,
        "name": "StdSubtypeResolver",
        "start_line": 16,
        "span_start": 86,
        "bug_name": "JacksonDatabind_80",
        "type": "class",
        "end_line": 291
      },
      {
        "javadoc": "/**\n * Standard {@link SubtypeResolver} implementation.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_80/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "span_end": 150,
        "name": "StdSubtypeResolver",
        "start_line": 16,
        "span_start": 145,
        "bug_name": "JacksonDatabind_80",
        "type": "class",
        "end_line": 291
      }
    ]
  },
  "JacksonDatabind_81": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 764,
        "name": "JacksonAnnotationIntrospector",
        "start_line": 30,
        "span_start": 764,
        "bug_name": "JacksonDatabind_81",
        "type": "class",
        "end_line": 1458
      },
      {
        "javadoc": "/**\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 797,
        "name": "JacksonAnnotationIntrospector",
        "start_line": 30,
        "span_start": 797,
        "bug_name": "JacksonDatabind_81",
        "type": "class",
        "end_line": 1458
      },
      {
        "javadoc": "/**\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 831,
        "name": "JacksonAnnotationIntrospector",
        "start_line": 30,
        "span_start": 831,
        "bug_name": "JacksonDatabind_81",
        "type": "class",
        "end_line": 1458
      },
      {
        "javadoc": "/**\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 1119,
        "name": "JacksonAnnotationIntrospector",
        "start_line": 30,
        "span_start": 1119,
        "bug_name": "JacksonDatabind_81",
        "type": "class",
        "end_line": 1458
      },
      {
        "javadoc": "/**\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 1135,
        "name": "JacksonAnnotationIntrospector",
        "start_line": 30,
        "span_start": 1135,
        "bug_name": "JacksonDatabind_81",
        "type": "class",
        "end_line": 1458
      },
      {
        "javadoc": "/**\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 1151,
        "name": "JacksonAnnotationIntrospector",
        "start_line": 30,
        "span_start": 1151,
        "bug_name": "JacksonDatabind_81",
        "type": "class",
        "end_line": 1458
      },
      {
        "javadoc": "/**\n * {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 1457,
        "name": "JacksonAnnotationIntrospector",
        "start_line": 30,
        "span_start": 1457,
        "bug_name": "JacksonDatabind_81",
        "type": "class",
        "end_line": 1458
      }
    ]
  },
  "JacksonDatabind_87": {
    "bug_count": 8,
    "entries": [
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 46,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 47,
        "bug_name": "JacksonDatabind_87",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 64,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 65,
        "bug_name": "JacksonDatabind_87",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 83,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 84,
        "bug_name": "JacksonDatabind_87",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 101,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 102,
        "bug_name": "JacksonDatabind_87",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 131,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 132,
        "bug_name": "JacksonDatabind_87",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 517,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 514,
        "bug_name": "JacksonDatabind_87",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 536,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 526,
        "bug_name": "JacksonDatabind_87",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 596,
        "name": "StdDateFormat",
        "start_line": 18,
        "span_start": 597,
        "bug_name": "JacksonDatabind_87",
        "type": "class",
        "end_line": 600
      }
    ]
  },
  "JacksonDatabind_90": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n *  Class that defines simple API implemented by objects that create value\n *  instances.  Some or all of properties of value instances may\n *  be initialized by instantiator, rest being populated by deserializer,\n *  to which value instance is passed.\n *  Since different kinds of JSON values (structured and scalar)\n *  may be bound to Java values, in some cases instantiator\n *  fully defines resulting value; this is the case when JSON value\n *  is a scalar value (String, number, boolean).\n * <p>\n *  Note that this type is not parameterized (even though it would seemingly\n *  make sense), because such type information can not be use effectively\n *  during runtime: access is always using either wildcard type, or just\n *  basic {@link java.lang.Object}; and so adding type parameter seems\n *  like unnecessary extra work.\n * <p>\n *  Actual implementations are strongly recommended to be based on\n *  {@link com.fasterxml.jackson.databind.deser.std.StdValueInstantiator}\n *  which implements all methods, and as such will be compatible\n *  across versions even if new methods were added to this interface.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_90/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
        "span_end": 72,
        "name": "ValueInstantiator",
        "start_line": 31,
        "span_start": 72,
        "bug_name": "JacksonDatabind_90",
        "type": "class",
        "end_line": 408
      },
      {
        "javadoc": "/**\n * Default {@link ValueInstantiator} implementation, which supports\n * Creator methods that can be indicated by standard Jackson\n * annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_90/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "span_end": 231,
        "name": "StdValueInstantiator",
        "start_line": 17,
        "span_start": 232,
        "bug_name": "JacksonDatabind_90",
        "type": "class",
        "end_line": 537
      }
    ]
  },
  "JacksonDatabind_94": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Helper class used to encapsulate rules that determine subtypes that\n * are invalid to use, even with default typing, mostly due to security\n * concerns.\n * Used by <code>BeanDeserializerFacotry</code>\n *\n * @since 2.8.11\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_94/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "span_end": 22,
        "name": "SubTypeValidator",
        "start_line": 19,
        "span_start": 23,
        "bug_name": "JacksonDatabind_94",
        "type": "class",
        "end_line": 112
      },
      {
        "javadoc": "/**\n * Helper class used to encapsulate rules that determine subtypes that\n * are invalid to use, even with default typing, mostly due to security\n * concerns.\n * Used by <code>BeanDeserializerFacotry</code>\n *\n * @since 2.8.11\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_94/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "span_end": 103,
        "name": "SubTypeValidator",
        "start_line": 19,
        "span_start": 98,
        "bug_name": "JacksonDatabind_94",
        "type": "class",
        "end_line": 112
      }
    ]
  },
  "JacksonDatabind_95": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_95/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 355,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 355,
        "bug_name": "JacksonDatabind_95",
        "type": "class",
        "end_line": 1437
      },
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_95/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 366,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 366,
        "bug_name": "JacksonDatabind_95",
        "type": "class",
        "end_line": 1437
      },
      {
        "javadoc": "/**\n *  Class used for creating concrete {@link JavaType} instances,\n *  given various inputs.\n * <p>\n *  Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n *  as well as many objects it constructs (like\n *  {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n *  {@link com.fasterxml.jackson.databind.SerializationConfig})),\n *  but usually those objects also\n *  expose convenience methods (<code>constructType</code>).\n *  So, you can do for example:\n * <pre>\n *    JavaType stringType = mapper.constructType(String.class);\n * </pre>\n *  However, more advanced methods are only exposed by factory so that you\n *  may need to use:\n * <pre>\n *    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_95/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 896,
        "name": "TypeFactory",
        "start_line": 33,
        "span_start": 896,
        "bug_name": "JacksonDatabind_95",
        "type": "class",
        "end_line": 1437
      },
      {
        "javadoc": "/**\n * Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_95/src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java",
        "span_end": 59,
        "name": "TypeParser",
        "start_line": 11,
        "span_start": 59,
        "bug_name": "JacksonDatabind_95",
        "type": "class",
        "end_line": 137
      }
    ]
  },
  "JacksonDatabind_103": {
    "bug_count": 24,
    "entries": [
      {
        "javadoc": "/**\n *  Standard implementation used by {@link ObjectMapper}:\n *  adds methods only exposed to {@link ObjectMapper},\n *  as well as constructors.\n * <p>\n *  Note that class is abstract just because it does not\n *  define {@link #createInstance} method.\n * <p>\n *  Also note that all custom {@link SerializerProvider}\n *  implementations must sub-class this class: {@link ObjectMapper}\n *  requires this type, not basic provider type.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "span_end": 505,
        "name": "DefaultSerializerProvider",
        "start_line": 32,
        "span_start": 505,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 631
      },
      {
        "javadoc": "/**\n * Helper class for {@link BeanSerializerFactory} that is used to\n * construct {@link BeanPropertyWriter} instances. Can be sub-classed\n * to change behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
        "span_end": 105,
        "name": "PropertyBuilder",
        "start_line": 15,
        "span_start": 103,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 385
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java",
        "span_end": 751,
        "name": "ClassUtil",
        "start_line": 15,
        "span_start": 752,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 1317
      },
      {
        "javadoc": "/**\n *  Concrete deserializer factory class that adds full Bean deserializer\n *  construction logic using class introspection.\n *  Note that factories specifically do not implement any form of caching:\n *  aside from configuration they are stateless; caching is implemented\n *  by other components.\n * <p>\n *  Instances of this class are fully immutable as all configuration is\n *  done by using \"fluent factories\" (methods that construct new factory\n *  instances with different configuration, instead of modifying instance).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 281,
        "name": "BeanDeserializerFactory",
        "start_line": 29,
        "span_start": 281,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 921
      },
      {
        "javadoc": "/**\n * Class that defines caching layer between callers (like\n * {@link ObjectMapper},\n * {@link com.fasterxml.jackson.databind.DeserializationContext})\n * and classes that construct deserializers\n * ({@link com.fasterxml.jackson.databind.deser.DeserializerFactory}).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "span_end": 268,
        "name": "DeserializerCache",
        "start_line": 21,
        "span_start": 268,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 601
      },
      {
        "javadoc": "/**\n *  Class that represents a \"wildcard\" set method which can be used\n *  to generically set values of otherwise unmapped (aka \"unknown\")\n *  properties read from Json content.\n * <p>\n *  !!! Note: might make sense to refactor to share some code\n *  with {@link SettableBeanProperty}?\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java",
        "span_end": 202,
        "name": "SettableAnyProperty",
        "start_line": 23,
        "span_start": 202,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 246
      },
      {
        "javadoc": "/**\n *  Class that represents a \"wildcard\" set method which can be used\n *  to generically set values of otherwise unmapped (aka \"unknown\")\n *  properties read from Json content.\n * <p>\n *  !!! Note: might make sense to refactor to share some code\n *  with {@link SettableBeanProperty}?\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java",
        "span_end": 214,
        "name": "SettableAnyProperty",
        "start_line": 23,
        "span_start": 214,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 246
      },
      {
        "javadoc": "/**\n * Base class for deserializable properties of a bean: contains\n * both type and name definitions, and reflection-based set functionality.\n * Concrete sub-classes implement details, so that field- and\n * setter-backed properties, as well as a few more esoteric variations,\n * can be handled.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "span_end": 590,
        "name": "SettableBeanProperty",
        "start_line": 25,
        "span_start": 590,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 782
      },
      {
        "javadoc": "/**\n * Base class for deserializable properties of a bean: contains\n * both type and name definitions, and reflection-based set functionality.\n * Concrete sub-classes implement details, so that field- and\n * setter-backed properties, as well as a few more esoteric variations,\n * can be handled.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "span_end": 611,
        "name": "SettableBeanProperty",
        "start_line": 25,
        "span_start": 611,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 782
      },
      {
        "javadoc": "/**\n * Base class for common deserializers. Contains shared\n * base functionality for dealing with primitive values, such\n * as (re)parsing from String.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "span_end": 526,
        "name": "StdDeserializer",
        "start_line": 30,
        "span_start": 526,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 1225
      },
      {
        "javadoc": "/**\n * Default {@link KeyDeserializer} implementation used for most {@link java.util.Map}\n * types Jackson supports.\n * Implemented as \"chameleon\" (or swiss pocket knife) class; not particularly elegant,\n * but helps reduce number of classes and jar size (class metadata adds significant\n * per-class overhead; much more than bytecode).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "span_end": 135,
        "name": "StdKeyDeserializer",
        "start_line": 28,
        "span_start": 135,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 458
      },
      {
        "javadoc": "/**\n * Default {@link KeyDeserializer} implementation used for most {@link java.util.Map}\n * types Jackson supports.\n * Implemented as \"chameleon\" (or swiss pocket knife) class; not particularly elegant,\n * but helps reduce number of classes and jar size (class metadata adds significant\n * per-class overhead; much more than bytecode).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "span_end": 262,
        "name": "StdKeyDeserializer",
        "start_line": 28,
        "span_start": 262,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 458
      },
      {
        "javadoc": "/**\n * Default {@link ValueInstantiator} implementation, which supports\n * Creator methods that can be indicated by standard Jackson\n * annotations.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "span_end": 456,
        "name": "StdValueInstantiator",
        "start_line": 18,
        "span_start": 456,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 543
      },
      {
        "javadoc": "/**\n * Shared base class for {@link DeserializationContext} and\n * {@link SerializerProvider}, context objects passed through data-binding\n * process. Designed so that some of implementations can rely on shared\n * aspects like access to secondary contextual objects like type factories\n * or handler instantiators.\n *\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java",
        "span_end": 195,
        "name": "DatabindContext",
        "start_line": 26,
        "span_start": 195,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 376
      },
      {
        "javadoc": "/**\n *  Context for the process of deserialization a single root-level value.\n *  Used to allow passing in configuration settings and reusable temporary\n *  objects (scrap arrays, containers).\n * <p>\n *  Instance life-cycle is such that a partially configured \"blueprint\" object\n *  is registered with {@link ObjectMapper} (and {@link ObjectReader},\n *  and when actual instance is needed for deserialization,\n *  a fully configured instance will be created using a method in extended internal\n *   API of sub-class\n *  ({@link com.fasterxml.jackson.databind.deser.DefaultDeserializationContext#createInstance}).\n *  Each instance is guaranteed to only be used from single-threaded context;\n *  instances may be reused if (and only if) no configuration has changed.\n * <p>\n *  Defined as abstract class so that implementations must define methods\n *  for reconfiguring blueprints and creating instances.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
        "span_end": 714,
        "name": "DeserializationContext",
        "start_line": 50,
        "span_start": 714,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 1777
      },
      {
        "javadoc": "/**\n *  Context for the process of deserialization a single root-level value.\n *  Used to allow passing in configuration settings and reusable temporary\n *  objects (scrap arrays, containers).\n * <p>\n *  Instance life-cycle is such that a partially configured \"blueprint\" object\n *  is registered with {@link ObjectMapper} (and {@link ObjectReader},\n *  and when actual instance is needed for deserialization,\n *  a fully configured instance will be created using a method in extended internal\n *   API of sub-class\n *  ({@link com.fasterxml.jackson.databind.deser.DefaultDeserializationContext#createInstance}).\n *  Each instance is guaranteed to only be used from single-threaded context;\n *  instances may be reused if (and only if) no configuration has changed.\n * <p>\n *  Defined as abstract class so that implementations must define methods\n *  for reconfiguring blueprints and creating instances.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
        "span_end": 1603,
        "name": "DeserializationContext",
        "start_line": 50,
        "span_start": 1603,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 1777
      },
      {
        "javadoc": "/**\n *  Checked exception used to signal fatal problems with mapping of\n *  content, distinct from low-level I/O problems (signaled using\n *  simple {@link java.io.IOException}s) or data encoding/decoding\n *  problems (signaled with {@link com.fasterxml.jackson.core.JsonParseException},\n *  {@link com.fasterxml.jackson.core.JsonGenerationException}).\n * <p>\n *  One additional feature is the ability to denote relevant path\n *  of references (during serialization/deserialization) to help in\n *  troubleshooting.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
        "span_end": 339,
        "name": "JsonMappingException",
        "start_line": 22,
        "span_start": 339,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 533
      },
      {
        "javadoc": "/**\n *  Checked exception used to signal fatal problems with mapping of\n *  content, distinct from low-level I/O problems (signaled using\n *  simple {@link java.io.IOException}s) or data encoding/decoding\n *  problems (signaled with {@link com.fasterxml.jackson.core.JsonParseException},\n *  {@link com.fasterxml.jackson.core.JsonGenerationException}).\n * <p>\n *  One additional feature is the ability to denote relevant path\n *  of references (during serialization/deserialization) to help in\n *  troubleshooting.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
        "span_end": 380,
        "name": "JsonMappingException",
        "start_line": 22,
        "span_start": 380,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 533
      },
      {
        "javadoc": "/**\n *  Class that defines API used by {@link ObjectMapper} and\n *  {@link JsonSerializer}s to obtain serializers capable of serializing\n *  instances of specific types; as well as the default implementation\n *  of the functionality.\n * <p>\n *  Provider handles caching aspects of serializer handling; all construction\n *  details are delegated to {@link SerializerFactory} instance.\n * <p>\n *  Object life-cycle is such that an initial instance (\"blueprint\") is created\n *  and referenced by {@link ObjectMapper} and {@link ObjectWriter} intances;\n *  but for actual usage, a configured instance is created by using\n *  a create method in sub-class\n *  {@link com.fasterxml.jackson.databind.ser.DefaultSerializerProvider}.\n *  Only this instance can be used for actual serialization calls; blueprint\n *  object is only to be used for creating instances.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "span_end": 1341,
        "name": "SerializerProvider",
        "start_line": 47,
        "span_start": 1341,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 1444
      },
      {
        "javadoc": "/**\n *  Class that defines API used by {@link ObjectMapper} and\n *  {@link JsonSerializer}s to obtain serializers capable of serializing\n *  instances of specific types; as well as the default implementation\n *  of the functionality.\n * <p>\n *  Provider handles caching aspects of serializer handling; all construction\n *  details are delegated to {@link SerializerFactory} instance.\n * <p>\n *  Object life-cycle is such that an initial instance (\"blueprint\") is created\n *  and referenced by {@link ObjectMapper} and {@link ObjectWriter} intances;\n *  but for actual usage, a configured instance is created by using\n *  a create method in sub-class\n *  {@link com.fasterxml.jackson.databind.ser.DefaultSerializerProvider}.\n *  Only this instance can be used for actual serialization calls; blueprint\n *  object is only to be used for creating instances.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "span_end": 1361,
        "name": "SerializerProvider",
        "start_line": 47,
        "span_start": 1361,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 1444
      },
      {
        "javadoc": "/**\n *  Abstract factory base class that can provide deserializers for standard\n *  JDK classes, including collection classes and simple heuristics for\n *  \"upcasting\" common collection interface types\n *  (such as {@link java.util.Collection}).\n * <p>\n *  Since all simple deserializers are eagerly instantiated, and there is\n *  no additional introspection or customizability of these types,\n *  this factory is stateless.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "span_end": 1589,
        "name": "BasicDeserializerFactory",
        "start_line": 39,
        "span_start": 1589,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 2177
      },
      {
        "javadoc": "/**\n *  Concrete deserializer factory class that adds full Bean deserializer\n *  construction logic using class introspection.\n *  Note that factories specifically do not implement any form of caching:\n *  aside from configuration they are stateless; caching is implemented\n *  by other components.\n * <p>\n *  Instances of this class are fully immutable as all configuration is\n *  done by using \"fluent factories\" (methods that construct new factory\n *  instances with different configuration, instead of modifying instance).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 222,
        "name": "BeanDeserializerFactory",
        "start_line": 29,
        "span_start": 222,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 921
      },
      {
        "javadoc": "/**\n *  Default {@link BeanDescription} implementation used by Jackson.\n * <p>\n *  Although sub-classing is a theoretical possibility there are no known\n *  use cases for that, nor is such usage tested or supported.\n *  Separation from API is mostly to isolate some implementation details\n *  here and keep API simple.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "span_end": 364,
        "name": "BasicBeanDescription",
        "start_line": 28,
        "span_start": 364,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 752
      },
      {
        "javadoc": "/**\n *  Standard implementation used by {@link ObjectMapper}:\n *  adds methods only exposed to {@link ObjectMapper},\n *  as well as constructors.\n * <p>\n *  Note that class is abstract just because it does not\n *  define {@link #createInstance} method.\n * <p>\n *  Also note that all custom {@link SerializerProvider}\n *  implementations must sub-class this class: {@link ObjectMapper}\n *  requires this type, not basic provider type.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "span_end": 171,
        "name": "DefaultSerializerProvider",
        "start_line": 32,
        "span_start": 171,
        "bug_name": "JacksonDatabind_103",
        "type": "class",
        "end_line": 631
      }
    ]
  },
  "JacksonDatabind_104": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_104/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 446,
        "name": "StdDateFormat",
        "start_line": 20,
        "span_start": 441,
        "bug_name": "JacksonDatabind_104",
        "type": "class",
        "end_line": 783
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_104/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 487,
        "name": "StdDateFormat",
        "start_line": 20,
        "span_start": 483,
        "bug_name": "JacksonDatabind_104",
        "type": "class",
        "end_line": 783
      },
      {
        "javadoc": "/**\n * Default {@link DateFormat} implementation used by standard Date\n * serializers and deserializers. For serialization defaults to using\n * an ISO-8601 compliant format (format String \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n * and for deserialization, both ISO-8601 and RFC-1123.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_104/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 516,
        "name": "StdDateFormat",
        "start_line": 20,
        "span_start": 516,
        "bug_name": "JacksonDatabind_104",
        "type": "class",
        "end_line": 783
      }
    ]
  },
  "JacksonDatabind_105": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Container class that contains serializers for JDK types that\n * require special handling for some reason.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_105/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
        "span_end": 22,
        "name": "JdkDeserializers",
        "start_line": 13,
        "span_start": 22,
        "bug_name": "JacksonDatabind_105",
        "type": "class",
        "end_line": 51
      },
      {
        "javadoc": "/**\n * Container class that contains serializers for JDK types that\n * require special handling for some reason.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_105/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
        "span_end": 47,
        "name": "JdkDeserializers",
        "start_line": 13,
        "span_start": 48,
        "bug_name": "JacksonDatabind_105",
        "type": "class",
        "end_line": 51
      }
    ]
  },
  "JacksonDatabind_108": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n *  Builder object that can be used for per-serialization configuration of\n *  deserialization parameters, such as root type to use or object\n *  to update (instead of constructing new instance).\n * <p>\n *  Uses \"mutant factory\" pattern so that instances are immutable\n *  (and thus fully thread-safe with no external synchronization);\n *  new instances are constructed for different configurations.\n *  Instances are initially constructed by {@link ObjectMapper} and can be\n *  reused, shared, cached; both because of thread-safety and because\n *  instances are relatively light-weight.\n * <p>\n *  NOTE: this class is NOT meant as sub-classable (with Jackson 2.8 and\n *  above) by users. It is left as non-final mostly to allow frameworks\n *  that require bytecode generation for proxying and similar use cases,\n *  but there is no expecation that functionality should be extended\n *  by sub-classing.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_108/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
        "span_end": 1169,
        "name": "ObjectReader",
        "start_line": 43,
        "span_start": 1169,
        "bug_name": "JacksonDatabind_108",
        "type": "class",
        "end_line": 1992
      },
      {
        "javadoc": "/**\n *  Builder object that can be used for per-serialization configuration of\n *  deserialization parameters, such as root type to use or object\n *  to update (instead of constructing new instance).\n * <p>\n *  Uses \"mutant factory\" pattern so that instances are immutable\n *  (and thus fully thread-safe with no external synchronization);\n *  new instances are constructed for different configurations.\n *  Instances are initially constructed by {@link ObjectMapper} and can be\n *  reused, shared, cached; both because of thread-safety and because\n *  instances are relatively light-weight.\n * <p>\n *  NOTE: this class is NOT meant as sub-classable (with Jackson 2.8 and\n *  above) by users. It is left as non-final mostly to allow frameworks\n *  that require bytecode generation for proxying and similar use cases,\n *  but there is no expecation that functionality should be extended\n *  by sub-classing.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_108/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
        "span_end": 1706,
        "name": "ObjectReader",
        "start_line": 43,
        "span_start": 1707,
        "bug_name": "JacksonDatabind_108",
        "type": "class",
        "end_line": 1992
      }
    ]
  },
  "JacksonDatabind_109": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * As a fallback, we may need to use this serializer for other\n * types of {@link Number}s: both custom types and \"big\" numbers\n * like {@link BigInteger} and {@link BigDecimal}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_109/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "span_end": 36,
        "name": "NumberSerializer",
        "start_line": 23,
        "span_start": 37,
        "bug_name": "JacksonDatabind_109",
        "type": "class",
        "end_line": 123
      },
      {
        "javadoc": "/**\n * As a fallback, we may need to use this serializer for other\n * types of {@link Number}s: both custom types and \"big\" numbers\n * like {@link BigInteger} and {@link BigDecimal}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_109/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "span_end": 57,
        "name": "NumberSerializer",
        "start_line": 23,
        "span_start": 58,
        "bug_name": "JacksonDatabind_109",
        "type": "class",
        "end_line": 123
      },
      {
        "javadoc": "/**\n * As a fallback, we may need to use this serializer for other\n * types of {@link Number}s: both custom types and \"big\" numbers\n * like {@link BigInteger} and {@link BigDecimal}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_109/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "span_end": 120,
        "name": "NumberSerializer",
        "start_line": 23,
        "span_start": 113,
        "bug_name": "JacksonDatabind_109",
        "type": "class",
        "end_line": 123
      },
      {
        "javadoc": "/**\n * Container class for serializers used for handling standard JDK-provided\n * primitve number types and their wrapper counterparts (like {@link java.lang.Integer}).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_109/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 99,
        "name": "NumberSerializers",
        "start_line": 21,
        "span_start": 100,
        "bug_name": "JacksonDatabind_109",
        "type": "class",
        "end_line": 237
      },
      {
        "javadoc": "/**\n *  Shared base class for actual primitive/wrapper number serializers.\n *  Note that this class is not meant as general-purpose base class nor\n *  is it part of public API: you may extend it with the caveat that not\n *  being part of public API its implementation and interfaces may change\n *  in minor releases; however deprecation markers will be used to allow\n *  code evolution.\n * <p>\n *  NOTE: {@code public} since 2.10: previously had {@code protected} access.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_109/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 99,
        "name": "Base",
        "start_line": 59,
        "span_start": 100,
        "bug_name": "JacksonDatabind_109",
        "type": "class",
        "end_line": 106
      }
    ]
  },
  "JacksonDatabind_110": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Helper class used to contain logic for deserializing \"special\" containers\n * from {@code java.util.Collections} and {@code java.util.Arrays}. This is needed\n * because they do not have usable no-arguments constructor: however, are easy enough\n * to deserialize using delegating deserializer.\n *\n * @since 2.9.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_110/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
        "span_end": 46,
        "name": "JavaUtilCollectionsDeserializers",
        "start_line": 21,
        "span_start": 47,
        "bug_name": "JacksonDatabind_110",
        "type": "class",
        "end_line": 187
      },
      {
        "javadoc": "/**\n * Helper class used to contain logic for deserializing \"special\" containers\n * from {@code java.util.Collections} and {@code java.util.Arrays}. This is needed\n * because they do not have usable no-arguments constructor: however, are easy enough\n * to deserialize using delegating deserializer.\n *\n * @since 2.9.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_110/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
        "span_end": 57,
        "name": "JavaUtilCollectionsDeserializers",
        "start_line": 21,
        "span_start": 58,
        "bug_name": "JacksonDatabind_110",
        "type": "class",
        "end_line": 187
      },
      {
        "javadoc": "/**\n * Helper class used to contain logic for deserializing \"special\" containers\n * from {@code java.util.Collections} and {@code java.util.Arrays}. This is needed\n * because they do not have usable no-arguments constructor: however, are easy enough\n * to deserialize using delegating deserializer.\n *\n * @since 2.9.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_110/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
        "span_end": 78,
        "name": "JavaUtilCollectionsDeserializers",
        "start_line": 21,
        "span_start": 78,
        "bug_name": "JacksonDatabind_110",
        "type": "class",
        "end_line": 187
      }
    ]
  },
  "JacksonDatabind_111": {
    "bug_count": 9,
    "entries": [
      {
        "javadoc": "/**\n *  This concrete sub-class implements property that is passed\n *  via Creator (constructor or static factory method).\n *  It is not a full-featured implementation in that its set method\n *  should usually not be called for primary mutation -- instead, value must separately passed --\n *  but some aspects are still needed (specifically, injection).\n * <p>\n *  Note on injectable values: unlike with other mutators, where\n *  deserializer and injecting are separate, here we treat the two as related\n *  things. This is necessary to add proper priority, as well as to simplify\n *  coordination.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java",
        "span_end": 135,
        "name": "CreatorProperty",
        "start_line": 28,
        "span_start": 135,
        "bug_name": "JacksonDatabind_111",
        "type": "class",
        "end_line": 283
      },
      {
        "javadoc": "/**\n * This concrete sub-class implements property that is set\n * directly assigning to a Field.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
        "span_end": 93,
        "name": "FieldProperty",
        "start_line": 24,
        "span_start": 93,
        "bug_name": "JacksonDatabind_111",
        "type": "class",
        "end_line": 217
      },
      {
        "javadoc": "/**\n * This concrete sub-class implements property that is set\n * directly assigning to a Field.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
        "span_end": 217,
        "name": "FieldProperty",
        "start_line": 24,
        "span_start": 217,
        "bug_name": "JacksonDatabind_111",
        "type": "class",
        "end_line": 217
      },
      {
        "javadoc": "/**\n * This concrete sub-class implements property that is set\n * using regular \"setter\" method.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
        "span_end": 84,
        "name": "MethodProperty",
        "start_line": 20,
        "span_start": 84,
        "bug_name": "JacksonDatabind_111",
        "type": "class",
        "end_line": 210
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java",
        "span_end": 54,
        "name": "ObjectIdReferenceProperty",
        "start_line": 15,
        "span_start": 54,
        "bug_name": "JacksonDatabind_111",
        "type": "class",
        "end_line": 136
      },
      {
        "javadoc": "/**\n * Specialized {@link SettableBeanProperty} implementation used\n * for virtual property that represents Object Id that is used\n * for some POJO types (or properties).\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
        "span_end": 55,
        "name": "ObjectIdValueProperty",
        "start_line": 17,
        "span_start": 55,
        "bug_name": "JacksonDatabind_111",
        "type": "class",
        "end_line": 124
      },
      {
        "javadoc": "/**\n * This concrete sub-class implements Collection or Map property that is\n * indirectly by getting the property value and directly modifying it.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java",
        "span_end": 68,
        "name": "SetterlessProperty",
        "start_line": 23,
        "span_start": 68,
        "bug_name": "JacksonDatabind_111",
        "type": "class",
        "end_line": 156
      },
      {
        "javadoc": "/**\n * This concrete sub-class implements Collection or Map property that is\n * indirectly by getting the property value and directly modifying it.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java",
        "span_end": 156,
        "name": "SetterlessProperty",
        "start_line": 23,
        "span_start": 156,
        "bug_name": "JacksonDatabind_111",
        "type": "class",
        "end_line": 156
      },
      {
        "file": "/Users/danielding/WORK_DIR/JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java",
        "span_end": 43,
        "name": "AtomicReferenceDeserializer",
        "start_line": 9,
        "span_start": 43,
        "bug_name": "JacksonDatabind_111",
        "type": "class",
        "end_line": 72
      }
    ]
  },
  "JacksonXml_1": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * {@link JsonParser} implementation that exposes XML structure as\n * set of JSON events that can be used for data binding.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonXml_1/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
        "span_end": 513,
        "name": "FromXmlParser",
        "start_line": 22,
        "span_start": 512,
        "bug_name": "JacksonXml_1",
        "type": "class",
        "end_line": 956
      },
      {
        "javadoc": "/**\n * {@link JsonParser} implementation that exposes XML structure as\n * set of JSON events that can be used for data binding.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonXml_1/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
        "span_end": 553,
        "name": "FromXmlParser",
        "start_line": 22,
        "span_start": 550,
        "bug_name": "JacksonXml_1",
        "type": "class",
        "end_line": 956
      }
    ]
  },
  "JacksonXml_2": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Simple helper class used on top of STAX {@link XMLStreamReader} to further\n * abstract out all irrelevant details, and to expose equivalent of flat token\n * stream with no \"fluff\" tokens (comments, processing instructions, mixed\n * content) all of which is just to simplify\n * actual higher-level conversion to JSON tokens\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonXml_2/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java",
        "span_end": 61,
        "name": "XmlTokenStream",
        "start_line": 20,
        "span_start": 62,
        "bug_name": "JacksonXml_2",
        "type": "class",
        "end_line": 525
      },
      {
        "javadoc": "/**\n * Simple helper class used on top of STAX {@link XMLStreamReader} to further\n * abstract out all irrelevant details, and to expose equivalent of flat token\n * stream with no \"fluff\" tokens (comments, processing instructions, mixed\n * content) all of which is just to simplify\n * actual higher-level conversion to JSON tokens\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonXml_2/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java",
        "span_end": 332,
        "name": "XmlTokenStream",
        "start_line": 20,
        "span_start": 324,
        "bug_name": "JacksonXml_2",
        "type": "class",
        "end_line": 525
      },
      {
        "javadoc": "/**\n * Simple helper class used on top of STAX {@link XMLStreamReader} to further\n * abstract out all irrelevant details, and to expose equivalent of flat token\n * stream with no \"fluff\" tokens (comments, processing instructions, mixed\n * content) all of which is just to simplify\n * actual higher-level conversion to JSON tokens\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonXml_2/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java",
        "span_end": 339,
        "name": "XmlTokenStream",
        "start_line": 20,
        "span_start": 340,
        "bug_name": "JacksonXml_2",
        "type": "class",
        "end_line": 525
      },
      {
        "javadoc": "/**\n * Simple helper class used on top of STAX {@link XMLStreamReader} to further\n * abstract out all irrelevant details, and to expose equivalent of flat token\n * stream with no \"fluff\" tokens (comments, processing instructions, mixed\n * content) all of which is just to simplify\n * actual higher-level conversion to JSON tokens\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonXml_2/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java",
        "span_end": 505,
        "name": "XmlTokenStream",
        "start_line": 20,
        "span_start": 506,
        "bug_name": "JacksonXml_2",
        "type": "class",
        "end_line": 525
      }
    ]
  },
  "JacksonXml_6": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * {@link JsonGenerator} that outputs JAXB-style XML output instead of JSON content.\n * Operation requires calling code (usually either standard Jackson serializers,\n * or in some cases (like <code>BeanSerializer</code>) customised ones) to do\n * additional configuration calls beyond regular {@link JsonGenerator} API,\n * mostly to pass namespace information.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonXml_6/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
        "span_end": 850,
        "name": "ToXmlGenerator",
        "start_line": 30,
        "span_start": 843,
        "bug_name": "JacksonXml_6",
        "type": "class",
        "end_line": 1245
      },
      {
        "javadoc": "/**\n * {@link JsonGenerator} that outputs JAXB-style XML output instead of JSON content.\n * Operation requires calling code (usually either standard Jackson serializers,\n * or in some cases (like <code>BeanSerializer</code>) customised ones) to do\n * additional configuration calls beyond regular {@link JsonGenerator} API,\n * mostly to pass namespace information.\n */\n",
        "file": "/Users/danielding/WORK_DIR/JacksonXml_6/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
        "span_end": 866,
        "name": "ToXmlGenerator",
        "start_line": 30,
        "span_start": 866,
        "bug_name": "JacksonXml_6",
        "type": "class",
        "end_line": 1245
      }
    ]
  },
  "Jsoup_3": {
    "bug_count": 13,
    "entries": [
      {
        "javadoc": "/**\n * HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,\n * but it should capture most of what we need to know to intelligently parse a doc.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 315,
        "name": "Tag",
        "start_line": 12,
        "span_start": 288,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 379
      },
      {
        "javadoc": "/**\n * HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,\n * but it should capture most of what we need to know to intelligently parse a doc.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 379,
        "name": "Tag",
        "start_line": 12,
        "span_start": 379,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 379
      },
      {
        "javadoc": "/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n *\n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 270,
        "name": "Element",
        "start_line": 21,
        "span_start": 270,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 844
      },
      {
        "javadoc": "/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n *\n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 287,
        "name": "Element",
        "start_line": 21,
        "span_start": 287,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 844
      },
      {
        "javadoc": "/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n *\n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 314,
        "name": "Element",
        "start_line": 21,
        "span_start": 314,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 844
      },
      {
        "javadoc": "/**\n * Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Parser.java",
        "span_end": 25,
        "name": "Parser",
        "start_line": 12,
        "span_start": 26,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 301
      },
      {
        "javadoc": "/**\n * Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Parser.java",
        "span_end": 72,
        "name": "Parser",
        "start_line": 12,
        "span_start": 73,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 301
      },
      {
        "javadoc": "/**\n * Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Parser.java",
        "span_end": 224,
        "name": "Parser",
        "start_line": 12,
        "span_start": 224,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 301
      },
      {
        "javadoc": "/**\n * Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Parser.java",
        "span_end": 258,
        "name": "Parser",
        "start_line": 12,
        "span_start": 253,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 301
      },
      {
        "javadoc": "/**\n * HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,\n * but it should capture most of what we need to know to intelligently parse a doc.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 27,
        "name": "Tag",
        "start_line": 12,
        "span_start": 28,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 379
      },
      {
        "javadoc": "/**\n * HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,\n * but it should capture most of what we need to know to intelligently parse a doc.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 98,
        "name": "Tag",
        "start_line": 12,
        "span_start": 99,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 379
      },
      {
        "javadoc": "/**\n * HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,\n * but it should capture most of what we need to know to intelligently parse a doc.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 157,
        "name": "Tag",
        "start_line": 12,
        "span_start": 155,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 379
      },
      {
        "javadoc": "/**\n * HTML Tag specifications. This is a very simplistic model without the full expressiveness as the DTD,\n * but it should capture most of what we need to know to intelligently parse a doc.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_3/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 225,
        "name": "Tag",
        "start_line": 12,
        "span_start": 224,
        "bug_name": "Jsoup_3",
        "type": "class",
        "end_line": 379
      }
    ]
  },
  "Jsoup_4": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * HMTL entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n * <p/>\n * Draft implementation. Do not consume.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_4/src/main/java/org/jsoup/nodes/Entities.java",
        "span_end": 64,
        "name": "Entities",
        "start_line": 16,
        "span_start": 64,
        "bug_name": "Jsoup_4",
        "type": "class",
        "end_line": 2245
      },
      {
        "javadoc": "/**\n * HMTL entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n * <p/>\n * Draft implementation. Do not consume.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_4/src/main/java/org/jsoup/nodes/Entities.java",
        "span_end": 2240,
        "name": "Entities",
        "start_line": 16,
        "span_start": 2235,
        "bug_name": "Jsoup_4",
        "type": "class",
        "end_line": 2245
      }
    ]
  },
  "Jsoup_7": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A HTML Document.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_7/src/main/java/org/jsoup/nodes/Document.java",
        "span_end": 112,
        "name": "Document",
        "start_line": 15,
        "span_start": 113,
        "bug_name": "Jsoup_7",
        "type": "class",
        "end_line": 292
      },
      {
        "javadoc": "/**\n * A HTML Document.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_7/src/main/java/org/jsoup/nodes/Document.java",
        "span_end": 137,
        "name": "Document",
        "start_line": 15,
        "span_start": 137,
        "bug_name": "Jsoup_7",
        "type": "class",
        "end_line": 292
      }
    ]
  },
  "Jsoup_11": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * CSS-like element selector, that finds elements matching a query.\n *\n * <h2>Selector syntax</h2>\n * A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n * elements, attributes, and attribute values).\n * <p/>\n * The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n * is equivalent).\n *\n * <table>\n *  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n *  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n *  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n *  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n *  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n *  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n *  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n *  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n *  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n *  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n *  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n *  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n *  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n *  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n *  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n *  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n *  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n *  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n *  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n *  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n *  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n *  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n *  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n *  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em></td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n *  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n *  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n *  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n *  </table>\n *\n * @see Element#select(String)\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_11/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 109,
        "name": "Selector",
        "start_line": 58,
        "span_start": 110,
        "bug_name": "Jsoup_11",
        "type": "class",
        "end_line": 405
      },
      {
        "javadoc": "/**\n * CSS-like element selector, that finds elements matching a query.\n *\n * <h2>Selector syntax</h2>\n * A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n * elements, attributes, and attribute values).\n * <p/>\n * The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n * is equivalent).\n *\n * <table>\n *  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n *  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n *  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n *  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n *  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n *  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n *  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n *  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n *  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n *  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n *  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n *  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n *  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n *  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n *  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n *  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n *  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n *  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n *  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n *  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n *  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n *  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n *  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n *  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em></td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n *  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n *  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n *  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n *  </table>\n *\n * @see Element#select(String)\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_11/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 180,
        "name": "Selector",
        "start_line": 58,
        "span_start": 181,
        "bug_name": "Jsoup_11",
        "type": "class",
        "end_line": 405
      },
      {
        "javadoc": "/**\n * CSS-like element selector, that finds elements matching a query.\n *\n * <h2>Selector syntax</h2>\n * A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n * elements, attributes, and attribute values).\n * <p/>\n * The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n * is equivalent).\n *\n * <table>\n *  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n *  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n *  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n *  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n *  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n *  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n *  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n *  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n *  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n *  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n *  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n *  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n *  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n *  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n *  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n *  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n *  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n *  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n *  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n *  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n *  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n *  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n *  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n *  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em></td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n *  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n *  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n *  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n *  </table>\n *\n * @see Element#select(String)\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_11/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 305,
        "name": "Selector",
        "start_line": 58,
        "span_start": 305,
        "bug_name": "Jsoup_11",
        "type": "class",
        "end_line": 405
      },
      {
        "javadoc": "/**\n * CSS-like element selector, that finds elements matching a query.\n *\n * <h2>Selector syntax</h2>\n * A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n * elements, attributes, and attribute values).\n * <p/>\n * The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n * is equivalent).\n *\n * <table>\n *  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n *  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n *  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n *  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n *  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n *  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n *  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n *  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n *  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n *  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n *  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n *  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n *  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n *  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n *  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n *  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n *  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n *  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n *  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n *  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n *  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n *  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n *  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n *  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em></td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n *  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n *  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n *  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n *  </table>\n *\n * @see Element#select(String)\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_11/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 398,
        "name": "Selector",
        "start_line": 58,
        "span_start": 399,
        "bug_name": "Jsoup_11",
        "type": "class",
        "end_line": 405
      }
    ]
  },
  "Jsoup_12": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * CSS-like element selector, that finds elements matching a query.\n *\n * <h2>Selector syntax</h2>\n * A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n * elements, attributes, and attribute values).\n * <p/>\n * The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n * is equivalent).\n *\n * <table>\n *  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n *  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n *  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n *  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n *  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n *  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n *  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n *  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n *  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n *  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n *  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n *  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n *  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n *  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n *  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n *  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n *  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n *  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n *  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n *  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n *  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n *  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n *  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n *  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em>. See also {@link Elements#not(String)}</td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n *  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n *  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n *  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n *  </table>\n *\n * @see Element#select(String)\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_12/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 139,
        "name": "Selector",
        "start_line": 58,
        "span_start": 139,
        "bug_name": "Jsoup_12",
        "type": "class",
        "end_line": 431
      },
      {
        "javadoc": "/**\n * CSS-like element selector, that finds elements matching a query.\n *\n * <h2>Selector syntax</h2>\n * A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n * elements, attributes, and attribute values).\n * <p/>\n * The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n * is equivalent).\n *\n * <table>\n *  <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n *  <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n *  <tr><td><code>tag</code></td><td>elements with the given tag name</td><td><code>div</code></td></tr>\n *  <tr><td><code>ns|E</code></td><td>elements of type E in the namespace <i>ns</i></td><td><code>fb|name</code> finds <code>&lt;fb:name></code> elements</td></tr>\n *  <tr><td><code>#id</code></td><td>elements with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n *  <tr><td><code>.class</code></td><td>elements with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n *  <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n *  <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n *  <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n *  <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n *  <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n *  <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n *  <tr><td><code>[attr~=<em>regex</em>]</code></td><td>elements with an attribute named \"attr\", and value matching the regular expression</td><td><code>img[src~=(?i)\\\\.(png|jpe?g)]</code></td></tr>\n *  <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n *  <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n *  <tr><td><code>E > F</code></td><td>an F direct child of E</td><td><code>ol > li</code></td></tr>\n *  <tr><td><code>E + F</code></td><td>an F element immediately preceded by sibling E</td><td><code>li + li</code>, <code>div.head + div</code></td></tr>\n *  <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n *  <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n *  <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n *  <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n *  <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n *  <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n *  <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n *  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em>. See also {@link Elements#not(String)}</td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n *  <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n *  <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n *  <tr><td><code>:matchesOwn(<em>regex</em>)</code></td><td>elements whose own text matches the specified regular expression. The text must appear in the found element, not any of its descendants.</td><td><code>td:matchesOwn(\\\\d+)</code> finds table cells directly containing digits. <code>div:matchesOwn((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n *  <tr><td></td><td>The above may be combined in any order and with other selectors</td><td><code>.light:contains(name):eq(0)</code></td></tr>\n *  </table>\n *\n * @see Element#select(String)\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_12/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 155,
        "name": "Selector",
        "start_line": 58,
        "span_start": 156,
        "bug_name": "Jsoup_12",
        "type": "class",
        "end_line": 431
      }
    ]
  },
  "Jsoup_14": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Readers the input stream into tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_14/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 196,
        "name": "Tokeniser",
        "start_line": 12,
        "span_start": 197,
        "bug_name": "Jsoup_14",
        "type": "class",
        "end_line": 232
      }
    ]
  },
  "Jsoup_16": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A {@code <!DOCTPYE>} node.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_16/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 20,
        "name": "DocumentType",
        "start_line": 8,
        "span_start": 21,
        "bug_name": "Jsoup_16",
        "type": "class",
        "end_line": 44
      },
      {
        "javadoc": "/**\n * A {@code <!DOCTPYE>} node.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_16/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 37,
        "name": "DocumentType",
        "start_line": 8,
        "span_start": 33,
        "bug_name": "Jsoup_16",
        "type": "class",
        "end_line": 44
      }
    ]
  },
  "Jsoup_18": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * CharacterReader cosumes tokens off a string. To replace the old TokenQueue.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_18/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 17,
        "name": "CharacterReader",
        "start_line": 8,
        "span_start": 18,
        "bug_name": "Jsoup_18",
        "type": "class",
        "end_line": 209
      },
      {
        "javadoc": "/**\n * CharacterReader cosumes tokens off a string. To replace the old TokenQueue.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_18/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 99,
        "name": "CharacterReader",
        "start_line": 8,
        "span_start": 99,
        "bug_name": "Jsoup_18",
        "type": "class",
        "end_line": 209
      }
    ]
  },
  "Jsoup_21": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Base combining (and, or) evaluator.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_21/src/main/java/org/jsoup/select/CombiningEvaluator.java",
        "span_end": 63,
        "name": "CombiningEvaluator",
        "start_line": 14,
        "span_start": 64,
        "bug_name": "Jsoup_21",
        "type": "class",
        "end_line": 83
      },
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_21/src/main/java/org/jsoup/select/CombiningEvaluator.java",
        "span_end": 63,
        "name": "Or",
        "start_line": 51,
        "span_start": 64,
        "bug_name": "Jsoup_21",
        "type": "class",
        "end_line": 82
      },
      {
        "javadoc": "/**\n * Parses a CSS selector into an Evaluator tree.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_21/src/main/java/org/jsoup/select/QueryParser.java",
        "span_end": 66,
        "name": "QueryParser",
        "start_line": 14,
        "span_start": 58,
        "bug_name": "Jsoup_21",
        "type": "class",
        "end_line": 273
      },
      {
        "javadoc": "/**\n * Parses a CSS selector into an Evaluator tree.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_21/src/main/java/org/jsoup/select/QueryParser.java",
        "span_end": 100,
        "name": "QueryParser",
        "start_line": 14,
        "span_start": 101,
        "bug_name": "Jsoup_21",
        "type": "class",
        "end_line": 273
      }
    ]
  },
  "Jsoup_22": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n *\n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_22/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 435,
        "name": "Element",
        "start_line": 24,
        "span_start": 434,
        "bug_name": "Jsoup_22",
        "type": "class",
        "end_line": 1110
      },
      {
        "javadoc": "/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n *\n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_22/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 446,
        "name": "Element",
        "start_line": 24,
        "span_start": 447,
        "bug_name": "Jsoup_22",
        "type": "class",
        "end_line": 1110
      },
      {
        "javadoc": "/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n *\n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_22/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 461,
        "name": "Element",
        "start_line": 24,
        "span_start": 462,
        "bug_name": "Jsoup_22",
        "type": "class",
        "end_line": 1110
      },
      {
        "javadoc": "/**\n * The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_22/src/main/java/org/jsoup/nodes/Node.java",
        "span_end": 445,
        "name": "Node",
        "start_line": 19,
        "span_start": 444,
        "bug_name": "Jsoup_22",
        "type": "class",
        "end_line": 606
      },
      {
        "javadoc": "/**\n * The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_22/src/main/java/org/jsoup/nodes/Node.java",
        "span_end": 469,
        "name": "Node",
        "start_line": 19,
        "span_start": 470,
        "bug_name": "Jsoup_22",
        "type": "class",
        "end_line": 606
      },
      {
        "javadoc": "/**\n * A list of {@link Element Elements}, with methods that act on every element in the list.\n * <p/>\n * To get an Elements object, use the {@link Element#select(String)} method.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_22/src/main/java/org/jsoup/select/Elements.java",
        "span_end": 21,
        "name": "Elements",
        "start_line": 15,
        "span_start": 22,
        "bug_name": "Jsoup_22",
        "type": "class",
        "end_line": 533
      }
    ]
  },
  "Jsoup_23": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * CharacterReader cosumes tokens off a string. To replace the old TokenQueue.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_23/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 118,
        "name": "CharacterReader",
        "start_line": 8,
        "span_start": 118,
        "bug_name": "Jsoup_23",
        "type": "class",
        "end_line": 212
      },
      {
        "javadoc": "/**\n * Readers the input stream into tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_23/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 135,
        "name": "Tokeniser",
        "start_line": 12,
        "span_start": 135,
        "bug_name": "Jsoup_23",
        "type": "class",
        "end_line": 228
      }
    ]
  },
  "Jsoup_28": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_28/src/main/java/org/jsoup/nodes/Entities.java",
        "span_end": 60,
        "name": "Entities",
        "start_line": 16,
        "span_start": 61,
        "bug_name": "Jsoup_28",
        "type": "class",
        "end_line": 189
      },
      {
        "javadoc": "/**\n * HTML entities, and escape routines.\n * Source: <a href=\"http://www.w3.org/TR/html5/named-character-references.html#named-character-references\">W3C HTML\n * named character references</a>.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_28/src/main/java/org/jsoup/nodes/Entities.java",
        "span_end": 129,
        "name": "Entities",
        "start_line": 16,
        "span_start": 103,
        "bug_name": "Jsoup_28",
        "type": "class",
        "end_line": 189
      },
      {
        "javadoc": "/**\n * Parses HTML into a {@link org.jsoup.nodes.Document}. Generally best to use one of the  more convenient parse methods\n * in {@link org.jsoup.Jsoup}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_28/src/main/java/org/jsoup/parser/Parser.java",
        "span_end": 132,
        "name": "Parser",
        "start_line": 13,
        "span_start": 133,
        "bug_name": "Jsoup_28",
        "type": "class",
        "end_line": 164
      },
      {
        "javadoc": "/**\n * Readers the input stream into tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_28/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 152,
        "name": "Tokeniser",
        "start_line": 12,
        "span_start": 136,
        "bug_name": "Jsoup_28",
        "type": "class",
        "end_line": 238
      },
      {
        "javadoc": "/**\n * Readers the input stream into tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_28/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 238,
        "name": "Tokeniser",
        "start_line": 12,
        "span_start": 238,
        "bug_name": "Jsoup_28",
        "type": "class",
        "end_line": 238
      }
    ]
  },
  "Jsoup_29": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * A HTML Document.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_29/src/main/java/org/jsoup/nodes/Document.java",
        "span_end": 69,
        "name": "Document",
        "start_line": 16,
        "span_start": 69,
        "bug_name": "Jsoup_29",
        "type": "class",
        "end_line": 361
      }
    ]
  },
  "Jsoup_30": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n * that you are expecting; no junk, and no cross-site scripting attacks!\n * <p/>\n * The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n * HTML that is allowed by the whitelist.\n * <p/>\n * It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n * canned white-lists only allow body contained tags.\n * <p/>\n * Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_30/src/main/java/org/jsoup/safety/Cleaner.java",
        "span_end": 74,
        "name": "Cleaner",
        "start_line": 21,
        "span_start": 70,
        "bug_name": "Jsoup_30",
        "type": "class",
        "end_line": 129
      },
      {
        "javadoc": "/**\n * The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n * that you are expecting; no junk, and no cross-site scripting attacks!\n * <p/>\n * The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n * HTML that is allowed by the whitelist.\n * <p/>\n * It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n * canned white-lists only allow body contained tags.\n * <p/>\n * Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_30/src/main/java/org/jsoup/safety/Cleaner.java",
        "span_end": 98,
        "name": "Cleaner",
        "start_line": 21,
        "span_start": 85,
        "bug_name": "Jsoup_30",
        "type": "class",
        "end_line": 129
      }
    ]
  },
  "Jsoup_31": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Parse tokens for the Tokeniser.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_31/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 170,
        "name": "Token",
        "start_line": 10,
        "span_start": 171,
        "bug_name": "Jsoup_31",
        "type": "class",
        "end_line": 262
      },
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_31/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 170,
        "name": "Comment",
        "start_line": 169,
        "span_start": 171,
        "bug_name": "Jsoup_31",
        "type": "class",
        "end_line": 184
      },
      {
        "javadoc": "/**\n * @author Jonathan Hedley\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_31/src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "span_end": 66,
        "name": "XmlTreeBuilder",
        "start_line": 11,
        "span_start": 67,
        "bug_name": "Jsoup_31",
        "type": "class",
        "end_line": 112
      }
    ]
  },
  "Jsoup_36": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Internal static utilities for handling data.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_36/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 19,
        "name": "DataUtil",
        "start_line": 18,
        "span_start": 19,
        "bug_name": "Jsoup_36",
        "type": "class",
        "end_line": 170
      },
      {
        "javadoc": "/**\n * Internal static utilities for handling data.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_36/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 91,
        "name": "DataUtil",
        "start_line": 18,
        "span_start": 87,
        "bug_name": "Jsoup_36",
        "type": "class",
        "end_line": 170
      },
      {
        "javadoc": "/**\n * Internal static utilities for handling data.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_36/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 164,
        "name": "DataUtil",
        "start_line": 18,
        "span_start": 161,
        "bug_name": "Jsoup_36",
        "type": "class",
        "end_line": 170
      }
    ]
  },
  "Jsoup_42": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_42/src/main/java/org/jsoup/nodes/FormElement.java",
        "span_end": 79,
        "name": "FormElement",
        "start_line": 17,
        "span_start": 80,
        "bug_name": "Jsoup_42",
        "type": "class",
        "end_line": 113
      },
      {
        "javadoc": "/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_42/src/main/java/org/jsoup/nodes/FormElement.java",
        "span_end": 99,
        "name": "FormElement",
        "start_line": 17,
        "span_start": 99,
        "bug_name": "Jsoup_42",
        "type": "class",
        "end_line": 113
      }
    ]
  },
  "Jsoup_50": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Internal static utilities for handling data.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_50/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 92,
        "name": "DataUtil",
        "start_line": 20,
        "span_start": 93,
        "bug_name": "Jsoup_50",
        "type": "class",
        "end_line": 227
      },
      {
        "javadoc": "/**\n * Internal static utilities for handling data.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_50/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 132,
        "name": "DataUtil",
        "start_line": 20,
        "span_start": 126,
        "bug_name": "Jsoup_50",
        "type": "class",
        "end_line": 227
      }
    ]
  },
  "Jsoup_52": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Internal static utilities for handling data.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_52/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 118,
        "name": "DataUtil",
        "start_line": 26,
        "span_start": 112,
        "bug_name": "Jsoup_52",
        "type": "class",
        "end_line": 260
      },
      {
        "javadoc": "/**\n * An XML Declaration.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_52/src/main/java/org/jsoup/nodes/XmlDeclaration.java",
        "span_end": 68,
        "name": "XmlDeclaration",
        "start_line": 11,
        "span_start": 46,
        "bug_name": "Jsoup_52",
        "type": "class",
        "end_line": 78
      },
      {
        "javadoc": "/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_52/src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "span_end": 77,
        "name": "XmlTreeBuilder",
        "start_line": 15,
        "span_start": 76,
        "bug_name": "Jsoup_52",
        "type": "class",
        "end_line": 126
      }
    ]
  },
  "Jsoup_56": {
    "bug_count": 11,
    "entries": [
      {
        "javadoc": "/**\n * A {@code <!DOCTYPE>} node.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 14,
        "name": "DocumentType",
        "start_line": 11,
        "span_start": 15,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 72
      },
      {
        "javadoc": "/**\n * A {@code <!DOCTYPE>} node.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 28,
        "name": "DocumentType",
        "start_line": 11,
        "span_start": 29,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 72
      },
      {
        "javadoc": "/**\n * A {@code <!DOCTYPE>} node.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 39,
        "name": "DocumentType",
        "start_line": 11,
        "span_start": 39,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 72
      },
      {
        "javadoc": "/**\n * A {@code <!DOCTYPE>} node.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 57,
        "name": "DocumentType",
        "start_line": 11,
        "span_start": 56,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 72
      },
      {
        "javadoc": "/**\n * Parse tokens for the Tokeniser.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 34,
        "name": "Token",
        "start_line": 11,
        "span_start": 35,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 367
      },
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 34,
        "name": "Doctype",
        "start_line": 33,
        "span_start": 35,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 68
      },
      {
        "javadoc": "/**\n * Parse tokens for the Tokeniser.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 45,
        "name": "Token",
        "start_line": 11,
        "span_start": 46,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 367
      },
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 45,
        "name": "Doctype",
        "start_line": 33,
        "span_start": 46,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 68
      },
      {
        "javadoc": "/**\n * Parse tokens for the Tokeniser.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 55,
        "name": "Token",
        "start_line": 11,
        "span_start": 56,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 367
      },
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 55,
        "name": "Doctype",
        "start_line": 33,
        "span_start": 56,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 68
      },
      {
        "javadoc": "/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_56/src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "span_end": 100,
        "name": "XmlTreeBuilder",
        "start_line": 16,
        "span_start": 100,
        "bug_name": "Jsoup_56",
        "type": "class",
        "end_line": 137
      }
    ]
  },
  "Jsoup_58": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * The core public access point to the jsoup functionality.\n *\n * @author Jonathan Hedley\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_58/src/main/java/org/jsoup/Jsoup.java",
        "span_end": 250,
        "name": "Jsoup",
        "start_line": 19,
        "span_start": 250,
        "bug_name": "Jsoup_58",
        "type": "class",
        "end_line": 253
      },
      {
        "javadoc": "/**\n * Parses HTML into a {@link org.jsoup.nodes.Document}. Generally best to use one of the  more convenient parse methods\n * in {@link org.jsoup.Jsoup}.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_58/src/main/java/org/jsoup/parser/Parser.java",
        "span_end": 128,
        "name": "Parser",
        "start_line": 13,
        "span_start": 129,
        "bug_name": "Jsoup_58",
        "type": "class",
        "end_line": 205
      },
      {
        "javadoc": "/**\n * The whitelist based HTML cleaner. Use to ensure that end-user provided HTML contains only the elements and attributes\n * that you are expecting; no junk, and no cross-site scripting attacks!\n * <p>\n * The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain\n * HTML that is allowed by the whitelist.\n * </p>\n * <p>\n * It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the\n * canned white-lists only allow body contained tags.\n * </p>\n * <p>\n * Rather than interacting directly with a Cleaner object, generally see the {@code clean} methods in {@link org.jsoup.Jsoup}.\n * </p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_58/src/main/java/org/jsoup/safety/Cleaner.java",
        "span_end": 80,
        "name": "Cleaner",
        "start_line": 34,
        "span_start": 78,
        "bug_name": "Jsoup_58",
        "type": "class",
        "end_line": 165
      }
    ]
  },
  "Jsoup_59": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Parse tokens for the Tokeniser.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_59/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 106,
        "name": "Token",
        "start_line": 11,
        "span_start": 107,
        "bug_name": "Jsoup_59",
        "type": "class",
        "end_line": 374
      },
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_59/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 106,
        "name": "Tag",
        "start_line": 75,
        "span_start": 107,
        "bug_name": "Jsoup_59",
        "type": "class",
        "end_line": 212
      },
      {
        "javadoc": "/**\n * Parse tokens for the Tokeniser.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_59/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 115,
        "name": "Token",
        "start_line": 11,
        "span_start": 116,
        "bug_name": "Jsoup_59",
        "type": "class",
        "end_line": 374
      },
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_59/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 115,
        "name": "Tag",
        "start_line": 75,
        "span_start": 116,
        "bug_name": "Jsoup_59",
        "type": "class",
        "end_line": 212
      }
    ]
  },
  "Jsoup_60": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A character queue with parsing helpers.\n *\n * @author Jonathan Hedley\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_60/src/main/java/org/jsoup/parser/TokenQueue.java",
        "span_end": 288,
        "name": "TokenQueue",
        "start_line": 11,
        "span_start": 289,
        "bug_name": "Jsoup_60",
        "type": "class",
        "end_line": 401
      },
      {
        "javadoc": "/**\n * Parses a CSS selector into an Evaluator tree.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_60/src/main/java/org/jsoup/select/QueryParser.java",
        "span_end": 39,
        "name": "QueryParser",
        "start_line": 15,
        "span_start": 38,
        "bug_name": "Jsoup_60",
        "type": "class",
        "end_line": 372
      }
    ]
  },
  "Jsoup_63": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_63/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 232,
        "name": "HtmlTreeBuilder",
        "start_line": 22,
        "span_start": 227,
        "bug_name": "Jsoup_63",
        "type": "class",
        "end_line": 726
      },
      {
        "javadoc": "/**\n * Readers the input stream into tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_63/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 36,
        "name": "Tokeniser",
        "start_line": 11,
        "span_start": 36,
        "bug_name": "Jsoup_63",
        "type": "class",
        "end_line": 289
      },
      {
        "javadoc": "/**\n * Readers the input stream into tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_63/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 47,
        "name": "Tokeniser",
        "start_line": 11,
        "span_start": 44,
        "bug_name": "Jsoup_63",
        "type": "class",
        "end_line": 289
      },
      {
        "javadoc": "/**\n * Readers the input stream into tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_63/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 77,
        "name": "Tokeniser",
        "start_line": 11,
        "span_start": 76,
        "bug_name": "Jsoup_63",
        "type": "class",
        "end_line": 289
      },
      {
        "javadoc": "/**\n * Readers the input stream into tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_63/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 126,
        "name": "Tokeniser",
        "start_line": 11,
        "span_start": 124,
        "bug_name": "Jsoup_63",
        "type": "class",
        "end_line": 289
      }
    ]
  },
  "Jsoup_65": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_65/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 364,
        "name": "HtmlTreeBuilder",
        "start_line": 22,
        "span_start": 360,
        "bug_name": "Jsoup_65",
        "type": "class",
        "end_line": 725
      }
    ]
  },
  "Jsoup_66": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n *\n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_66/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 89,
        "name": "Element",
        "start_line": 40,
        "span_start": 89,
        "bug_name": "Jsoup_66",
        "type": "class",
        "end_line": 1417
      },
      {
        "javadoc": "/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n *\n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_66/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 1414,
        "name": "Element",
        "start_line": 40,
        "span_start": 1402,
        "bug_name": "Jsoup_66",
        "type": "class",
        "end_line": 1417
      }
    ]
  },
  "Jsoup_67": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_67/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 41,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 42,
        "bug_name": "Jsoup_67",
        "type": "class",
        "end_line": 731
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_67/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 467,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 468,
        "bug_name": "Jsoup_67",
        "type": "class",
        "end_line": 731
      }
    ]
  },
  "Jsoup_71": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Evaluates that an element matches the selector.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_71/src/main/java/org/jsoup/select/Evaluator.java",
        "span_end": 753,
        "name": "Evaluator",
        "start_line": 22,
        "span_start": 754,
        "bug_name": "Jsoup_71",
        "type": "class",
        "end_line": 756
      },
      {
        "javadoc": "/**\n * Parses a CSS selector into an Evaluator tree.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_71/src/main/java/org/jsoup/select/QueryParser.java",
        "span_end": 202,
        "name": "QueryParser",
        "start_line": 17,
        "span_start": 203,
        "bug_name": "Jsoup_71",
        "type": "class",
        "end_line": 378
      }
    ]
  },
  "Jsoup_73": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n * for integration with toolsets that use the W3C DOM.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_73/src/main/java/org/jsoup/helper/W3CDom.java",
        "span_end": 85,
        "name": "W3CDom",
        "start_line": 27,
        "span_start": 73,
        "bug_name": "Jsoup_73",
        "type": "class",
        "end_line": 172
      },
      {
        "javadoc": "/**\n * Implements the conversion by walking the input.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_73/src/main/java/org/jsoup/helper/W3CDom.java",
        "span_end": 85,
        "name": "W3CBuilder",
        "start_line": 68,
        "span_start": 73,
        "bug_name": "Jsoup_73",
        "type": "class",
        "end_line": 152
      },
      {
        "javadoc": "/**\n * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n * for integration with toolsets that use the W3C DOM.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_73/src/main/java/org/jsoup/helper/W3CDom.java",
        "span_end": 115,
        "name": "W3CDom",
        "start_line": 27,
        "span_start": 116,
        "bug_name": "Jsoup_73",
        "type": "class",
        "end_line": 172
      },
      {
        "javadoc": "/**\n * Implements the conversion by walking the input.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_73/src/main/java/org/jsoup/helper/W3CDom.java",
        "span_end": 115,
        "name": "W3CBuilder",
        "start_line": 68,
        "span_start": 116,
        "bug_name": "Jsoup_73",
        "type": "class",
        "end_line": 152
      },
      {
        "javadoc": "/**\n * Helper class to transform a {@link org.jsoup.nodes.Document} to a {@link org.w3c.dom.Document org.w3c.dom.Document},\n * for integration with toolsets that use the W3C DOM.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_73/src/main/java/org/jsoup/helper/W3CDom.java",
        "span_end": 144,
        "name": "W3CDom",
        "start_line": 27,
        "span_start": 144,
        "bug_name": "Jsoup_73",
        "type": "class",
        "end_line": 172
      },
      {
        "javadoc": "/**\n * Implements the conversion by walking the input.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_73/src/main/java/org/jsoup/helper/W3CDom.java",
        "span_end": 144,
        "name": "W3CBuilder",
        "start_line": 68,
        "span_start": 144,
        "bug_name": "Jsoup_73",
        "type": "class",
        "end_line": 152
      }
    ]
  },
  "Jsoup_74": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A minimal String utility class. Designed for internal jsoup use only.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_74/src/main/java/org/jsoup/helper/StringUtil.java",
        "span_end": 131,
        "name": "StringUtil",
        "start_line": 12,
        "span_start": 131,
        "bug_name": "Jsoup_74",
        "type": "class",
        "end_line": 252
      },
      {
        "javadoc": "/**\n * A minimal String utility class. Designed for internal jsoup use only.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_74/src/main/java/org/jsoup/helper/StringUtil.java",
        "span_end": 165,
        "name": "StringUtil",
        "start_line": 12,
        "span_start": 165,
        "bug_name": "Jsoup_74",
        "type": "class",
        "end_line": 252
      }
    ]
  },
  "Jsoup_78": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Internal static utilities for handling data.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_78/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 152,
        "name": "DataUtil",
        "start_line": 31,
        "span_start": 151,
        "bug_name": "Jsoup_78",
        "type": "class",
        "end_line": 266
      }
    ]
  },
  "Jsoup_79": {
    "bug_count": 1,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_79/src/main/java/org/jsoup/nodes/LeafNode.java",
        "span_end": 93,
        "name": "LeafNode",
        "start_line": 7,
        "span_start": 94,
        "bug_name": "Jsoup_79",
        "type": "class",
        "end_line": 96
      }
    ]
  },
  "Jsoup_81": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Internal static utilities for handling data.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_81/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 135,
        "name": "DataUtil",
        "start_line": 33,
        "span_start": 136,
        "bug_name": "Jsoup_81",
        "type": "class",
        "end_line": 277
      }
    ]
  },
  "Jsoup_83": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_83/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 254,
        "name": "CharacterReader",
        "start_line": 15,
        "span_start": 254,
        "bug_name": "Jsoup_83",
        "type": "class",
        "end_line": 484
      }
    ]
  },
  "Jsoup_87": {
    "bug_count": 17,
    "entries": [
      {
        "javadoc": "/**\n * HTML Tag capabilities.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 16,
        "name": "Tag",
        "start_line": 13,
        "span_start": 17,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 322
      },
      {
        "javadoc": "/**\n * HTML Tag capabilities.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 27,
        "name": "Tag",
        "start_line": 13,
        "span_start": 28,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 322
      },
      {
        "javadoc": "/**\n * HTML Tag capabilities.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 42,
        "name": "Tag",
        "start_line": 13,
        "span_start": 43,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 322
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 581,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 581,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 618,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 618,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 649,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 649,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 689,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 689,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n *\n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 139,
        "name": "Element",
        "start_line": 39,
        "span_start": 140,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 1494
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 315,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 315,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 337,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 337,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 347,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 347,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 355,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 355,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 378,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 378,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 420,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 420,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 476,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 476,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 517,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 517,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 570,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 569,
        "bug_name": "Jsoup_87",
        "type": "class",
        "end_line": 733
      }
    ]
  },
  "Jsoup_91": {
    "bug_count": 3,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_91/src/main/java/org/jsoup/UncheckedIOException.java",
        "span_end": 9,
        "name": "UncheckedIOException",
        "start_line": 5,
        "span_start": 10,
        "bug_name": "Jsoup_91",
        "type": "class",
        "end_line": 14
      },
      {
        "javadoc": "/**\n * CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_91/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 36,
        "name": "CharacterReader",
        "start_line": 15,
        "span_start": 37,
        "bug_name": "Jsoup_91",
        "type": "class",
        "end_line": 524
      },
      {
        "javadoc": "/**\n * CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_91/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 458,
        "name": "CharacterReader",
        "start_line": 15,
        "span_start": 452,
        "bug_name": "Jsoup_91",
        "type": "class",
        "end_line": 524
      }
    ]
  },
  "Jsoup_92": {
    "bug_count": 8,
    "entries": [
      {
        "javadoc": "/**\n * The attributes of an Element.\n * <p>\n * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n * </p>\n * <p>\n * Attribute name and value comparisons are  generally <b>case sensitive</b>. By default for HTML, attribute names are\n * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n * name.\n * </p>\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_92/src/main/java/org/jsoup/nodes/Attributes.java",
        "span_end": 122,
        "name": "Attributes",
        "start_line": 33,
        "span_start": 118,
        "bug_name": "Jsoup_92",
        "type": "class",
        "end_line": 459
      },
      {
        "javadoc": "/**\n * The attributes of an Element.\n * <p>\n * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n * </p>\n * <p>\n * Attribute name and value comparisons are  generally <b>case sensitive</b>. By default for HTML, attribute names are\n * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n * name.\n * </p>\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_92/src/main/java/org/jsoup/nodes/Attributes.java",
        "span_end": 238,
        "name": "Attributes",
        "start_line": 33,
        "span_start": 239,
        "bug_name": "Jsoup_92",
        "type": "class",
        "end_line": 459
      },
      {
        "javadoc": "/**\n * The attributes of an Element.\n * <p>\n * Attributes are treated as a map: there can be only one value associated with an attribute key/name.\n * </p>\n * <p>\n * Attribute name and value comparisons are  generally <b>case sensitive</b>. By default for HTML, attribute names are\n * normalized to lower-case on parsing. That means you should use lower-case strings when referring to attributes by\n * name.\n * </p>\n *\n * @author Jonathan Hedley, jonathan@hedley.net\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_92/src/main/java/org/jsoup/nodes/Attributes.java",
        "span_end": 396,
        "name": "Attributes",
        "start_line": 33,
        "span_start": 397,
        "bug_name": "Jsoup_92",
        "type": "class",
        "end_line": 459
      },
      {
        "javadoc": "/**\n * HTML Tree Builder; creates a DOM from Tokens.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_92/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 198,
        "name": "HtmlTreeBuilder",
        "start_line": 25,
        "span_start": 199,
        "bug_name": "Jsoup_92",
        "type": "class",
        "end_line": 735
      },
      {
        "javadoc": "/**\n * Controls parser settings, to optionally preserve tag and/or attribute name case.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_92/src/main/java/org/jsoup/parser/ParseSettings.java",
        "span_end": 37,
        "name": "ParseSettings",
        "start_line": 10,
        "span_start": 38,
        "bug_name": "Jsoup_92",
        "type": "class",
        "end_line": 75
      },
      {
        "javadoc": "/**\n * Parse tokens for the Tokeniser.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_92/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 116,
        "name": "Token",
        "start_line": 11,
        "span_start": 116,
        "bug_name": "Jsoup_92",
        "type": "class",
        "end_line": 394
      },
      {
        "file": "/Users/danielding/WORK_DIR/Jsoup_92/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 116,
        "name": "Tag",
        "start_line": 75,
        "span_start": 116,
        "bug_name": "Jsoup_92",
        "type": "class",
        "end_line": 215
      },
      {
        "javadoc": "/**\n * Use the {@code XmlTreeBuilder} when you want to parse XML without any of the HTML DOM rules being applied to the\n * document.\n * <p>Usage example: {@code Document xmlDoc = Jsoup.parse(html, baseUrl, Parser.xmlParser());}</p>\n *\n * @author Jonathan Hedley\n */\n",
        "file": "/Users/danielding/WORK_DIR/Jsoup_92/src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "span_end": 77,
        "name": "XmlTreeBuilder",
        "start_line": 24,
        "span_start": 78,
        "bug_name": "Jsoup_92",
        "type": "class",
        "end_line": 152
      }
    ]
  },
  "JxPath_1": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_1/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 116,
        "name": "DOMNodePointer",
        "start_line": 53,
        "span_start": 116,
        "bug_name": "JxPath_1",
        "type": "class",
        "end_line": 772
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_1/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 376,
        "name": "JDOMNodePointer",
        "start_line": 50,
        "span_start": 376,
        "bug_name": "JxPath_1",
        "type": "class",
        "end_line": 768
      }
    ]
  },
  "JxPath_2": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Common superclass for several types of nodes in the parse tree. Provides\n * APIs for optimization of evaluation of expressions.  Specifically, an\n * expression only needs to executed once during the evaluation of an xpath\n * if that expression is context-independent.  Expression.isContextDependent()\n * provides that hint.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_2/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
        "span_end": 76,
        "name": "Expression",
        "start_line": 39,
        "span_start": 77,
        "bug_name": "JxPath_2",
        "type": "class",
        "end_line": 145
      },
      {
        "javadoc": "/**\n * Common superclass for several types of nodes in the parse tree. Provides\n * APIs for optimization of evaluation of expressions.  Specifically, an\n * expression only needs to executed once during the evaluation of an xpath\n * if that expression is context-independent.  Expression.isContextDependent()\n * provides that hint.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_2/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
        "span_end": 87,
        "name": "Expression",
        "start_line": 39,
        "span_start": 88,
        "bug_name": "JxPath_2",
        "type": "class",
        "end_line": 145
      },
      {
        "javadoc": "/**\n * Common superclass for several types of nodes in the parse tree. Provides\n * APIs for optimization of evaluation of expressions.  Specifically, an\n * expression only needs to executed once during the evaluation of an xpath\n * if that expression is context-independent.  Expression.isContextDependent()\n * provides that hint.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_2/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
        "span_end": 145,
        "name": "Expression",
        "start_line": 39,
        "span_start": 145,
        "bug_name": "JxPath_2",
        "type": "class",
        "end_line": 145
      }
    ]
  },
  "JxPath_3": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_3/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
        "span_end": 108,
        "name": "NullPropertyPointer",
        "start_line": 28,
        "span_start": 109,
        "bug_name": "JxPath_3",
        "type": "class",
        "end_line": 224
      },
      {
        "javadoc": "/**\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_3/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
        "span_end": 137,
        "name": "NullPropertyPointer",
        "start_line": 28,
        "span_start": 138,
        "bug_name": "JxPath_3",
        "type": "class",
        "end_line": 224
      },
      {
        "javadoc": "/**\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_3/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
        "span_end": 224,
        "name": "NullPropertyPointer",
        "start_line": 28,
        "span_start": 224,
        "bug_name": "JxPath_3",
        "type": "class",
        "end_line": 224
      }
    ]
  },
  "JxPath_4": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_4/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 301,
        "name": "DOMNodePointer",
        "start_line": 53,
        "span_start": 296,
        "bug_name": "JxPath_4",
        "type": "class",
        "end_line": 729
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_4/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 310,
        "name": "DOMNodePointer",
        "start_line": 53,
        "span_start": 311,
        "bug_name": "JxPath_4",
        "type": "class",
        "end_line": 729
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_4/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 660,
        "name": "DOMNodePointer",
        "start_line": 53,
        "span_start": 632,
        "bug_name": "JxPath_4",
        "type": "class",
        "end_line": 729
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_4/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 240,
        "name": "JDOMNodePointer",
        "start_line": 50,
        "span_start": 240,
        "bug_name": "JxPath_4",
        "type": "class",
        "end_line": 756
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_4/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 262,
        "name": "JDOMNodePointer",
        "start_line": 50,
        "span_start": 249,
        "bug_name": "JxPath_4",
        "type": "class",
        "end_line": 756
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_4/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 441,
        "name": "JDOMNodePointer",
        "start_line": 50,
        "span_start": 436,
        "bug_name": "JxPath_4",
        "type": "class",
        "end_line": 756
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_4/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 756,
        "name": "JDOMNodePointer",
        "start_line": 50,
        "span_start": 756,
        "bug_name": "JxPath_4",
        "type": "class",
        "end_line": 756
      }
    ]
  },
  "JxPath_7": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * Implementation of Expression for the operation \"&gt;\".\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java",
        "span_end": 34,
        "name": "CoreOperationGreaterThan",
        "start_line": 25,
        "span_start": 31,
        "bug_name": "JxPath_7",
        "type": "class",
        "end_line": 40
      },
      {
        "javadoc": "/**\n * Implementation of Expression for the operation \"&gt;=\".\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java",
        "span_end": 35,
        "name": "CoreOperationGreaterThanOrEqual",
        "start_line": 25,
        "span_start": 32,
        "bug_name": "JxPath_7",
        "type": "class",
        "end_line": 41
      },
      {
        "javadoc": "/**\n * Implementation of Expression for the operation \"&lt;\".\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java",
        "span_end": 34,
        "name": "CoreOperationLessThan",
        "start_line": 25,
        "span_start": 31,
        "bug_name": "JxPath_7",
        "type": "class",
        "end_line": 40
      },
      {
        "javadoc": "/**\n * Implementation of Expression for the operation \"&lt;=\".\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java",
        "span_end": 35,
        "name": "CoreOperationLessThanOrEqual",
        "start_line": 25,
        "span_start": 32,
        "bug_name": "JxPath_7",
        "type": "class",
        "end_line": 41
      },
      {
        "javadoc": "/**\n * Base implementation of Expression for the operations \"&gt;\", \"&gt;=\", \"&lt;\", \"&lt;=\".\n *\n * @author Matt Benson\n * @version $Revision:$ $Date:$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
        "span_end": 32,
        "name": "CoreOperationRelationalExpression",
        "start_line": 27,
        "span_start": 33,
        "bug_name": "JxPath_7",
        "type": "class",
        "end_line": 49
      },
      {
        "javadoc": "/**\n * Base implementation of Expression for the operations \"&gt;\", \"&gt;=\", \"&lt;\", \"&lt;=\".\n *\n * @author Matt Benson\n * @version $Revision:$ $Date:$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
        "span_end": 46,
        "name": "CoreOperationRelationalExpression",
        "start_line": 27,
        "span_start": 42,
        "bug_name": "JxPath_7",
        "type": "class",
        "end_line": 49
      }
    ]
  },
  "JxPath_9": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * Common superclass for the implementations of Expression for the operations\n * \"=\" and \"!=\".\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
        "span_end": 42,
        "name": "CoreOperationCompare",
        "start_line": 36,
        "span_start": 37,
        "bug_name": "JxPath_9",
        "type": "class",
        "end_line": 153
      },
      {
        "javadoc": "/**\n * Common superclass for the implementations of Expression for the operations\n * \"=\" and \"!=\".\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
        "span_end": 127,
        "name": "CoreOperationCompare",
        "start_line": 36,
        "span_start": 123,
        "bug_name": "JxPath_9",
        "type": "class",
        "end_line": 153
      },
      {
        "javadoc": "/**\n * Common superclass for the implementations of Expression for the operations\n * \"=\" and \"!=\".\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
        "span_end": 150,
        "name": "CoreOperationCompare",
        "start_line": 36,
        "span_start": 136,
        "bug_name": "JxPath_9",
        "type": "class",
        "end_line": 153
      },
      {
        "javadoc": "/**\n * Implementation of Expression for the operation \"=\".\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java",
        "span_end": 33,
        "name": "CoreOperationEqual",
        "start_line": 25,
        "span_start": 31,
        "bug_name": "JxPath_9",
        "type": "class",
        "end_line": 37
      },
      {
        "javadoc": "/**\n * Implementation of Expression for the operation \"!=\".\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java",
        "span_end": 33,
        "name": "CoreOperationNotEqual",
        "start_line": 25,
        "span_start": 28,
        "bug_name": "JxPath_9",
        "type": "class",
        "end_line": 37
      }
    ]
  },
  "JxPath_11": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * An iterator of attributes of a DOM Node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_11/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
        "span_end": 111,
        "name": "DOMAttributeIterator",
        "start_line": 36,
        "span_start": 111,
        "bug_name": "JxPath_11",
        "type": "class",
        "end_line": 157
      },
      {
        "javadoc": "/**\n * An iterator of attributes of a DOM Node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_11/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "span_end": 57,
        "name": "JDOMAttributeIterator",
        "start_line": 36,
        "span_start": 52,
        "bug_name": "JxPath_11",
        "type": "class",
        "end_line": 114
      },
      {
        "javadoc": "/**\n * An iterator of attributes of a DOM Node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_11/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "span_end": 114,
        "name": "JDOMAttributeIterator",
        "start_line": 36,
        "span_start": 114,
        "bug_name": "JxPath_11",
        "type": "class",
        "end_line": 114
      }
    ]
  },
  "JxPath_13": {
    "bug_count": 10,
    "entries": [
      {
        "javadoc": "/**\n * Namespace resolver for JXPathContextReferenceImpl.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 46,
        "name": "NamespaceResolver",
        "start_line": 33,
        "span_start": 47,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 200
      },
      {
        "javadoc": "/**\n * Namespace resolver for JXPathContextReferenceImpl.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 107,
        "name": "NamespaceResolver",
        "start_line": 33,
        "span_start": 108,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 200
      },
      {
        "javadoc": "/**\n * Namespace resolver for JXPathContextReferenceImpl.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 123,
        "name": "NamespaceResolver",
        "start_line": 33,
        "span_start": 116,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 200
      },
      {
        "javadoc": "/**\n * Namespace resolver for JXPathContextReferenceImpl.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 131,
        "name": "NamespaceResolver",
        "start_line": 33,
        "span_start": 132,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 200
      },
      {
        "javadoc": "/**\n * Namespace resolver for JXPathContextReferenceImpl.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 151,
        "name": "NamespaceResolver",
        "start_line": 33,
        "span_start": 139,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 200
      },
      {
        "javadoc": "/**\n * Namespace resolver for JXPathContextReferenceImpl.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 162,
        "name": "NamespaceResolver",
        "start_line": 33,
        "span_start": 159,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 200
      },
      {
        "javadoc": "/**\n * Namespace resolver for JXPathContextReferenceImpl.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 200,
        "name": "NamespaceResolver",
        "start_line": 33,
        "span_start": 200,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 200
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 60,
        "name": "DOMNodePointer",
        "start_line": 53,
        "span_start": 61,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 732
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 188,
        "name": "DOMNodePointer",
        "start_line": 53,
        "span_start": 189,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 732
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_13/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 415,
        "name": "DOMNodePointer",
        "start_line": 53,
        "span_start": 415,
        "bug_name": "JxPath_13",
        "type": "class",
        "end_line": 732
      }
    ]
  },
  "JxPath_15": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * EvalContext that represents a union between other contexts - result\n * of a union operation like (a | b)\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_15/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java",
        "span_end": 62,
        "name": "UnionContext",
        "start_line": 32,
        "span_start": 56,
        "bug_name": "JxPath_15",
        "type": "class",
        "end_line": 65
      }
    ]
  },
  "JxPath_16": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_16/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 148,
        "name": "DOMNodePointer",
        "start_line": 54,
        "span_start": 147,
        "bug_name": "JxPath_16",
        "type": "class",
        "end_line": 920
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_16/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 391,
        "name": "JDOMNodePointer",
        "start_line": 51,
        "span_start": 391,
        "bug_name": "JxPath_16",
        "type": "class",
        "end_line": 772
      }
    ]
  },
  "JxPath_17": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * An iterator of attributes of a DOM Node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_17/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
        "span_end": 95,
        "name": "DOMAttributeIterator",
        "start_line": 36,
        "span_start": 84,
        "bug_name": "JxPath_17",
        "type": "class",
        "end_line": 155
      },
      {
        "javadoc": "/**\n * An iterator of attributes of a DOM Node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_17/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
        "span_end": 155,
        "name": "DOMAttributeIterator",
        "start_line": 36,
        "span_start": 155,
        "bug_name": "JxPath_17",
        "type": "class",
        "end_line": 155
      },
      {
        "javadoc": "/**\n * An iterator of attributes of a DOM Node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_17/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "span_end": 74,
        "name": "JDOMAttributeIterator",
        "start_line": 36,
        "span_start": 70,
        "bug_name": "JxPath_17",
        "type": "class",
        "end_line": 117
      },
      {
        "javadoc": "/**\n * An iterator of attributes of a DOM Node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_17/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "span_end": 82,
        "name": "JDOMAttributeIterator",
        "start_line": 36,
        "span_start": 82,
        "bug_name": "JxPath_17",
        "type": "class",
        "end_line": 117
      },
      {
        "javadoc": "/**\n * An iterator of attributes of a DOM Node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_17/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "span_end": 117,
        "name": "JDOMAttributeIterator",
        "start_line": 36,
        "span_start": 117,
        "bug_name": "JxPath_17",
        "type": "class",
        "end_line": 117
      }
    ]
  },
  "JxPath_18": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * EvalContext that walks the \"attribute::\" axis.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_18/src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java",
        "span_end": 32,
        "name": "AttributeContext",
        "start_line": 32,
        "span_start": 33,
        "bug_name": "JxPath_18",
        "type": "class",
        "end_line": 91
      },
      {
        "javadoc": "/**\n * EvalContext that walks the \"attribute::\" axis.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_18/src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java",
        "span_end": 80,
        "name": "AttributeContext",
        "start_line": 32,
        "span_start": 75,
        "bug_name": "JxPath_18",
        "type": "class",
        "end_line": 91
      },
      {
        "javadoc": "/**\n * EvalContext that walks the \"attribute::\" axis.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_18/src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java",
        "span_end": 91,
        "name": "AttributeContext",
        "start_line": 32,
        "span_start": 91,
        "bug_name": "JxPath_18",
        "type": "class",
        "end_line": 91
      }
    ]
  },
  "JxPath_19": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node. Because a DOM Node is not guaranteed Serializable,\n * a DOMNodePointer instance may likewise not be properly Serializable.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_19/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 570,
        "name": "DOMNodePointer",
        "start_line": 54,
        "span_start": 560,
        "bug_name": "JxPath_19",
        "type": "class",
        "end_line": 789
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_19/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 697,
        "name": "JDOMNodePointer",
        "start_line": 50,
        "span_start": 696,
        "bug_name": "JxPath_19",
        "type": "class",
        "end_line": 812
      },
      {
        "javadoc": "/**\n * A Pointer that points to a DOM node.\n *\n * @author Dmitri Plotnikov\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_19/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 708,
        "name": "JDOMNodePointer",
        "start_line": 50,
        "span_start": 709,
        "bug_name": "JxPath_19",
        "type": "class",
        "end_line": 812
      }
    ]
  },
  "JxPath_20": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Base implementation of Expression for the operations \"&gt;\", \"&gt;=\", \"&lt;\", \"&lt;=\".\n * @since JXPath 1.3\n *\n * @author Matt Benson\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_20/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
        "span_end": 88,
        "name": "CoreOperationRelationalExpression",
        "start_line": 35,
        "span_start": 88,
        "bug_name": "JxPath_20",
        "type": "class",
        "end_line": 158
      },
      {
        "javadoc": "/**\n * Base implementation of Expression for the operations \"&gt;\", \"&gt;=\", \"&lt;\", \"&lt;=\".\n * @since JXPath 1.3\n *\n * @author Matt Benson\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/JxPath_20/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
        "span_end": 137,
        "name": "CoreOperationRelationalExpression",
        "start_line": 35,
        "span_start": 138,
        "bug_name": "JxPath_20",
        "type": "class",
        "end_line": 158
      }
    ]
  },
  "Lang_4": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Translates a value using a lookup table.\n *\n * @since 3.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "span_end": 31,
        "name": "LookupTranslator",
        "start_line": 29,
        "span_start": 31,
        "bug_name": "Lang_4",
        "type": "class",
        "end_line": 85
      },
      {
        "javadoc": "/**\n * Translates a value using a lookup table.\n *\n * @since 3.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "span_end": 51,
        "name": "LookupTranslator",
        "start_line": 29,
        "span_start": 46,
        "bug_name": "Lang_4",
        "type": "class",
        "end_line": 85
      },
      {
        "javadoc": "/**\n * Translates a value using a lookup table.\n *\n * @since 3.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "span_end": 77,
        "name": "LookupTranslator",
        "start_line": 29,
        "span_start": 77,
        "bug_name": "Lang_4",
        "type": "class",
        "end_line": 85
      }
    ]
  },
  "Lang_5": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Operations to assist when working with a {@link Locale}.</p>\n *\n * <p>This class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behaviour in more detail.</p>\n *\n * @since 2.2\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_5/src/main/java/org/apache/commons/lang3/LocaleUtils.java",
        "span_end": 96,
        "name": "LocaleUtils",
        "start_line": 39,
        "span_start": 97,
        "bug_name": "Lang_5",
        "type": "class",
        "end_line": 301
      },
      {
        "javadoc": "/**\n * <p>Operations to assist when working with a {@link Locale}.</p>\n *\n * <p>This class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behaviour in more detail.</p>\n *\n * @since 2.2\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_5/src/main/java/org/apache/commons/lang3/LocaleUtils.java",
        "span_end": 127,
        "name": "LocaleUtils",
        "start_line": 39,
        "span_start": 128,
        "bug_name": "Lang_5",
        "type": "class",
        "end_line": 301
      }
    ]
  },
  "Lang_7": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 454,
        "name": "NumberUtils",
        "start_line": 30,
        "span_start": 452,
        "bug_name": "Lang_7",
        "type": "class",
        "end_line": 1422
      },
      {
        "javadoc": "/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 724,
        "name": "NumberUtils",
        "start_line": 30,
        "span_start": 721,
        "bug_name": "Lang_7",
        "type": "class",
        "end_line": 1422
      }
    ]
  },
  "Lang_8": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * <p>FastDatePrinter is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * {@code SimpleDateFormat} in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * {@code SimpleDateFormat} is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n * ISO8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n * 'YYY' will be formatted as '2003', while it was '03' in former Java\n * versions. FastDatePrinter implements the behavior of Java 7.</p>\n *\n * @since 3.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_8/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "span_end": 1098,
        "name": "FastDatePrinter",
        "start_line": 68,
        "span_start": 1098,
        "bug_name": "Lang_8",
        "type": "class",
        "end_line": 1251
      },
      {
        "javadoc": "/**\n * <p>Inner class to output a time zone name.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_8/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "span_end": 1098,
        "name": "TimeZoneNameRule",
        "start_line": 1095,
        "span_start": 1098,
        "bug_name": "Lang_8",
        "type": "class",
        "end_line": 1141
      },
      {
        "javadoc": "/**\n * <p>FastDatePrinter is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * {@code SimpleDateFormat} in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * {@code SimpleDateFormat} is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n * ISO8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n * 'YYY' will be formatted as '2003', while it was '03' in former Java\n * versions. FastDatePrinter implements the behavior of Java 7.</p>\n *\n * @since 3.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_8/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "span_end": 1112,
        "name": "FastDatePrinter",
        "start_line": 68,
        "span_start": 1112,
        "bug_name": "Lang_8",
        "type": "class",
        "end_line": 1251
      },
      {
        "javadoc": "/**\n * <p>Inner class to output a time zone name.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_8/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "span_end": 1112,
        "name": "TimeZoneNameRule",
        "start_line": 1095,
        "span_start": 1112,
        "bug_name": "Lang_8",
        "type": "class",
        "end_line": 1141
      },
      {
        "javadoc": "/**\n * <p>FastDatePrinter is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * {@code SimpleDateFormat} in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * {@code SimpleDateFormat} is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n * ISO8601 full format time zones (eg. {@code +08:00} or {@code -11:00}).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n * 'YYY' will be formatted as '2003', while it was '03' in former Java\n * versions. FastDatePrinter implements the behavior of Java 7.</p>\n *\n * @since 3.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_8/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "span_end": 1133,
        "name": "FastDatePrinter",
        "start_line": 68,
        "span_start": 1134,
        "bug_name": "Lang_8",
        "type": "class",
        "end_line": 1251
      },
      {
        "javadoc": "/**\n * <p>Inner class to output a time zone name.</p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_8/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "span_end": 1133,
        "name": "TimeZoneNameRule",
        "start_line": 1095,
        "span_start": 1134,
        "bug_name": "Lang_8",
        "type": "class",
        "end_line": 1141
      }
    ]
  },
  "Lang_13": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * <p>Assists with the serialization process and performs additional functionality based\n * on serialization.</p>\n * <p>\n * <ul>\n * <li>Deep clone using serialization\n * <li>Serialize managing finally and IOException\n * <li>Deserialize managing finally and IOException\n * </ul>\n *\n * <p>This class throws exceptions for invalid {@code null} inputs.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "span_end": 238,
        "name": "SerializationUtils",
        "start_line": 48,
        "span_start": 239,
        "bug_name": "Lang_13",
        "type": "class",
        "end_line": 274
      },
      {
        "javadoc": "/**\n * <p>Custom specialization of the standard JDK {@link java.io.ObjectInputStream}\n * that uses a custom  <code>ClassLoader</code> to resolve a class.\n * If the specified <code>ClassLoader</code> is not able to resolve the class,\n * the context classloader of the current thread will be used.\n * This way, the standard deserialization work also in web-application\n * containers and application servers, no matter in which of the\n * <code>ClassLoader</code> the particular class that encapsulates\n * serialization/deserialization lives. </p>\n *\n * <p>For more in-depth information about the problem for which this\n * class here is a workaround, see the JIRA issue LANG-626. </p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "span_end": 238,
        "name": "ClassLoaderAwareObjectInputStream",
        "start_line": 238,
        "span_start": 239,
        "bug_name": "Lang_13",
        "type": "class",
        "end_line": 272
      },
      {
        "javadoc": "/**\n * <p>Assists with the serialization process and performs additional functionality based\n * on serialization.</p>\n * <p>\n * <ul>\n * <li>Deep clone using serialization\n * <li>Serialize managing finally and IOException\n * <li>Deserialize managing finally and IOException\n * </ul>\n *\n * <p>This class throws exceptions for invalid {@code null} inputs.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "span_end": 251,
        "name": "SerializationUtils",
        "start_line": 48,
        "span_start": 252,
        "bug_name": "Lang_13",
        "type": "class",
        "end_line": 274
      },
      {
        "javadoc": "/**\n * <p>Custom specialization of the standard JDK {@link java.io.ObjectInputStream}\n * that uses a custom  <code>ClassLoader</code> to resolve a class.\n * If the specified <code>ClassLoader</code> is not able to resolve the class,\n * the context classloader of the current thread will be used.\n * This way, the standard deserialization work also in web-application\n * containers and application servers, no matter in which of the\n * <code>ClassLoader</code> the particular class that encapsulates\n * serialization/deserialization lives. </p>\n *\n * <p>For more in-depth information about the problem for which this\n * class here is a workaround, see the JIRA issue LANG-626. </p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "span_end": 251,
        "name": "ClassLoaderAwareObjectInputStream",
        "start_line": 238,
        "span_start": 252,
        "bug_name": "Lang_13",
        "type": "class",
        "end_line": 272
      },
      {
        "javadoc": "/**\n * <p>Assists with the serialization process and performs additional functionality based\n * on serialization.</p>\n * <p>\n * <ul>\n * <li>Deep clone using serialization\n * <li>Serialize managing finally and IOException\n * <li>Deserialize managing finally and IOException\n * </ul>\n *\n * <p>This class throws exceptions for invalid {@code null} inputs.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "span_end": 268,
        "name": "SerializationUtils",
        "start_line": 48,
        "span_start": 268,
        "bug_name": "Lang_13",
        "type": "class",
        "end_line": 274
      },
      {
        "javadoc": "/**\n * <p>Custom specialization of the standard JDK {@link java.io.ObjectInputStream}\n * that uses a custom  <code>ClassLoader</code> to resolve a class.\n * If the specified <code>ClassLoader</code> is not able to resolve the class,\n * the context classloader of the current thread will be used.\n * This way, the standard deserialization work also in web-application\n * containers and application servers, no matter in which of the\n * <code>ClassLoader</code> the particular class that encapsulates\n * serialization/deserialization lives. </p>\n *\n * <p>For more in-depth information about the problem for which this\n * class here is a workaround, see the JIRA issue LANG-626. </p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "span_end": 268,
        "name": "ClassLoaderAwareObjectInputStream",
        "start_line": 238,
        "span_start": 268,
        "bug_name": "Lang_13",
        "type": "class",
        "end_line": 272
      }
    ]
  },
  "Lang_15": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p> Utility methods focusing on type inspection, particularly with regard to\n * generics. </p>\n *\n * @since 3.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "span_end": 221,
        "name": "TypeUtils",
        "start_line": 41,
        "span_start": 219,
        "bug_name": "Lang_15",
        "type": "class",
        "end_line": 1101
      },
      {
        "javadoc": "/**\n * <p> Utility methods focusing on type inspection, particularly with regard to\n * generics. </p>\n *\n * @since 3.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "span_end": 675,
        "name": "TypeUtils",
        "start_line": 41,
        "span_start": 675,
        "bug_name": "Lang_15",
        "type": "class",
        "end_line": 1101
      }
    ]
  },
  "Lang_19": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Translate XML numeric entities of the form &#[xX]?\\d+;? to\n * the specific codepoint.\n *\n * Note that the semi-colon is optional.\n *\n * @since 3.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "span_end": 40,
        "name": "NumericEntityUnescaper",
        "start_line": 31,
        "span_start": 40,
        "bug_name": "Lang_19",
        "type": "class",
        "end_line": 84
      },
      {
        "javadoc": "/**\n * Translate XML numeric entities of the form &#[xX]?\\d+;? to\n * the specific codepoint.\n *\n * Note that the semi-colon is optional.\n *\n * @since 3.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "span_end": 54,
        "name": "NumericEntityUnescaper",
        "start_line": 31,
        "span_start": 50,
        "bug_name": "Lang_19",
        "type": "class",
        "end_line": 84
      },
      {
        "javadoc": "/**\n * Translate XML numeric entities of the form &#[xX]?\\d+;? to\n * the specific codepoint.\n *\n * Note that the semi-colon is optional.\n *\n * @since 3.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "span_end": 80,
        "name": "NumericEntityUnescaper",
        "start_line": 31,
        "span_start": 79,
        "bug_name": "Lang_19",
        "type": "class",
        "end_line": 84
      }
    ]
  },
  "Lang_20": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Lang_20/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 3298,
        "name": "StringUtils",
        "start_line": 110,
        "span_start": 3298,
        "bug_name": "Lang_20",
        "type": "class",
        "end_line": 6564
      },
      {
        "file": "/Users/danielding/WORK_DIR/Lang_20/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 3383,
        "name": "StringUtils",
        "start_line": 110,
        "span_start": 3383,
        "bug_name": "Lang_20",
        "type": "class",
        "end_line": 6564
      }
    ]
  },
  "Lang_23": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Extends <code>java.text.MessageFormat</code> to allow pluggable/additional formatting\n * options for embedded format elements.  Client code should specify a registry\n * of <code>FormatFactory</code> instances associated with <code>String</code>\n * format names.  This registry will be consulted when the format elements are\n * parsed from the message pattern.  In this way custom patterns can be specified,\n * and the formats supported by <code>java.text.MessageFormat</code> can be overridden\n * at the format and/or format style level (see MessageFormat).  A \"format element\"\n * embedded in the message pattern is specified (<b>()?</b> signifies optionality):<br />\n * <code>{</code><i>argument-number</i><b>(</b><code>,</code><i>format-name</i><b>(</b><code>,</code><i>format-style</i><b>)?)?</b><code>}</code>\n *\n * <p>\n * <i>format-name</i> and <i>format-style</i> values are trimmed of surrounding whitespace\n * in the manner of <code>java.text.MessageFormat</code>.  If <i>format-name</i> denotes\n * <code>FormatFactory formatFactoryInstance</code> in <code>registry</code>, a <code>Format</code>\n * matching <i>format-name</i> and <i>format-style</i> is requested from\n * <code>formatFactoryInstance</code>.  If this is successful, the <code>Format</code>\n * found is used for this format element.\n * </p>\n *\n * <p><b>NOTICE:</b> The various subformat mutator methods are considered unnecessary; they exist on the parent\n * class to allow the type of customization which it is the job of this class to provide in\n * a configurable fashion.  These methods have thus been disabled and will throw\n * <code>UnsupportedOperationException</code> if called.\n * </p>\n *\n * <p>Limitations inherited from <code>java.text.MessageFormat</code>:\n * <ul>\n * <li>When using \"choice\" subformats, support for nested formatting instructions is limited\n *     to that provided by the base class.</li>\n * <li>Thread-safety of <code>Format</code>s, including <code>MessageFormat</code> and thus\n *     <code>ExtendedMessageFormat</code>, is not guaranteed.</li>\n * </ul>\n * </p>\n *\n * @author Apache Software Foundation\n * @author Matt Benson\n * @since 2.4\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "span_end": 72,
        "name": "ExtendedMessageFormat",
        "start_line": 71,
        "span_start": 73,
        "bug_name": "Lang_23",
        "type": "class",
        "end_line": 505
      },
      {
        "javadoc": "/**\n * Extends <code>java.text.MessageFormat</code> to allow pluggable/additional formatting\n * options for embedded format elements.  Client code should specify a registry\n * of <code>FormatFactory</code> instances associated with <code>String</code>\n * format names.  This registry will be consulted when the format elements are\n * parsed from the message pattern.  In this way custom patterns can be specified,\n * and the formats supported by <code>java.text.MessageFormat</code> can be overridden\n * at the format and/or format style level (see MessageFormat).  A \"format element\"\n * embedded in the message pattern is specified (<b>()?</b> signifies optionality):<br />\n * <code>{</code><i>argument-number</i><b>(</b><code>,</code><i>format-name</i><b>(</b><code>,</code><i>format-style</i><b>)?)?</b><code>}</code>\n *\n * <p>\n * <i>format-name</i> and <i>format-style</i> values are trimmed of surrounding whitespace\n * in the manner of <code>java.text.MessageFormat</code>.  If <i>format-name</i> denotes\n * <code>FormatFactory formatFactoryInstance</code> in <code>registry</code>, a <code>Format</code>\n * matching <i>format-name</i> and <i>format-style</i> is requested from\n * <code>formatFactoryInstance</code>.  If this is successful, the <code>Format</code>\n * found is used for this format element.\n * </p>\n *\n * <p><b>NOTICE:</b> The various subformat mutator methods are considered unnecessary; they exist on the parent\n * class to allow the type of customization which it is the job of this class to provide in\n * a configurable fashion.  These methods have thus been disabled and will throw\n * <code>UnsupportedOperationException</code> if called.\n * </p>\n *\n * <p>Limitations inherited from <code>java.text.MessageFormat</code>:\n * <ul>\n * <li>When using \"choice\" subformats, support for nested formatting instructions is limited\n *     to that provided by the base class.</li>\n * <li>Thread-safety of <code>Format</code>s, including <code>MessageFormat</code> and thus\n *     <code>ExtendedMessageFormat</code>, is not guaranteed.</li>\n * </ul>\n * </p>\n *\n * @author Apache Software Foundation\n * @author Matt Benson\n * @since 2.4\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "span_end": 268,
        "name": "ExtendedMessageFormat",
        "start_line": 71,
        "span_start": 263,
        "bug_name": "Lang_23",
        "type": "class",
        "end_line": 505
      }
    ]
  },
  "Lang_27": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 479,
        "name": "NumberUtils",
        "start_line": 38,
        "span_start": 479,
        "bug_name": "Lang_27",
        "type": "class",
        "end_line": 1420
      },
      {
        "javadoc": "/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 488,
        "name": "NumberUtils",
        "start_line": 38,
        "span_start": 489,
        "bug_name": "Lang_27",
        "type": "class",
        "end_line": 1420
      }
    ]
  },
  "Lang_30": {
    "bug_count": 7,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1382,
        "name": "StringUtils",
        "start_line": 127,
        "span_start": 1376,
        "bug_name": "Lang_30",
        "type": "class",
        "end_line": 6152
      },
      {
        "file": "/Users/danielding/WORK_DIR/Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1443,
        "name": "StringUtils",
        "start_line": 127,
        "span_start": 1443,
        "bug_name": "Lang_30",
        "type": "class",
        "end_line": 6152
      },
      {
        "file": "/Users/danielding/WORK_DIR/Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1457,
        "name": "StringUtils",
        "start_line": 127,
        "span_start": 1455,
        "bug_name": "Lang_30",
        "type": "class",
        "end_line": 6152
      },
      {
        "file": "/Users/danielding/WORK_DIR/Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1497,
        "name": "StringUtils",
        "start_line": 127,
        "span_start": 1497,
        "bug_name": "Lang_30",
        "type": "class",
        "end_line": 6152
      },
      {
        "file": "/Users/danielding/WORK_DIR/Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1539,
        "name": "StringUtils",
        "start_line": 127,
        "span_start": 1533,
        "bug_name": "Lang_30",
        "type": "class",
        "end_line": 6152
      },
      {
        "file": "/Users/danielding/WORK_DIR/Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1577,
        "name": "StringUtils",
        "start_line": 127,
        "span_start": 1576,
        "bug_name": "Lang_30",
        "type": "class",
        "end_line": 6152
      },
      {
        "file": "/Users/danielding/WORK_DIR/Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1685,
        "name": "StringUtils",
        "start_line": 127,
        "span_start": 1678,
        "bug_name": "Lang_30",
        "type": "class",
        "end_line": 6152
      }
    ]
  },
  "Lang_32": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * <p>\n * Assists in implementing {@link Object#hashCode()} methods.\n * </p>\n *\n * <p>\n * This class enables a good <code>hashCode</code> method to be built for any class. It follows the rules laid out in\n * the book <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a> by Joshua Bloch. Writing a\n * good <code>hashCode</code> method is actually quite difficult. This class aims to simplify the process.\n * </p>\n *\n * <p>\n * All relevant fields from the object should be included in the <code>hashCode</code> method. Derived fields may be\n * excluded. In general, any field used in the <code>equals</code> method must be used in the <code>hashCode</code>\n * method.\n * </p>\n *\n * <p>\n * To use this class write code as follows:\n * </p>\n *\n * <pre>\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   ...\n *\n *   public int hashCode() {\n *     // you pick a hard-coded, randomly chosen, non-zero, odd number\n *     // ideally different for each class\n *     return new HashCodeBuilder(17, 37).\n *       append(name).\n *       append(age).\n *       append(smoker).\n *       toHashCode();\n *   }\n * }\n * </pre>\n *\n * <p>\n * If required, the superclass <code>hashCode()</code> can be added using {@link #appendSuper}.\n * </p>\n *\n * <p>\n * Alternatively, there is a method that uses reflection to determine the fields to test. Because these fields are\n * usually private, the method, <code>reflectionHashCode</code>, uses <code>AccessibleObject.setAccessible</code>\n * to change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions\n * are set up correctly. It is also slower than testing explicitly.\n * </p>\n *\n * <p>\n * A typical invocation for this method would look like:\n * </p>\n *\n * <pre>\n * public int hashCode() {\n *   return HashCodeBuilder.reflectionHashCode(this);\n * }\n * </pre>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "span_end": 109,
        "name": "HashCodeBuilder",
        "start_line": 96,
        "span_start": 104,
        "bug_name": "Lang_32",
        "type": "class",
        "end_line": 982
      },
      {
        "javadoc": "/**\n * <p>\n * Assists in implementing {@link Object#hashCode()} methods.\n * </p>\n *\n * <p>\n * This class enables a good <code>hashCode</code> method to be built for any class. It follows the rules laid out in\n * the book <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a> by Joshua Bloch. Writing a\n * good <code>hashCode</code> method is actually quite difficult. This class aims to simplify the process.\n * </p>\n *\n * <p>\n * All relevant fields from the object should be included in the <code>hashCode</code> method. Derived fields may be\n * excluded. In general, any field used in the <code>equals</code> method must be used in the <code>hashCode</code>\n * method.\n * </p>\n *\n * <p>\n * To use this class write code as follows:\n * </p>\n *\n * <pre>\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   ...\n *\n *   public int hashCode() {\n *     // you pick a hard-coded, randomly chosen, non-zero, odd number\n *     // ideally different for each class\n *     return new HashCodeBuilder(17, 37).\n *       append(name).\n *       append(age).\n *       append(smoker).\n *       toHashCode();\n *   }\n * }\n * </pre>\n *\n * <p>\n * If required, the superclass <code>hashCode()</code> can be added using {@link #appendSuper}.\n * </p>\n *\n * <p>\n * Alternatively, there is a method that uses reflection to determine the fields to test. Because these fields are\n * usually private, the method, <code>reflectionHashCode</code>, uses <code>AccessibleObject.setAccessible</code>\n * to change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions\n * are set up correctly. It is also slower than testing explicitly.\n * </p>\n *\n * <p>\n * A typical invocation for this method would look like:\n * </p>\n *\n * <pre>\n * public int hashCode() {\n *   return HashCodeBuilder.reflectionHashCode(this);\n * }\n * </pre>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "span_end": 152,
        "name": "HashCodeBuilder",
        "start_line": 96,
        "span_start": 152,
        "bug_name": "Lang_32",
        "type": "class",
        "end_line": 982
      },
      {
        "javadoc": "/**\n * <p>\n * Assists in implementing {@link Object#hashCode()} methods.\n * </p>\n *\n * <p>\n * This class enables a good <code>hashCode</code> method to be built for any class. It follows the rules laid out in\n * the book <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a> by Joshua Bloch. Writing a\n * good <code>hashCode</code> method is actually quite difficult. This class aims to simplify the process.\n * </p>\n *\n * <p>\n * All relevant fields from the object should be included in the <code>hashCode</code> method. Derived fields may be\n * excluded. In general, any field used in the <code>equals</code> method must be used in the <code>hashCode</code>\n * method.\n * </p>\n *\n * <p>\n * To use this class write code as follows:\n * </p>\n *\n * <pre>\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   ...\n *\n *   public int hashCode() {\n *     // you pick a hard-coded, randomly chosen, non-zero, odd number\n *     // ideally different for each class\n *     return new HashCodeBuilder(17, 37).\n *       append(name).\n *       append(age).\n *       append(smoker).\n *       toHashCode();\n *   }\n * }\n * </pre>\n *\n * <p>\n * If required, the superclass <code>hashCode()</code> can be added using {@link #appendSuper}.\n * </p>\n *\n * <p>\n * Alternatively, there is a method that uses reflection to determine the fields to test. Because these fields are\n * usually private, the method, <code>reflectionHashCode</code>, uses <code>AccessibleObject.setAccessible</code>\n * to change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions\n * are set up correctly. It is also slower than testing explicitly.\n * </p>\n *\n * <p>\n * A typical invocation for this method would look like:\n * </p>\n *\n * <pre>\n * public int hashCode() {\n *   return HashCodeBuilder.reflectionHashCode(this);\n * }\n * </pre>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "span_end": 521,
        "name": "HashCodeBuilder",
        "start_line": 96,
        "span_start": 522,
        "bug_name": "Lang_32",
        "type": "class",
        "end_line": 982
      },
      {
        "javadoc": "/**\n * <p>\n * Assists in implementing {@link Object#hashCode()} methods.\n * </p>\n *\n * <p>\n * This class enables a good <code>hashCode</code> method to be built for any class. It follows the rules laid out in\n * the book <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a> by Joshua Bloch. Writing a\n * good <code>hashCode</code> method is actually quite difficult. This class aims to simplify the process.\n * </p>\n *\n * <p>\n * All relevant fields from the object should be included in the <code>hashCode</code> method. Derived fields may be\n * excluded. In general, any field used in the <code>equals</code> method must be used in the <code>hashCode</code>\n * method.\n * </p>\n *\n * <p>\n * To use this class write code as follows:\n * </p>\n *\n * <pre>\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   ...\n *\n *   public int hashCode() {\n *     // you pick a hard-coded, randomly chosen, non-zero, odd number\n *     // ideally different for each class\n *     return new HashCodeBuilder(17, 37).\n *       append(name).\n *       append(age).\n *       append(smoker).\n *       toHashCode();\n *   }\n * }\n * </pre>\n *\n * <p>\n * If required, the superclass <code>hashCode()</code> can be added using {@link #appendSuper}.\n * </p>\n *\n * <p>\n * Alternatively, there is a method that uses reflection to determine the fields to test. Because these fields are\n * usually private, the method, <code>reflectionHashCode</code>, uses <code>AccessibleObject.setAccessible</code>\n * to change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions\n * are set up correctly. It is also slower than testing explicitly.\n * </p>\n *\n * <p>\n * A typical invocation for this method would look like:\n * </p>\n *\n * <pre>\n * public int hashCode() {\n *   return HashCodeBuilder.reflectionHashCode(this);\n * }\n * </pre>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "span_end": 538,
        "name": "HashCodeBuilder",
        "start_line": 96,
        "span_start": 538,
        "bug_name": "Lang_32",
        "type": "class",
        "end_line": 982
      }
    ]
  },
  "Lang_34": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Controls <code>String</code> formatting for {@link ToStringBuilder}.\n * The main public interface is always via <code>ToStringBuilder</code>.</p>\n *\n * <p>These classes are intended to be used as <code>Singletons</code>.\n * There is no need to instantiate a new style each time. A program\n * will generally use one of the predefined constants on this class.\n * Alternatively, the {@link StandardToStringStyle} class can be used\n * to set the individual settings. Thus most styles can be achieved\n * without subclassing.</p>\n *\n * <p>If required, a subclass can override as many or as few of the\n * methods as it requires. Each object type (from <code>boolean</code>\n * to <code>long</code> to <code>Object</code> to <code>int[]</code>) has\n * its own methods to output it. Most have two versions, detail and summary.\n *\n * <p>For example, the detail version of the array based methods will\n * output the whole array, whereas the summary method will just output\n * the array length.</p>\n *\n * <p>If you want to format the output of certain objects, such as dates, you\n * must create a subclass and override a method.\n * <pre>\n * public class MyStyle extends ToStringStyle {\n *   protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n *     if (value instanceof Date) {\n *       value = new SimpleDateFormat(\"yyyy-MM-dd\").format(value);\n *     }\n *     buffer.append(value);\n *   }\n * }\n * </pre>\n * </p>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @author Masato Tezuka\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_34/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "span_end": 148,
        "name": "ToStringStyle",
        "start_line": 72,
        "span_start": 148,
        "bug_name": "Lang_34",
        "type": "class",
        "end_line": 2278
      },
      {
        "javadoc": "/**\n * <p>Controls <code>String</code> formatting for {@link ToStringBuilder}.\n * The main public interface is always via <code>ToStringBuilder</code>.</p>\n *\n * <p>These classes are intended to be used as <code>Singletons</code>.\n * There is no need to instantiate a new style each time. A program\n * will generally use one of the predefined constants on this class.\n * Alternatively, the {@link StandardToStringStyle} class can be used\n * to set the individual settings. Thus most styles can be achieved\n * without subclassing.</p>\n *\n * <p>If required, a subclass can override as many or as few of the\n * methods as it requires. Each object type (from <code>boolean</code>\n * to <code>long</code> to <code>Object</code> to <code>int[]</code>) has\n * its own methods to output it. Most have two versions, detail and summary.\n *\n * <p>For example, the detail version of the array based methods will\n * output the whole array, whereas the summary method will just output\n * the array length.</p>\n *\n * <p>If you want to format the output of certain objects, such as dates, you\n * must create a subclass and override a method.\n * <pre>\n * public class MyStyle extends ToStringStyle {\n *   protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n *     if (value instanceof Date) {\n *       value = new SimpleDateFormat(\"yyyy-MM-dd\").format(value);\n *     }\n *     buffer.append(value);\n *   }\n * }\n * </pre>\n * </p>\n *\n * @author Apache Software Foundation\n * @author Gary Gregory\n * @author Pete Gieser\n * @author Masato Tezuka\n * @since 1.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_34/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "span_end": 164,
        "name": "ToStringStyle",
        "start_line": 72,
        "span_start": 164,
        "bug_name": "Lang_34",
        "type": "class",
        "end_line": 2278
      }
    ]
  },
  "Lang_35": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and\n * primitive wrapper arrays (like <code>Integer[]</code>).</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code>\n * array input. However, an Object array that contains a <code>null</code>\n * element may throw an exception. Each method documents its behaviour.</p>\n *\n * @author Apache Software Foundation\n * @author Moritz Petersen\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Nikolay Metchev\n * @author Matthew Hawthorne\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author Gary Gregory\n * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n * @author Maarten Coene\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_35/src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "span_end": 3295,
        "name": "ArrayUtils",
        "start_line": 49,
        "span_start": 3295,
        "bug_name": "Lang_35",
        "type": "class",
        "end_line": 4485
      },
      {
        "javadoc": "/**\n * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and\n * primitive wrapper arrays (like <code>Integer[]</code>).</p>\n *\n * <p>This class tries to handle <code>null</code> input gracefully.\n * An exception will not be thrown for a <code>null</code>\n * array input. However, an Object array that contains a <code>null</code>\n * element may throw an exception. Each method documents its behaviour.</p>\n *\n * @author Apache Software Foundation\n * @author Moritz Petersen\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Nikolay Metchev\n * @author Matthew Hawthorne\n * @author Tim O'Brien\n * @author Pete Gieser\n * @author Gary Gregory\n * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n * @author Maarten Coene\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_35/src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "span_end": 3574,
        "name": "ArrayUtils",
        "start_line": 49,
        "span_start": 3574,
        "bug_name": "Lang_35",
        "type": "class",
        "end_line": 4485
      }
    ]
  },
  "Lang_36": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_36/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 491,
        "name": "NumberUtils",
        "start_line": 38,
        "span_start": 491,
        "bug_name": "Lang_36",
        "type": "class",
        "end_line": 1408
      },
      {
        "javadoc": "/**\n * <p>Provides extra functionality for Java Number classes.</p>\n *\n * @author Apache Software Foundation\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n * @author Eric Pugh\n * @author Phil Steitz\n * @author Matthew Hawthorne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_36/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 1387,
        "name": "NumberUtils",
        "start_line": 38,
        "span_start": 1388,
        "bug_name": "Lang_36",
        "type": "class",
        "end_line": 1408
      }
    ]
  },
  "Lang_41": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * <p>Operates on classes without using reflection.</p>\n *\n * <p>This class handles invalid <code>null</code> inputs as best it can.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>The notion of a <code>canonical name</code> includes the human\n * readable name for the type, for example <code>int[]</code>. The\n * non-canonical method variants work with the JVM names, such as\n * <code>[I</code>. </p>\n *\n * @author Stephen Colebourne\n * @author Gary Gregory\n * @author Norm Deane\n * @author Alban Peignier\n * @author Tomasz Blachowicz\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_41/src/java/org/apache/commons/lang/ClassUtils.java",
        "span_end": 194,
        "name": "ClassUtils",
        "start_line": 48,
        "span_start": 191,
        "bug_name": "Lang_41",
        "type": "class",
        "end_line": 1018
      },
      {
        "javadoc": "/**\n * <p>Operates on classes without using reflection.</p>\n *\n * <p>This class handles invalid <code>null</code> inputs as best it can.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>The notion of a <code>canonical name</code> includes the human\n * readable name for the type, for example <code>int[]</code>. The\n * non-canonical method variants work with the JVM names, such as\n * <code>[I</code>. </p>\n *\n * @author Stephen Colebourne\n * @author Gary Gregory\n * @author Norm Deane\n * @author Alban Peignier\n * @author Tomasz Blachowicz\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_41/src/java/org/apache/commons/lang/ClassUtils.java",
        "span_end": 203,
        "name": "ClassUtils",
        "start_line": 48,
        "span_start": 203,
        "bug_name": "Lang_41",
        "type": "class",
        "end_line": 1018
      },
      {
        "javadoc": "/**\n * <p>Operates on classes without using reflection.</p>\n *\n * <p>This class handles invalid <code>null</code> inputs as best it can.\n * Each method documents its behaviour in more detail.</p>\n *\n * <p>The notion of a <code>canonical name</code> includes the human\n * readable name for the type, for example <code>int[]</code>. The\n * non-canonical method variants work with the JVM names, such as\n * <code>[I</code>. </p>\n *\n * @author Stephen Colebourne\n * @author Gary Gregory\n * @author Norm Deane\n * @author Alban Peignier\n * @author Tomasz Blachowicz\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_41/src/java/org/apache/commons/lang/ClassUtils.java",
        "span_end": 250,
        "name": "ClassUtils",
        "start_line": 48,
        "span_start": 245,
        "bug_name": "Lang_41",
        "type": "class",
        "end_line": 1018
      }
    ]
  },
  "Lang_46": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 86,
        "name": "StringEscapeUtils",
        "start_line": 41,
        "span_start": 86,
        "bug_name": "Lang_46",
        "type": "class",
        "end_line": 862
      },
      {
        "javadoc": "/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 102,
        "name": "StringEscapeUtils",
        "start_line": 41,
        "span_start": 102,
        "bug_name": "Lang_46",
        "type": "class",
        "end_line": 862
      },
      {
        "javadoc": "/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 127,
        "name": "StringEscapeUtils",
        "start_line": 41,
        "span_start": 127,
        "bug_name": "Lang_46",
        "type": "class",
        "end_line": 862
      },
      {
        "javadoc": "/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 143,
        "name": "StringEscapeUtils",
        "start_line": 41,
        "span_start": 143,
        "bug_name": "Lang_46",
        "type": "class",
        "end_line": 862
      },
      {
        "javadoc": "/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 160,
        "name": "StringEscapeUtils",
        "start_line": 41,
        "span_start": 154,
        "bug_name": "Lang_46",
        "type": "class",
        "end_line": 862
      },
      {
        "javadoc": "/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 178,
        "name": "StringEscapeUtils",
        "start_line": 41,
        "span_start": 178,
        "bug_name": "Lang_46",
        "type": "class",
        "end_line": 862
      },
      {
        "javadoc": "/**\n * <p>Escapes and unescapes <code>String</code>s for\n * Java, Java Script, HTML, XML, and SQL.</p>\n *\n * @author Apache Jakarta Turbine\n * @author Purple Technology\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author Antony Riley\n * @author Helge Tesgaard\n * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @author Pete Gieser\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 244,
        "name": "StringEscapeUtils",
        "start_line": 41,
        "span_start": 244,
        "bug_name": "Lang_46",
        "type": "class",
        "end_line": 862
      }
    ]
  },
  "Lang_47": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_47/src/java/org/apache/commons/lang/text/StrBuilder.java",
        "span_end": 1185,
        "name": "StrBuilder",
        "start_line": 70,
        "span_start": 1186,
        "bug_name": "Lang_47",
        "type": "class",
        "end_line": 2712
      },
      {
        "javadoc": "/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_47/src/java/org/apache/commons/lang/text/StrBuilder.java",
        "span_end": 1229,
        "name": "StrBuilder",
        "start_line": 70,
        "span_start": 1230,
        "bug_name": "Lang_47",
        "type": "class",
        "end_line": 2712
      }
    ]
  },
  "Lang_50": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Stephen Colebourne\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "span_end": 294,
        "name": "FastDateFormat",
        "start_line": 71,
        "span_start": 285,
        "bug_name": "Lang_50",
        "type": "class",
        "end_line": 1751
      },
      {
        "javadoc": "/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Stephen Colebourne\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "span_end": 473,
        "name": "FastDateFormat",
        "start_line": 71,
        "span_start": 465,
        "bug_name": "Lang_50",
        "type": "class",
        "end_line": 1751
      }
    ]
  },
  "Lang_56": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Stephen Colebourne\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_56/src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "span_end": 144,
        "name": "FastDateFormat",
        "start_line": 72,
        "span_start": 140,
        "bug_name": "Lang_56",
        "type": "class",
        "end_line": 1740
      },
      {
        "javadoc": "/**\n * <p>FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.</p>\n *\n * <p>This class can be used as a direct replacement to\n * <code>SimpleDateFormat</code> in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * <code>SimpleDateFormat</code> is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported, but all patterns are compatible with\n * SimpleDateFormat (except time zones - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, <code>'Z'</code>, to represent\n * time zones in RFC822 format (eg. <code>+0800</code> or <code>-1100</code>).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern <code>'ZZ'</code> has been made to represent\n * ISO8601 full format time zones (eg. <code>+08:00</code> or <code>-11:00</code>).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * @author TeaTrove project\n * @author Brian S O'Neill\n * @author Sean Schofield\n * @author Gary Gregory\n * @author Stephen Colebourne\n * @author Nikolay Metchev\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_56/src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "span_end": 1021,
        "name": "FastDateFormat",
        "start_line": 72,
        "span_start": 1022,
        "bug_name": "Lang_56",
        "type": "class",
        "end_line": 1740
      }
    ]
  },
  "Lang_60": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_60/src/java/org/apache/commons/lang/text/StrBuilder.java",
        "span_end": 1673,
        "name": "StrBuilder",
        "start_line": 70,
        "span_start": 1673,
        "bug_name": "Lang_60",
        "type": "class",
        "end_line": 2364
      },
      {
        "javadoc": "/**\n * Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * </ul>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n *\n * @author Stephen Colebourne\n * @since 2.2\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_60/src/java/org/apache/commons/lang/text/StrBuilder.java",
        "span_end": 1730,
        "name": "StrBuilder",
        "start_line": 70,
        "span_start": 1730,
        "bug_name": "Lang_60",
        "type": "class",
        "end_line": 2364
      }
    ]
  },
  "Lang_62": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Provides HTML and XML entity utilities.</p>\n *\n * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n *\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_62/src/java/org/apache/commons/lang/Entities.java",
        "span_end": 849,
        "name": "Entities",
        "start_line": 39,
        "span_start": 850,
        "bug_name": "Lang_62",
        "type": "class",
        "end_line": 947
      },
      {
        "javadoc": "/**\n * <p>Provides HTML and XML entity utilities.</p>\n *\n * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n *\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_62/src/java/org/apache/commons/lang/Entities.java",
        "span_end": 925,
        "name": "Entities",
        "start_line": 39,
        "span_start": 920,
        "bug_name": "Lang_62",
        "type": "class",
        "end_line": 947
      }
    ]
  },
  "Lang_63": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Duration formatting utilities and constants. The following table describes the tokens\n * used in the pattern language for formatting. </p>\n * <table border=\"1\">\n *  <tr><th>character</th><th>duration element</th></tr>\n *  <tr><td>y</td><td>years</td></tr>\n *  <tr><td>M</td><td>months</td></tr>\n *  <tr><td>d</td><td>days</td></tr>\n *  <tr><td>H</td><td>hours</td></tr>\n *  <tr><td>m</td><td>minutes</td></tr>\n *  <tr><td>s</td><td>seconds</td></tr>\n *  <tr><td>S</td><td>milliseconds</td></tr>\n * </table>\n *\n * @author Apache Ant - DateUtils\n * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Henri Yandell\n * @since 2.1\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "span_end": 324,
        "name": "DurationFormatUtils",
        "start_line": 48,
        "span_start": 306,
        "bug_name": "Lang_63",
        "type": "class",
        "end_line": 635
      },
      {
        "javadoc": "/**\n * <p>Duration formatting utilities and constants. The following table describes the tokens\n * used in the pattern language for formatting. </p>\n * <table border=\"1\">\n *  <tr><th>character</th><th>duration element</th></tr>\n *  <tr><td>y</td><td>years</td></tr>\n *  <tr><td>M</td><td>months</td></tr>\n *  <tr><td>d</td><td>days</td></tr>\n *  <tr><td>H</td><td>hours</td></tr>\n *  <tr><td>m</td><td>minutes</td></tr>\n *  <tr><td>s</td><td>seconds</td></tr>\n *  <tr><td>S</td><td>milliseconds</td></tr>\n * </table>\n *\n * @author Apache Ant - DateUtils\n * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n * @author Stephen Colebourne\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Henri Yandell\n * @since 2.1\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "span_end": 443,
        "name": "DurationFormatUtils",
        "start_line": 48,
        "span_start": 432,
        "bug_name": "Lang_63",
        "type": "class",
        "end_line": 635
      }
    ]
  },
  "Lang_64": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * <p>Abstract superclass for type-safe enums with integer values suitable\n * for use in <code>switch</code> statements.</p>\n *\n * <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing\n * <code>Enum</code> objects should always be done using the equals() method,\n * not <code>==</code>. The equals() method will try <code>==</code> first so\n * in most cases the effect is the same.</p>\n *\n * <p>To use this class, it must be subclassed. For example:</p>\n *\n * <pre>\n * public final class JavaVersionEnum extends ValuedEnum {\n *   //standard enums for version of JVM\n *   public static final int  JAVA1_0_VALUE  = 100;\n *   public static final int  JAVA1_1_VALUE  = 110;\n *   public static final int  JAVA1_2_VALUE  = 120;\n *   public static final int  JAVA1_3_VALUE  = 130;\n *   public static final JavaVersionEnum  JAVA1_0  = new JavaVersionEnum( \"Java 1.0\", JAVA1_0_VALUE );\n *   public static final JavaVersionEnum  JAVA1_1  = new JavaVersionEnum( \"Java 1.1\", JAVA1_1_VALUE );\n *   public static final JavaVersionEnum  JAVA1_2  = new JavaVersionEnum( \"Java 1.2\", JAVA1_2_VALUE );\n *   public static final JavaVersionEnum  JAVA1_3  = new JavaVersionEnum( \"Java 1.3\", JAVA1_3_VALUE );\n *\n *   private JavaVersionEnum(String name, int value) {\n *     super( name, value );\n *   }\n *\n *   public static JavaVersionEnum getEnum(String javaVersion) {\n *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n *   }\n *\n *   public static JavaVersionEnum getEnum(int javaVersion) {\n *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n *   }\n *\n *   public static Map getEnumMap() {\n *     return getEnumMap(JavaVersionEnum.class);\n *   }\n *\n *   public static List getEnumList() {\n *     return getEnumList(JavaVersionEnum.class);\n *   }\n *\n *   public static Iterator iterator() {\n *     return iterator(JavaVersionEnum.class);\n *   }\n * }\n * </pre>\n *\n * <p><em>NOTE:</em>These are declared <code>final</code>, so compilers may\n * inline the code. Ensure you recompile everything when using final. </p>\n *\n * <p>The above class could then be used as follows:</p>\n *\n * <pre>\n * public void doSomething(JavaVersion ver) {\n *   switch (ver.getValue()) {\n *     case JAVA1_0_VALUE:\n *       // ...\n *       break;\n *     case JAVA1_1_VALUE:\n *       // ...\n *       break;\n *     //...\n *   }\n * }\n * </pre>\n *\n * <p>As shown, each enum has a name and a value. These can be accessed using\n * <code>getName</code> and <code>getValue</code>.</p>\n *\n * <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.\n * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n * An alternative choice is to use the {@link EnumUtils} class.</p>\n *\n * @author Apache Avalon project\n * @author Stephen Colebourne\n * @since 2.1 (class existed in enum package from v1.0)\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_64/src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "span_end": 182,
        "name": "ValuedEnum",
        "start_line": 105,
        "span_start": 183,
        "bug_name": "Lang_64",
        "type": "class",
        "end_line": 210
      },
      {
        "javadoc": "/**\n * <p>Abstract superclass for type-safe enums with integer values suitable\n * for use in <code>switch</code> statements.</p>\n *\n * <p><em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing\n * <code>Enum</code> objects should always be done using the equals() method,\n * not <code>==</code>. The equals() method will try <code>==</code> first so\n * in most cases the effect is the same.</p>\n *\n * <p>To use this class, it must be subclassed. For example:</p>\n *\n * <pre>\n * public final class JavaVersionEnum extends ValuedEnum {\n *   //standard enums for version of JVM\n *   public static final int  JAVA1_0_VALUE  = 100;\n *   public static final int  JAVA1_1_VALUE  = 110;\n *   public static final int  JAVA1_2_VALUE  = 120;\n *   public static final int  JAVA1_3_VALUE  = 130;\n *   public static final JavaVersionEnum  JAVA1_0  = new JavaVersionEnum( \"Java 1.0\", JAVA1_0_VALUE );\n *   public static final JavaVersionEnum  JAVA1_1  = new JavaVersionEnum( \"Java 1.1\", JAVA1_1_VALUE );\n *   public static final JavaVersionEnum  JAVA1_2  = new JavaVersionEnum( \"Java 1.2\", JAVA1_2_VALUE );\n *   public static final JavaVersionEnum  JAVA1_3  = new JavaVersionEnum( \"Java 1.3\", JAVA1_3_VALUE );\n *\n *   private JavaVersionEnum(String name, int value) {\n *     super( name, value );\n *   }\n *\n *   public static JavaVersionEnum getEnum(String javaVersion) {\n *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n *   }\n *\n *   public static JavaVersionEnum getEnum(int javaVersion) {\n *     return (JavaVersionEnum) getEnum(JavaVersionEnum.class, javaVersion);\n *   }\n *\n *   public static Map getEnumMap() {\n *     return getEnumMap(JavaVersionEnum.class);\n *   }\n *\n *   public static List getEnumList() {\n *     return getEnumList(JavaVersionEnum.class);\n *   }\n *\n *   public static Iterator iterator() {\n *     return iterator(JavaVersionEnum.class);\n *   }\n * }\n * </pre>\n *\n * <p><em>NOTE:</em>These are declared <code>final</code>, so compilers may\n * inline the code. Ensure you recompile everything when using final. </p>\n *\n * <p>The above class could then be used as follows:</p>\n *\n * <pre>\n * public void doSomething(JavaVersion ver) {\n *   switch (ver.getValue()) {\n *     case JAVA1_0_VALUE:\n *       // ...\n *       break;\n *     case JAVA1_1_VALUE:\n *       // ...\n *       break;\n *     //...\n *   }\n * }\n * </pre>\n *\n * <p>As shown, each enum has a name and a value. These can be accessed using\n * <code>getName</code> and <code>getValue</code>.</p>\n *\n * <p>The <code>getEnum</code> and <code>iterator</code> methods are recommended.\n * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n * An alternative choice is to use the {@link EnumUtils} class.</p>\n *\n * @author Apache Avalon project\n * @author Stephen Colebourne\n * @since 2.1 (class existed in enum package from v1.0)\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_64/src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "span_end": 194,
        "name": "ValuedEnum",
        "start_line": 105,
        "span_start": 192,
        "bug_name": "Lang_64",
        "type": "class",
        "end_line": 210
      }
    ]
  },
  "Lang_65": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * <p>A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n *\n * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n * @author Stephen Colebourne\n * @author Janek Bogucki\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_65/src/java/org/apache/commons/lang/time/DateUtils.java",
        "span_end": 623,
        "name": "DateUtils",
        "start_line": 39,
        "span_start": 624,
        "bug_name": "Lang_65",
        "type": "class",
        "end_line": 959
      },
      {
        "javadoc": "/**\n * <p>A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n *\n * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n * @author Stephen Colebourne\n * @author Janek Bogucki\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_65/src/java/org/apache/commons/lang/time/DateUtils.java",
        "span_end": 638,
        "name": "DateUtils",
        "start_line": 39,
        "span_start": 631,
        "bug_name": "Lang_65",
        "type": "class",
        "end_line": 959
      },
      {
        "javadoc": "/**\n * <p>A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n *\n * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n * @author Stephen Colebourne\n * @author Janek Bogucki\n * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n * @author Phil Steitz\n * @since 2.0\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Lang_65/src/java/org/apache/commons/lang/time/DateUtils.java",
        "span_end": 709,
        "name": "DateUtils",
        "start_line": 39,
        "span_start": 709,
        "bug_name": "Lang_65",
        "type": "class",
        "end_line": 959
      }
    ]
  },
  "Math_1": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Representation of a rational number without any overflow. This class is\n * immutable.\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
        "span_end": 305,
        "name": "BigFraction",
        "start_line": 40,
        "span_start": 306,
        "bug_name": "Math_1",
        "type": "class",
        "end_line": 1144
      },
      {
        "javadoc": "/**\n * Representation of a rational number.\n *\n * implements Serializable since 2.0\n *\n * @since 1.1\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_1/src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "span_end": 214,
        "name": "Fraction",
        "start_line": 37,
        "span_start": 215,
        "bug_name": "Math_1",
        "type": "class",
        "end_line": 671
      }
    ]
  },
  "Math_4": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * This class represents a subset of a {@link Line}.\n * @version $Id$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_4/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
        "span_end": 113,
        "name": "SubLine",
        "start_line": 32,
        "span_start": 114,
        "bug_name": "Math_4",
        "type": "class",
        "end_line": 142
      },
      {
        "javadoc": "/**\n * This class represents a sub-hyperplane for {@link Line}.\n * @version $Id$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java",
        "span_end": 117,
        "name": "SubLine",
        "start_line": 40,
        "span_start": 118,
        "bug_name": "Math_4",
        "type": "class",
        "end_line": 209
      }
    ]
  },
  "Math_6": {
    "bug_count": 12,
    "entries": [
      {
        "javadoc": "/**\n * Base class for implementing optimizers.\n * It contains the boiler-plate code for counting the number of evaluations\n * of the objective function and the number of iterations of the algorithm,\n * and storing the convergence checker.\n * <em>It is not a \"user\" class.</em>\n *\n * @param <PAIR> Type of the point/value pair returned by the optimization\n * algorithm.\n *\n * @version $Id$\n * @since 3.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java",
        "span_end": 51,
        "name": "BaseOptimizer",
        "start_line": 36,
        "span_start": 51,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 231
      },
      {
        "javadoc": "/**\n * This class solves a least-squares problem using the Levenberg-Marquardt\n * algorithm.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
        "span_end": 489,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 113,
        "span_start": 489,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 958
      },
      {
        "javadoc": "/**\n * Non-linear conjugate gradient optimizer.\n * <br/>\n * This class supports both the Fletcher-Reeves and the Polak-Ribi\u00e8re\n * update formulas for the conjugate search directions.\n * It also supports optional preconditioning.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java",
        "span_end": 223,
        "name": "NonLinearConjugateGradientOptimizer",
        "start_line": 49,
        "span_start": 214,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 407
      },
      {
        "javadoc": "/**\n * Non-linear conjugate gradient optimizer.\n * <br/>\n * This class supports both the Fletcher-Reeves and the Polak-Ribi\u00e8re\n * update formulas for the conjugate search directions.\n * It also supports optional preconditioning.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java",
        "span_end": 277,
        "name": "NonLinearConjugateGradientOptimizer",
        "start_line": 49,
        "span_start": 277,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 407
      },
      {
        "javadoc": "/**\n * <p>An implementation of the active Covariance Matrix Adaptation Evolution Strategy (CMA-ES)\n * for non-linear, non-convex, non-smooth, global function minimization.\n * The CMA-Evolution Strategy (CMA-ES) is a reliable stochastic optimization method\n * which should be applied if derivative-based methods, e.g. quasi-Newton BFGS or\n * conjugate gradient, fail due to a rugged search landscape (e.g. noise, local\n * optima, outlier, etc.) of the objective function. Like a\n * quasi-Newton method, the CMA-ES learns and applies a variable metric\n * on the underlying search space. Unlike a quasi-Newton method, the\n * CMA-ES neither estimates nor uses gradients, making it considerably more\n * reliable in terms of finding a good, or even close to optimal, solution.</p>\n *\n * <p>In general, on smooth objective functions the CMA-ES is roughly ten times\n * slower than BFGS (counting objective function evaluations, no gradients provided).\n * For up to <math>N=10</math> variables also the derivative-free simplex\n * direct search method (Nelder and Mead) can be faster, but it is\n * far less reliable than CMA-ES.</p>\n *\n * <p>The CMA-ES is particularly well suited for non-separable\n * and/or badly conditioned problems. To observe the advantage of CMA compared\n * to a conventional evolution strategy, it will usually take about\n * <math>30 N</math> function evaluations. On difficult problems the complete\n * optimization (a single run) is expected to take <em>roughly</em> between\n * <math>30 N</math> and <math>300 N<sup>2</sup></math>\n * function evaluations.</p>\n *\n * <p>This implementation is translated and adapted from the Matlab version\n * of the CMA-ES algorithm as implemented in module {@code cmaes.m} version 3.51.</p>\n *\n * For more information, please refer to the following links:\n * <ul>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaes.m\">Matlab code</a></li>\n *  <li><a href=\"http://www.lri.fr/~hansen/cmaesintro.html\">Introduction to CMA-ES</a></li>\n *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n * </ul>\n *\n * @version $Id$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java",
        "span_end": 387,
        "name": "CMAESOptimizer",
        "start_line": 79,
        "span_start": 388,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 1317
      },
      {
        "javadoc": "/**\n * Powell's algorithm.\n * This code is translated and adapted from the Python version of this\n * algorithm (as implemented in module {@code optimize.py} v0.5 of\n * <em>SciPy</em>).\n * <br/>\n * The default stopping criterion is based on the differences of the\n * function value between two successive iterations. It is however possible\n * to define a custom convergence checker that might terminate the algorithm\n * earlier.\n * <br/>\n * The internal line search optimizer is a {@link BrentOptimizer} with a\n * convergence checker set to {@link SimpleUnivariateValueChecker}.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n * In order to impose simple constraints, the objective function must be\n * wrapped in an adapter like\n * {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter\n * MultivariateFunctionMappingAdapter} or\n * {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter\n * MultivariateFunctionPenaltyAdapter}.\n *\n * @version $Id$\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java",
        "span_end": 193,
        "name": "PowellOptimizer",
        "start_line": 65,
        "span_start": 191,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 381
      },
      {
        "javadoc": "/**\n * Powell's algorithm.\n * This code is translated and adapted from the Python version of this\n * algorithm (as implemented in module {@code optimize.py} v0.5 of\n * <em>SciPy</em>).\n * <br/>\n * The default stopping criterion is based on the differences of the\n * function value between two successive iterations. It is however possible\n * to define a custom convergence checker that might terminate the algorithm\n * earlier.\n * <br/>\n * The internal line search optimizer is a {@link BrentOptimizer} with a\n * convergence checker set to {@link SimpleUnivariateValueChecker}.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n * In order to impose simple constraints, the objective function must be\n * wrapped in an adapter like\n * {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter\n * MultivariateFunctionMappingAdapter} or\n * {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter\n * MultivariateFunctionPenaltyAdapter}.\n *\n * @version $Id$\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java",
        "span_end": 227,
        "name": "PowellOptimizer",
        "start_line": 65,
        "span_start": 227,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 381
      },
      {
        "javadoc": "/**\n * This class implements simplex-based direct search optimization.\n *\n * <p>\n *  Direct search methods only use objective function values, they do\n *  not need derivatives and don't either try to compute approximation\n *  of the derivatives. According to a 1996 paper by Margaret H. Wright\n *  (<a href=\"http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz\">Direct\n *  Search Methods: Once Scorned, Now Respectable</a>), they are used\n *  when either the computation of the derivative is impossible (noisy\n *  functions, unpredictable discontinuities) or difficult (complexity,\n *  computation cost). In the first cases, rather than an optimum, a\n *  <em>not too bad</em> point is desired. In the latter cases, an\n *  optimum is desired but cannot be reasonably found. In all cases\n *  direct search methods can be useful.\n * </p>\n * <p>\n *  Simplex-based direct search methods are based on comparison of\n *  the objective function values at the vertices of a simplex (which is a\n *  set of n+1 points in dimension n) that is updated by the algorithms\n *  steps.\n * <p>\n * <p>\n *  The simplex update procedure ({@link NelderMeadSimplex} or\n * {@link MultiDirectionalSimplex})  must be passed to the\n * {@code optimize} method.\n * </p>\n * <p>\n *  Each call to {@code optimize} will re-use the start configuration of\n *  the current simplex and move it such that its first vertex is at the\n *  provided start point of the optimization.\n *  If the {@code optimize} method is called to solve a different problem\n *  and the number of parameters change, the simplex must be re-initialized\n *  to one with the appropriate dimensions.\n * </p>\n * <p>\n *  Convergence is checked by providing the <em>worst</em> points of\n *  previous and current simplex to the convergence checker, not the best\n *  ones.\n * </p>\n * <p>\n *  This simplex optimizer implementation does not directly support constrained\n *  optimization with simple bounds; so, for such optimizations, either a more\n *  dedicated algorithm must be used like\n *  {@link CMAESOptimizer} or {@link BOBYQAOptimizer}, or the objective\n *  function must be wrapped in an adapter like\n *  {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter\n *  MultivariateFunctionMappingAdapter} or\n *  {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter\n *  MultivariateFunctionPenaltyAdapter}.\n *  <br/>\n *  The call to {@link #optimize(OptimizationData[]) optimize} will throw\n *  {@link MathUnsupportedOperationException} if bounds are passed to it.\n * </p>\n *\n * @version $Id$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java",
        "span_end": 158,
        "name": "SimplexOptimizer",
        "start_line": 89,
        "span_start": 158,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 221
      },
      {
        "javadoc": "/**\n * This class implements simplex-based direct search optimization.\n *\n * <p>\n *  Direct search methods only use objective function values, they do\n *  not need derivatives and don't either try to compute approximation\n *  of the derivatives. According to a 1996 paper by Margaret H. Wright\n *  (<a href=\"http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz\">Direct\n *  Search Methods: Once Scorned, Now Respectable</a>), they are used\n *  when either the computation of the derivative is impossible (noisy\n *  functions, unpredictable discontinuities) or difficult (complexity,\n *  computation cost). In the first cases, rather than an optimum, a\n *  <em>not too bad</em> point is desired. In the latter cases, an\n *  optimum is desired but cannot be reasonably found. In all cases\n *  direct search methods can be useful.\n * </p>\n * <p>\n *  Simplex-based direct search methods are based on comparison of\n *  the objective function values at the vertices of a simplex (which is a\n *  set of n+1 points in dimension n) that is updated by the algorithms\n *  steps.\n * <p>\n * <p>\n *  The simplex update procedure ({@link NelderMeadSimplex} or\n * {@link MultiDirectionalSimplex})  must be passed to the\n * {@code optimize} method.\n * </p>\n * <p>\n *  Each call to {@code optimize} will re-use the start configuration of\n *  the current simplex and move it such that its first vertex is at the\n *  provided start point of the optimization.\n *  If the {@code optimize} method is called to solve a different problem\n *  and the number of parameters change, the simplex must be re-initialized\n *  to one with the appropriate dimensions.\n * </p>\n * <p>\n *  Convergence is checked by providing the <em>worst</em> points of\n *  previous and current simplex to the convergence checker, not the best\n *  ones.\n * </p>\n * <p>\n *  This simplex optimizer implementation does not directly support constrained\n *  optimization with simple bounds; so, for such optimizations, either a more\n *  dedicated algorithm must be used like\n *  {@link CMAESOptimizer} or {@link BOBYQAOptimizer}, or the objective\n *  function must be wrapped in an adapter like\n *  {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter\n *  MultivariateFunctionMappingAdapter} or\n *  {@link org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapter\n *  MultivariateFunctionPenaltyAdapter}.\n *  <br/>\n *  The call to {@link #optimize(OptimizationData[]) optimize} will throw\n *  {@link MathUnsupportedOperationException} if bounds are passed to it.\n * </p>\n *\n * @version $Id$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java",
        "span_end": 175,
        "name": "SimplexOptimizer",
        "start_line": 89,
        "span_start": 175,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 221
      },
      {
        "javadoc": "/**\n * Gauss-Newton least-squares solver.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * <p>\n * This class solve a least-square problem by solving the normal equations\n * of the linearized problem at each iteration. Either LU decomposition or\n * QR decomposition can be used to solve the normal equations. LU decomposition\n * is faster but QR decomposition is more robust for difficult problems.\n * </p>\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java",
        "span_end": 108,
        "name": "GaussNewtonOptimizer",
        "start_line": 52,
        "span_start": 106,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 181
      },
      {
        "javadoc": "/**\n * Gauss-Newton least-squares solver.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * <p>\n * This class solve a least-square problem by solving the normal equations\n * of the linearized problem at each iteration. Either LU decomposition or\n * QR decomposition can be used to solve the normal equations. LU decomposition\n * is faster but QR decomposition is more robust for difficult problems.\n * </p>\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java",
        "span_end": 160,
        "name": "GaussNewtonOptimizer",
        "start_line": 52,
        "span_start": 160,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 181
      },
      {
        "javadoc": "/**\n * This class solves a least-squares problem using the Levenberg-Marquardt\n * algorithm.\n * <br/>\n * Constraints are not supported: the call to\n * {@link #optimize(OptimizationData[]) optimize} will throw\n * {@link MathUnsupportedOperationException} if bounds are passed to it.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
        "span_end": 325,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 113,
        "span_start": 322,
        "bug_name": "Math_6",
        "type": "class",
        "end_line": 958
      }
    ]
  },
  "Math_7": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Base class managing common boilerplate for all integrators.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
        "span_end": 347,
        "name": "AbstractIntegrator",
        "start_line": 49,
        "span_start": 346,
        "bug_name": "Math_7",
        "type": "class",
        "end_line": 427
      },
      {
        "javadoc": "/**\n * Base class managing common boilerplate for all integrators.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
        "span_end": 372,
        "name": "AbstractIntegrator",
        "start_line": 49,
        "span_start": 357,
        "bug_name": "Math_7",
        "type": "class",
        "end_line": 427
      }
    ]
  },
  "Math_12": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Base class for random number generators that generates bits streams.\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "span_end": 30,
        "name": "BitsStreamGenerator",
        "start_line": 28,
        "span_start": 29,
        "bug_name": "Math_12",
        "type": "class",
        "end_line": 170
      }
    ]
  },
  "Math_14": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Base class for implementing least-squares optimizers.\n * It provides methods for error estimation.\n *\n * @version $Id$\n * @since 3.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java",
        "span_end": 267,
        "name": "AbstractLeastSquaresOptimizer",
        "start_line": 42,
        "span_start": 267,
        "bug_name": "Math_14",
        "type": "class",
        "end_line": 270
      },
      {
        "javadoc": "/**\n * Weight matrix of the residuals between model and observations.\n * <br/>\n * Immutable class.\n *\n * @version $Id: Weight.java 1416643 2012-12-03 19:37:14Z tn $\n * @since 3.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java",
        "span_end": 46,
        "name": "Weight",
        "start_line": 32,
        "span_start": 43,
        "bug_name": "Math_14",
        "type": "class",
        "end_line": 71
      }
    ]
  },
  "Math_15": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Faster, more accurate, portable alternative to {@link Math} and\n * {@link StrictMath} for large scale computation.\n * <p>\n * FastMath is a drop-in replacement for both Math and StrictMath. This\n * means that for any method in Math (say {@code Math.sin(x)} or\n * {@code Math.cbrt(y)}), user can directly change the class and use the\n * methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}\n * in the previous example).\n * </p>\n * <p>\n * FastMath speed is achieved by relying heavily on optimizing compilers\n * to native code present in many JVMs today and use of large tables.\n * The larger tables are lazily initialised on first use, so that the setup\n * time does not penalise methods that don't need them.\n * </p>\n * <p>\n * Note that FastMath is\n * extensively used inside Apache Commons Math, so by calling some algorithms,\n * the overhead when the the tables need to be intialised will occur\n * regardless of the end-user calling FastMath methods directly or not.\n * Performance figures for a specific JVM and hardware can be evaluated by\n * running the FastMathTestPerformance tests in the test directory of the source\n * distribution.\n * </p>\n * <p>\n * FastMath accuracy should be mostly independent of the JVM as it relies only\n * on IEEE-754 basic operations and on embedded tables. Almost all operations\n * are accurate to about 0.5 ulp throughout the domain range. This statement,\n * of course is only a rough global observed behavior, it is <em>not</em> a\n * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n * Maker's Dilemma</a>).\n * </p>\n * <p>\n * FastMath additionally implements the following methods not found in Math/StrictMath:\n * <ul>\n * <li>{@link #asinh(double)}</li>\n * <li>{@link #acosh(double)}</li>\n * <li>{@link #atanh(double)}</li>\n * </ul>\n * The following methods are found in Math/StrictMath since 1.6 only, they are provided\n * by FastMath even in 1.5 Java virtual machines\n * <ul>\n * <li>{@link #copySign(double, double)}</li>\n * <li>{@link #getExponent(double)}</li>\n * <li>{@link #nextAfter(double,double)}</li>\n * <li>{@link #nextUp(double)}</li>\n * <li>{@link #scalb(double, int)}</li>\n * <li>{@link #copySign(float, float)}</li>\n * <li>{@link #getExponent(float)}</li>\n * <li>{@link #nextAfter(float,double)}</li>\n * <li>{@link #nextUp(float)}</li>\n * <li>{@link #scalb(float, int)}</li>\n * </ul>\n * </p>\n * @version $Id$\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_15/src/main/java/org/apache/commons/math3/util/FastMath.java",
        "span_end": 312,
        "name": "FastMath",
        "start_line": 80,
        "span_start": 313,
        "bug_name": "Math_15",
        "type": "class",
        "end_line": 3865
      },
      {
        "javadoc": "/**\n * Faster, more accurate, portable alternative to {@link Math} and\n * {@link StrictMath} for large scale computation.\n * <p>\n * FastMath is a drop-in replacement for both Math and StrictMath. This\n * means that for any method in Math (say {@code Math.sin(x)} or\n * {@code Math.cbrt(y)}), user can directly change the class and use the\n * methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}\n * in the previous example).\n * </p>\n * <p>\n * FastMath speed is achieved by relying heavily on optimizing compilers\n * to native code present in many JVMs today and use of large tables.\n * The larger tables are lazily initialised on first use, so that the setup\n * time does not penalise methods that don't need them.\n * </p>\n * <p>\n * Note that FastMath is\n * extensively used inside Apache Commons Math, so by calling some algorithms,\n * the overhead when the the tables need to be intialised will occur\n * regardless of the end-user calling FastMath methods directly or not.\n * Performance figures for a specific JVM and hardware can be evaluated by\n * running the FastMathTestPerformance tests in the test directory of the source\n * distribution.\n * </p>\n * <p>\n * FastMath accuracy should be mostly independent of the JVM as it relies only\n * on IEEE-754 basic operations and on embedded tables. Almost all operations\n * are accurate to about 0.5 ulp throughout the domain range. This statement,\n * of course is only a rough global observed behavior, it is <em>not</em> a\n * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n * Maker's Dilemma</a>).\n * </p>\n * <p>\n * FastMath additionally implements the following methods not found in Math/StrictMath:\n * <ul>\n * <li>{@link #asinh(double)}</li>\n * <li>{@link #acosh(double)}</li>\n * <li>{@link #atanh(double)}</li>\n * </ul>\n * The following methods are found in Math/StrictMath since 1.6 only, they are provided\n * by FastMath even in 1.5 Java virtual machines\n * <ul>\n * <li>{@link #copySign(double, double)}</li>\n * <li>{@link #getExponent(double)}</li>\n * <li>{@link #nextAfter(double,double)}</li>\n * <li>{@link #nextUp(double)}</li>\n * <li>{@link #scalb(double, int)}</li>\n * <li>{@link #copySign(float, float)}</li>\n * <li>{@link #getExponent(float)}</li>\n * <li>{@link #nextAfter(float,double)}</li>\n * <li>{@link #nextUp(float)}</li>\n * <li>{@link #scalb(float, int)}</li>\n * </ul>\n * </p>\n * @version $Id$\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_15/src/main/java/org/apache/commons/math3/util/FastMath.java",
        "span_end": 1541,
        "name": "FastMath",
        "start_line": 80,
        "span_start": 1541,
        "bug_name": "Math_15",
        "type": "class",
        "end_line": 3865
      }
    ]
  },
  "Math_16": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Faster, more accurate, portable alternative to {@link Math} and\n * {@link StrictMath} for large scale computation.\n * <p>\n * FastMath is a drop-in replacement for both Math and StrictMath. This\n * means that for any method in Math (say {@code Math.sin(x)} or\n * {@code Math.cbrt(y)}), user can directly change the class and use the\n * methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}\n * in the previous example).\n * </p>\n * <p>\n * FastMath speed is achieved by relying heavily on optimizing compilers\n * to native code present in many JVMs today and use of large tables.\n * The larger tables are lazily initialised on first use, so that the setup\n * time does not penalise methods that don't need them.\n * </p>\n * <p>\n * Note that FastMath is\n * extensively used inside Apache Commons Math, so by calling some algorithms,\n * the overhead when the the tables need to be intialised will occur\n * regardless of the end-user calling FastMath methods directly or not.\n * Performance figures for a specific JVM and hardware can be evaluated by\n * running the FastMathTestPerformance tests in the test directory of the source\n * distribution.\n * </p>\n * <p>\n * FastMath accuracy should be mostly independent of the JVM as it relies only\n * on IEEE-754 basic operations and on embedded tables. Almost all operations\n * are accurate to about 0.5 ulp throughout the domain range. This statement,\n * of course is only a rough global observed behavior, it is <em>not</em> a\n * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n * Maker's Dilemma</a>).\n * </p>\n * <p>\n * FastMath additionally implements the following methods not found in Math/StrictMath:\n * <ul>\n * <li>{@link #asinh(double)}</li>\n * <li>{@link #acosh(double)}</li>\n * <li>{@link #atanh(double)}</li>\n * </ul>\n * The following methods are found in Math/StrictMath since 1.6 only, they are provided\n * by FastMath even in 1.5 Java virtual machines\n * <ul>\n * <li>{@link #copySign(double, double)}</li>\n * <li>{@link #getExponent(double)}</li>\n * <li>{@link #nextAfter(double,double)}</li>\n * <li>{@link #nextUp(double)}</li>\n * <li>{@link #scalb(double, int)}</li>\n * <li>{@link #copySign(float, float)}</li>\n * <li>{@link #getExponent(float)}</li>\n * <li>{@link #nextAfter(float,double)}</li>\n * <li>{@link #nextUp(float)}</li>\n * <li>{@link #scalb(float, int)}</li>\n * </ul>\n * </p>\n * @version $Id$\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_16/src/main/java/org/apache/commons/math3/util/FastMath.java",
        "span_end": 81,
        "name": "FastMath",
        "start_line": 80,
        "span_start": 82,
        "bug_name": "Math_16",
        "type": "class",
        "end_line": 3845
      },
      {
        "javadoc": "/**\n * Faster, more accurate, portable alternative to {@link Math} and\n * {@link StrictMath} for large scale computation.\n * <p>\n * FastMath is a drop-in replacement for both Math and StrictMath. This\n * means that for any method in Math (say {@code Math.sin(x)} or\n * {@code Math.cbrt(y)}), user can directly change the class and use the\n * methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}\n * in the previous example).\n * </p>\n * <p>\n * FastMath speed is achieved by relying heavily on optimizing compilers\n * to native code present in many JVMs today and use of large tables.\n * The larger tables are lazily initialised on first use, so that the setup\n * time does not penalise methods that don't need them.\n * </p>\n * <p>\n * Note that FastMath is\n * extensively used inside Apache Commons Math, so by calling some algorithms,\n * the overhead when the the tables need to be intialised will occur\n * regardless of the end-user calling FastMath methods directly or not.\n * Performance figures for a specific JVM and hardware can be evaluated by\n * running the FastMathTestPerformance tests in the test directory of the source\n * distribution.\n * </p>\n * <p>\n * FastMath accuracy should be mostly independent of the JVM as it relies only\n * on IEEE-754 basic operations and on embedded tables. Almost all operations\n * are accurate to about 0.5 ulp throughout the domain range. This statement,\n * of course is only a rough global observed behavior, it is <em>not</em> a\n * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n * Maker's Dilemma</a>).\n * </p>\n * <p>\n * FastMath additionally implements the following methods not found in Math/StrictMath:\n * <ul>\n * <li>{@link #asinh(double)}</li>\n * <li>{@link #acosh(double)}</li>\n * <li>{@link #atanh(double)}</li>\n * </ul>\n * The following methods are found in Math/StrictMath since 1.6 only, they are provided\n * by FastMath even in 1.5 Java virtual machines\n * <ul>\n * <li>{@link #copySign(double, double)}</li>\n * <li>{@link #getExponent(double)}</li>\n * <li>{@link #nextAfter(double,double)}</li>\n * <li>{@link #nextUp(double)}</li>\n * <li>{@link #scalb(double, int)}</li>\n * <li>{@link #copySign(float, float)}</li>\n * <li>{@link #getExponent(float)}</li>\n * <li>{@link #nextAfter(float,double)}</li>\n * <li>{@link #nextUp(float)}</li>\n * <li>{@link #scalb(float, int)}</li>\n * </ul>\n * </p>\n * @version $Id$\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_16/src/main/java/org/apache/commons/math3/util/FastMath.java",
        "span_end": 399,
        "name": "FastMath",
        "start_line": 80,
        "span_start": 394,
        "bug_name": "Math_16",
        "type": "class",
        "end_line": 3845
      },
      {
        "javadoc": "/**\n * Faster, more accurate, portable alternative to {@link Math} and\n * {@link StrictMath} for large scale computation.\n * <p>\n * FastMath is a drop-in replacement for both Math and StrictMath. This\n * means that for any method in Math (say {@code Math.sin(x)} or\n * {@code Math.cbrt(y)}), user can directly change the class and use the\n * methods as is (using {@code FastMath.sin(x)} or {@code FastMath.cbrt(y)}\n * in the previous example).\n * </p>\n * <p>\n * FastMath speed is achieved by relying heavily on optimizing compilers\n * to native code present in many JVMs today and use of large tables.\n * The larger tables are lazily initialised on first use, so that the setup\n * time does not penalise methods that don't need them.\n * </p>\n * <p>\n * Note that FastMath is\n * extensively used inside Apache Commons Math, so by calling some algorithms,\n * the overhead when the the tables need to be intialised will occur\n * regardless of the end-user calling FastMath methods directly or not.\n * Performance figures for a specific JVM and hardware can be evaluated by\n * running the FastMathTestPerformance tests in the test directory of the source\n * distribution.\n * </p>\n * <p>\n * FastMath accuracy should be mostly independent of the JVM as it relies only\n * on IEEE-754 basic operations and on embedded tables. Almost all operations\n * are accurate to about 0.5 ulp throughout the domain range. This statement,\n * of course is only a rough global observed behavior, it is <em>not</em> a\n * guarantee for <em>every</em> double numbers input (see William Kahan's <a\n * href=\"http://en.wikipedia.org/wiki/Rounding#The_table-maker.27s_dilemma\">Table\n * Maker's Dilemma</a>).\n * </p>\n * <p>\n * FastMath additionally implements the following methods not found in Math/StrictMath:\n * <ul>\n * <li>{@link #asinh(double)}</li>\n * <li>{@link #acosh(double)}</li>\n * <li>{@link #atanh(double)}</li>\n * </ul>\n * The following methods are found in Math/StrictMath since 1.6 only, they are provided\n * by FastMath even in 1.5 Java virtual machines\n * <ul>\n * <li>{@link #copySign(double, double)}</li>\n * <li>{@link #getExponent(double)}</li>\n * <li>{@link #nextAfter(double,double)}</li>\n * <li>{@link #nextUp(double)}</li>\n * <li>{@link #scalb(double, int)}</li>\n * <li>{@link #copySign(float, float)}</li>\n * <li>{@link #getExponent(float)}</li>\n * <li>{@link #nextAfter(float,double)}</li>\n * <li>{@link #nextUp(float)}</li>\n * <li>{@link #scalb(float, int)}</li>\n * </ul>\n * </p>\n * @version $Id$\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_16/src/main/java/org/apache/commons/math3/util/FastMath.java",
        "span_end": 460,
        "name": "FastMath",
        "start_line": 80,
        "span_start": 455,
        "bug_name": "Math_16",
        "type": "class",
        "end_line": 3845
      }
    ]
  },
  "Math_18": {
    "bug_count": 6,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Math_18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "span_end": 932,
        "name": "CMAESOptimizer",
        "start_line": 91,
        "span_start": 932,
        "bug_name": "Math_18",
        "type": "class",
        "end_line": 1383
      },
      {
        "javadoc": "/**\n * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n * fitness value if out of range. The penalty is adjusted by calling\n * setValueRange().\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "span_end": 932,
        "name": "FitnessFunction",
        "start_line": 905,
        "span_start": 932,
        "bug_name": "Math_18",
        "type": "class",
        "end_line": 1040
      },
      {
        "file": "/Users/danielding/WORK_DIR/Math_18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "span_end": 958,
        "name": "CMAESOptimizer",
        "start_line": 91,
        "span_start": 958,
        "bug_name": "Math_18",
        "type": "class",
        "end_line": 1383
      },
      {
        "javadoc": "/**\n * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n * fitness value if out of range. The penalty is adjusted by calling\n * setValueRange().\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "span_end": 958,
        "name": "FitnessFunction",
        "start_line": 905,
        "span_start": 958,
        "bug_name": "Math_18",
        "type": "class",
        "end_line": 1040
      },
      {
        "file": "/Users/danielding/WORK_DIR/Math_18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "span_end": 995,
        "name": "CMAESOptimizer",
        "start_line": 91,
        "span_start": 990,
        "bug_name": "Math_18",
        "type": "class",
        "end_line": 1383
      },
      {
        "javadoc": "/**\n * Normalizes fitness values to the range [0,1]. Adds a penalty to the\n * fitness value if out of range. The penalty is adjusted by calling\n * setValueRange().\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "span_end": 995,
        "name": "FitnessFunction",
        "start_line": 905,
        "span_start": 990,
        "bug_name": "Math_18",
        "type": "class",
        "end_line": 1040
      }
    ]
  },
  "Math_21": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Calculates the rectangular Cholesky decomposition of a matrix.\n * <p>The rectangular Cholesky decomposition of a real symmetric positive\n * semidefinite matrix A consists of a rectangular matrix B with the same\n * number of rows such that: A is almost equal to BB<sup>T</sup>, depending\n * on a user-defined tolerance. In a sense, this is the square root of A.</p>\n * <p>The difference with respect to the regular {@link CholeskyDecomposition}\n * is that rows/columns may be permuted (hence the rectangular shape instead\n * of the traditional triangular shape) and there is a threshold to ignore\n * small diagonal elements. This is used for example to generate {@link\n * org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated\n * random n-dimensions vectors} in a p-dimension subspace (p < n).\n * In other words, it allows generating random vectors from a covariance\n * matrix that is only positive semidefinite, and not positive definite.</p>\n * <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving\n * linear systems, so it does not provide any {@link DecompositionSolver\n * decomposition solver}.</p>\n *\n * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n * @version $Id$\n * @since 2.0 (changed to concrete class in 3.0)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
        "span_end": 69,
        "name": "RectangularCholeskyDecomposition",
        "start_line": 45,
        "span_start": 69,
        "bug_name": "Math_21",
        "type": "class",
        "end_line": 174
      },
      {
        "javadoc": "/**\n * Calculates the rectangular Cholesky decomposition of a matrix.\n * <p>The rectangular Cholesky decomposition of a real symmetric positive\n * semidefinite matrix A consists of a rectangular matrix B with the same\n * number of rows such that: A is almost equal to BB<sup>T</sup>, depending\n * on a user-defined tolerance. In a sense, this is the square root of A.</p>\n * <p>The difference with respect to the regular {@link CholeskyDecomposition}\n * is that rows/columns may be permuted (hence the rectangular shape instead\n * of the traditional triangular shape) and there is a threshold to ignore\n * small diagonal elements. This is used for example to generate {@link\n * org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated\n * random n-dimensions vectors} in a p-dimension subspace (p < n).\n * In other words, it allows generating random vectors from a covariance\n * matrix that is only positive semidefinite, and not positive definite.</p>\n * <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving\n * linear systems, so it does not provide any {@link DecompositionSolver\n * decomposition solver}.</p>\n *\n * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n * @version $Id$\n * @since 2.0 (changed to concrete class in 3.0)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
        "span_end": 93,
        "name": "RectangularCholeskyDecomposition",
        "start_line": 45,
        "span_start": 79,
        "bug_name": "Math_21",
        "type": "class",
        "end_line": 174
      },
      {
        "javadoc": "/**\n * Calculates the rectangular Cholesky decomposition of a matrix.\n * <p>The rectangular Cholesky decomposition of a real symmetric positive\n * semidefinite matrix A consists of a rectangular matrix B with the same\n * number of rows such that: A is almost equal to BB<sup>T</sup>, depending\n * on a user-defined tolerance. In a sense, this is the square root of A.</p>\n * <p>The difference with respect to the regular {@link CholeskyDecomposition}\n * is that rows/columns may be permuted (hence the rectangular shape instead\n * of the traditional triangular shape) and there is a threshold to ignore\n * small diagonal elements. This is used for example to generate {@link\n * org.apache.commons.math3.random.CorrelatedRandomVectorGenerator correlated\n * random n-dimensions vectors} in a p-dimension subspace (p < n).\n * In other words, it allows generating random vectors from a covariance\n * matrix that is only positive semidefinite, and not positive definite.</p>\n * <p>Rectangular Cholesky decomposition is <em>not</em> suited for solving\n * linear systems, so it does not provide any {@link DecompositionSolver\n * decomposition solver}.</p>\n *\n * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n * @version $Id$\n * @since 2.0 (changed to concrete class in 3.0)\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
        "span_end": 128,
        "name": "RectangularCholeskyDecomposition",
        "start_line": 45,
        "span_start": 124,
        "bug_name": "Math_21",
        "type": "class",
        "end_line": 174
      }
    ]
  },
  "Math_22": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Implementation of the F-distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/F-distribution\">F-distribution (Wikipedia)</a>\n * @see <a href=\"http://mathworld.wolfram.com/F-Distribution.html\">F-distribution (MathWorld)</a>\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java",
        "span_end": 275,
        "name": "FDistribution",
        "start_line": 34,
        "span_start": 275,
        "bug_name": "Math_22",
        "type": "class",
        "end_line": 293
      },
      {
        "javadoc": "/**\n * Implementation of the uniform real distribution.\n *\n * @see <a href=\"http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)\"\n * >Uniform distribution (continuous), at Wikipedia</a>\n *\n * @version $Id$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java",
        "span_end": 184,
        "name": "UniformRealDistribution",
        "start_line": 34,
        "span_start": 184,
        "bug_name": "Math_22",
        "type": "class",
        "end_line": 204
      }
    ]
  },
  "Math_23": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * For a function defined on some interval {@code (lo, hi)}, this class\n * finds an approximation {@code x} to the point at which the function\n * attains its minimum.\n * It implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions.\n * <br/>\n * This code is an adaptation, partly based on the Python code from SciPy\n * (module \"optimize.py\" v0.5); the original algorithm is also modified\n * <ul>\n *  <li>to use an initial guess provided by the user,</li>\n *  <li>to ensure that the best point encountered is the one returned.</li>\n * </ul>\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 150,
        "name": "BrentOptimizer",
        "start_line": 44,
        "span_start": 151,
        "bug_name": "Math_23",
        "type": "class",
        "end_line": 310
      },
      {
        "javadoc": "/**\n * For a function defined on some interval {@code (lo, hi)}, this class\n * finds an approximation {@code x} to the point at which the function\n * attains its minimum.\n * It implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions.\n * <br/>\n * This code is an adaptation, partly based on the Python code from SciPy\n * (module \"optimize.py\" v0.5); the original algorithm is also modified\n * <ul>\n *  <li>to use an initial guess provided by the user,</li>\n *  <li>to ensure that the best point encountered is the one returned.</li>\n * </ul>\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 237,
        "name": "BrentOptimizer",
        "start_line": 44,
        "span_start": 234,
        "bug_name": "Math_23",
        "type": "class",
        "end_line": 310
      },
      {
        "javadoc": "/**\n * For a function defined on some interval {@code (lo, hi)}, this class\n * finds an approximation {@code x} to the point at which the function\n * attains its minimum.\n * It implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions.\n * <br/>\n * This code is an adaptation, partly based on the Python code from SciPy\n * (module \"optimize.py\" v0.5); the original algorithm is also modified\n * <ul>\n *  <li>to use an initial guess provided by the user,</li>\n *  <li>to ensure that the best point encountered is the one returned.</li>\n * </ul>\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 276,
        "name": "BrentOptimizer",
        "start_line": 44,
        "span_start": 274,
        "bug_name": "Math_23",
        "type": "class",
        "end_line": 310
      }
    ]
  },
  "Math_24": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n * If the function is defined on some interval {@code (lo, hi)}, then\n * this method finds an approximation {@code x} to the point at which\n * the function attains its minimum.\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 230,
        "name": "BrentOptimizer",
        "start_line": 38,
        "span_start": 230,
        "bug_name": "Math_24",
        "type": "class",
        "end_line": 299
      },
      {
        "javadoc": "/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n * If the function is defined on some interval {@code (lo, hi)}, then\n * this method finds an approximation {@code x} to the point at which\n * the function attains its minimum.\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 267,
        "name": "BrentOptimizer",
        "start_line": 38,
        "span_start": 267,
        "bug_name": "Math_24",
        "type": "class",
        "end_line": 299
      }
    ]
  },
  "Math_26": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Representation of a rational number.\n *\n * implements Serializable since 2.0\n *\n * @since 1.1\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_26/src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "span_end": 181,
        "name": "Fraction",
        "start_line": 37,
        "span_start": 181,
        "bug_name": "Math_26",
        "type": "class",
        "end_line": 666
      },
      {
        "javadoc": "/**\n * Representation of a rational number.\n *\n * implements Serializable since 2.0\n *\n * @since 1.1\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_26/src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "span_end": 209,
        "name": "Fraction",
        "start_line": 37,
        "span_start": 209,
        "bug_name": "Math_26",
        "type": "class",
        "end_line": 666
      }
    ]
  },
  "Math_28": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Solves a linear problem using the Two-Phase Simplex Method.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "span_end": 118,
        "name": "SimplexSolver",
        "start_line": 33,
        "span_start": 119,
        "bug_name": "Math_28",
        "type": "class",
        "end_line": 232
      },
      {
        "javadoc": "/**\n * Solves a linear problem using the Two-Phase Simplex Method.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "span_end": 127,
        "name": "SimplexSolver",
        "start_line": 33,
        "span_start": 128,
        "bug_name": "Math_28",
        "type": "class",
        "end_line": 232
      },
      {
        "javadoc": "/**\n * Solves a linear problem using the Two-Phase Simplex Method.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "span_end": 137,
        "name": "SimplexSolver",
        "start_line": 33,
        "span_start": 138,
        "bug_name": "Math_28",
        "type": "class",
        "end_line": 232
      },
      {
        "javadoc": "/**\n * Solves a linear problem using the Two-Phase Simplex Method.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "span_end": 151,
        "name": "SimplexSolver",
        "start_line": 33,
        "span_start": 152,
        "bug_name": "Math_28",
        "type": "class",
        "end_line": 232
      }
    ]
  },
  "Math_29": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "span_end": 352,
        "name": "OpenMapRealVector",
        "start_line": 34,
        "span_start": 349,
        "bug_name": "Math_29",
        "type": "class",
        "end_line": 833
      },
      {
        "javadoc": "/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "span_end": 373,
        "name": "OpenMapRealVector",
        "start_line": 34,
        "span_start": 374,
        "bug_name": "Math_29",
        "type": "class",
        "end_line": 833
      }
    ]
  },
  "Math_31": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Provides a generic means to evaluate continued fractions.  Subclasses simply\n * provided the a and b coefficients to evaluate the continued fraction.\n *\n * <p>\n * References:\n * <ul>\n * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n * Continued Fraction</a></li>\n * </ul>\n * </p>\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "span_end": 135,
        "name": "ContinuedFraction",
        "start_line": 37,
        "span_start": 134,
        "bug_name": "Math_31",
        "type": "class",
        "end_line": 201
      },
      {
        "javadoc": "/**\n * Provides a generic means to evaluate continued fractions.  Subclasses simply\n * provided the a and b coefficients to evaluate the continued fraction.\n *\n * <p>\n * References:\n * <ul>\n * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n * Continued Fraction</a></li>\n * </ul>\n * </p>\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "span_end": 170,
        "name": "ContinuedFraction",
        "start_line": 37,
        "span_start": 143,
        "bug_name": "Math_31",
        "type": "class",
        "end_line": 201
      },
      {
        "javadoc": "/**\n * Provides a generic means to evaluate continued fractions.  Subclasses simply\n * provided the a and b coefficients to evaluate the continued fraction.\n *\n * <p>\n * References:\n * <ul>\n * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n * Continued Fraction</a></li>\n * </ul>\n * </p>\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "span_end": 189,
        "name": "ContinuedFraction",
        "start_line": 37,
        "span_start": 185,
        "bug_name": "Math_31",
        "type": "class",
        "end_line": 201
      }
    ]
  },
  "Math_35": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Population of chromosomes which uses elitism (certain percentage of the best\n * chromosomes is directly copied to the next generation).\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
        "span_end": 51,
        "name": "ElitisticListPopulation",
        "start_line": 33,
        "span_start": 51,
        "bug_name": "Math_35",
        "type": "class",
        "end_line": 112
      },
      {
        "javadoc": "/**\n * Population of chromosomes which uses elitism (certain percentage of the best\n * chromosomes is directly copied to the next generation).\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
        "span_end": 65,
        "name": "ElitisticListPopulation",
        "start_line": 33,
        "span_start": 65,
        "bug_name": "Math_35",
        "type": "class",
        "end_line": 112
      }
    ]
  },
  "Math_36": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Representation of a rational number without any overflow. This class is\n * immutable.\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_36/src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "span_end": 687,
        "name": "BigFraction",
        "start_line": 39,
        "span_start": 686,
        "bug_name": "Math_36",
        "type": "class",
        "end_line": 1133
      },
      {
        "javadoc": "/**\n * Representation of a rational number without any overflow. This class is\n * immutable.\n *\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_36/src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "span_end": 734,
        "name": "BigFraction",
        "start_line": 39,
        "span_start": 733,
        "bug_name": "Math_36",
        "type": "class",
        "end_line": 1133
      }
    ]
  },
  "Math_37": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link org.apache.commons.math.util.Precision#equals(double,double,int)\n * equals for primitive double} in {@link org.apache.commons.math.util.Precision}\n * conforms with IEEE-754 while this class conforms with the standard behavior\n * for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_37/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 1020,
        "name": "Complex",
        "start_line": 57,
        "span_start": 1018,
        "bug_name": "Math_37",
        "type": "class",
        "end_line": 1221
      },
      {
        "javadoc": "/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link org.apache.commons.math.util.Precision#equals(double,double,int)\n * equals for primitive double} in {@link org.apache.commons.math.util.Precision}\n * conforms with IEEE-754 while this class conforms with the standard behavior\n * for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_37/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 1065,
        "name": "Complex",
        "start_line": 57,
        "span_start": 1063,
        "bug_name": "Math_37",
        "type": "class",
        "end_line": 1221
      }
    ]
  },
  "Math_38": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Powell's BOBYQA algorithm. This implementation is translated and\n * adapted from the Fortran version available\n * <a href=\"http://plato.asu.edu/ftp/other_software/bobyqa.zip\">here</a>.\n * See <a href=\"http://www.optimization-online.org/DB_HTML/2010/05/2616.html\">\n * this paper</a> for an introduction.\n * <br/>\n * BOBYQA is particularly well suited for high dimensional problems\n * where derivatives are not available. In most cases it outperforms the\n * {@link PowellOptimizer} significantly. Stochastic algorithms like\n * {@link CMAESOptimizer} succeed more often than BOBYQA, but are more\n * expensive. BOBYQA could also be considered as a replacement of any\n * derivative-based optimizer when the derivatives are approximated by\n * finite differences.\n *\n * @version $Id$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "span_end": 1663,
        "name": "BOBYQAOptimizer",
        "start_line": 52,
        "span_start": 1660,
        "bug_name": "Math_38",
        "type": "class",
        "end_line": 2482
      },
      {
        "javadoc": "/**\n * Powell's BOBYQA algorithm. This implementation is translated and\n * adapted from the Fortran version available\n * <a href=\"http://plato.asu.edu/ftp/other_software/bobyqa.zip\">here</a>.\n * See <a href=\"http://www.optimization-online.org/DB_HTML/2010/05/2616.html\">\n * this paper</a> for an introduction.\n * <br/>\n * BOBYQA is particularly well suited for high dimensional problems\n * where derivatives are not available. In most cases it outperforms the\n * {@link PowellOptimizer} significantly. Stochastic algorithms like\n * {@link CMAESOptimizer} succeed more often than BOBYQA, but are more\n * expensive. BOBYQA could also be considered as a replacement of any\n * derivative-based optimizer when the derivatives are approximated by\n * finite differences.\n *\n * @version $Id$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "span_end": 1752,
        "name": "BOBYQAOptimizer",
        "start_line": 52,
        "span_start": 1752,
        "bug_name": "Math_38",
        "type": "class",
        "end_line": 2482
      }
    ]
  },
  "Math_44": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Base class managing common boilerplate for all integrators.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "span_end": 280,
        "name": "AbstractIntegrator",
        "start_line": 50,
        "span_start": 280,
        "bug_name": "Math_44",
        "type": "class",
        "end_line": 394
      },
      {
        "javadoc": "/**\n * Base class managing common boilerplate for all integrators.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "span_end": 333,
        "name": "AbstractIntegrator",
        "start_line": 50,
        "span_start": 334,
        "bug_name": "Math_44",
        "type": "class",
        "end_line": 394
      },
      {
        "javadoc": "/**\n * Base class managing common boilerplate for all integrators.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "span_end": 342,
        "name": "AbstractIntegrator",
        "start_line": 50,
        "span_start": 343,
        "bug_name": "Math_44",
        "type": "class",
        "end_line": 394
      }
    ]
  },
  "Math_46": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_46/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 260,
        "name": "Complex",
        "start_line": 56,
        "span_start": 260,
        "bug_name": "Math_46",
        "type": "class",
        "end_line": 1185
      },
      {
        "javadoc": "/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_46/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 297,
        "name": "Complex",
        "start_line": 56,
        "span_start": 297,
        "bug_name": "Math_46",
        "type": "class",
        "end_line": 1185
      }
    ]
  },
  "Math_47": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_47/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 81,
        "name": "Complex",
        "start_line": 56,
        "span_start": 82,
        "bug_name": "Math_47",
        "type": "class",
        "end_line": 1181
      },
      {
        "javadoc": "/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_47/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 104,
        "name": "Complex",
        "start_line": 56,
        "span_start": 105,
        "bug_name": "Math_47",
        "type": "class",
        "end_line": 1181
      },
      {
        "javadoc": "/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_47/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 257,
        "name": "Complex",
        "start_line": 56,
        "span_start": 256,
        "bug_name": "Math_47",
        "type": "class",
        "end_line": 1181
      },
      {
        "javadoc": "/**\n * Representation of a Complex number, i.e. a number which has both a\n * real and imaginary part.\n * <br/>\n * Implementations of arithmetic operations handle {@code NaN} and\n * infinite values according to the rules for {@link java.lang.Double}, i.e.\n * {@link #equals} is an equivalence relation for all instances that have\n * a {@code NaN} in either real or imaginary part, e.g. the following are\n * considered equal:\n * <ul>\n *  <li>{@code 1 + NaNi}</li>\n *  <li>{@code NaN + i}</li>\n *  <li>{@code NaN + NaNi}</li>\n * </ul>\n * Note that this is in contradiction with the IEEE-754 standard for floating\n * point numbers (according to which the test {@code x == x} must fail if\n * {@code x} is {@code NaN}). The method\n * {@link MathUtils#equals(double,double,int) equals for primitive double} in\n * {@link MathUtils} conforms with IEEE-754 while this class conforms with\n * the standard behavior for Java object types.\n * <br/>\n * Implements Serializable since 2.0\n *\n * @version $Id$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_47/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 293,
        "name": "Complex",
        "start_line": 56,
        "span_start": 293,
        "bug_name": "Math_47",
        "type": "class",
        "end_line": 1181
      }
    ]
  },
  "Math_49": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 345,
        "name": "OpenMapRealVector",
        "start_line": 33,
        "span_start": 345,
        "bug_name": "Math_49",
        "type": "class",
        "end_line": 925
      },
      {
        "javadoc": "/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 358,
        "name": "OpenMapRealVector",
        "start_line": 33,
        "span_start": 358,
        "bug_name": "Math_49",
        "type": "class",
        "end_line": 925
      },
      {
        "javadoc": "/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 370,
        "name": "OpenMapRealVector",
        "start_line": 33,
        "span_start": 370,
        "bug_name": "Math_49",
        "type": "class",
        "end_line": 925
      },
      {
        "javadoc": "/**\n * This class implements the {@link RealVector} interface with a\n * {@link OpenIntToDoubleHashMap} backing store.\n * @version $Id$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 383,
        "name": "OpenMapRealVector",
        "start_line": 33,
        "span_start": 383,
        "bug_name": "Math_49",
        "type": "class",
        "end_line": 925
      }
    ]
  },
  "Math_52": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Math_52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java",
        "span_end": 344,
        "name": "Rotation",
        "start_line": 95,
        "span_start": 344,
        "bug_name": "Math_52",
        "type": "class",
        "end_line": 1031
      },
      {
        "file": "/Users/danielding/WORK_DIR/Math_52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java",
        "span_end": 359,
        "name": "Rotation",
        "start_line": 95,
        "span_start": 353,
        "bug_name": "Math_52",
        "type": "class",
        "end_line": 1031
      }
    ]
  },
  "Math_54": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be keep as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by add an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @version $Revision$ $Date$\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_54/src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "span_end": 272,
        "name": "Dfp",
        "start_line": 96,
        "span_start": 273,
        "bug_name": "Math_54",
        "type": "class",
        "end_line": 2400
      },
      {
        "javadoc": "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be keep as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by add an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @version $Revision$ $Date$\n * @since 2.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_54/src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "span_end": 2319,
        "name": "Dfp",
        "start_line": 96,
        "span_start": 2319,
        "bug_name": "Math_54",
        "type": "class",
        "end_line": 2400
      }
    ]
  },
  "Math_55": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * This class implements vectors in a three-dimensional space.\n * <p>Instance of this class are guaranteed to be immutable.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_55/src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "span_end": 461,
        "name": "Vector3D",
        "start_line": 33,
        "span_start": 459,
        "bug_name": "Math_55",
        "type": "class",
        "end_line": 545
      },
      {
        "javadoc": "/**\n * This class implements vectors in a three-dimensional space.\n * <p>Instance of this class are guaranteed to be immutable.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_55/src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "span_end": 473,
        "name": "Vector3D",
        "start_line": 33,
        "span_start": 470,
        "bug_name": "Math_55",
        "type": "class",
        "end_line": 545
      }
    ]
  },
  "Math_61": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Implementation for the {@link PoissonDistribution}.\n *\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "span_end": 94,
        "name": "PoissonDistributionImpl",
        "start_line": 33,
        "span_start": 94,
        "bug_name": "Math_61",
        "type": "class",
        "end_line": 241
      }
    ]
  },
  "Math_62": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Special implementation of the {@link UnivariateRealOptimizer} interface\n * adding multi-start features to an existing optimizer.\n *\n * This class wraps a classical optimizer to use it several times in\n * turn with different starting points in order to avoid being trapped\n * into a local extremum when looking for a global one.\n *\n * @param <FUNC> Type of the objective function to be optimized.\n *\n * @version $Revision$ $Date$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_62/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java",
        "span_end": 146,
        "name": "MultiStartUnivariateRealOptimizer",
        "start_line": 46,
        "span_start": 146,
        "bug_name": "Math_62",
        "type": "class",
        "end_line": 206
      },
      {
        "javadoc": "/**\n * Special implementation of the {@link UnivariateRealOptimizer} interface\n * adding multi-start features to an existing optimizer.\n *\n * This class wraps a classical optimizer to use it several times in\n * turn with different starting points in order to avoid being trapped\n * into a local extremum when looking for a global one.\n *\n * @param <FUNC> Type of the objective function to be optimized.\n *\n * @version $Revision$ $Date$\n * @since 3.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_62/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java",
        "span_end": 162,
        "name": "MultiStartUnivariateRealOptimizer",
        "start_line": 46,
        "span_start": 160,
        "bug_name": "Math_62",
        "type": "class",
        "end_line": 206
      }
    ]
  },
  "Math_64": {
    "bug_count": 10,
    "entries": [
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 257,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 258,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 269,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 270,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 278,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 278,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 316,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 316,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 323,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 324,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 346,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 344,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 365,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 365,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 423,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 421,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 433,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 434,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 445,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 106,
        "span_start": 442,
        "bug_name": "Math_64",
        "type": "class",
        "end_line": 872
      }
    ]
  },
  "Math_65": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Base class for implementing least squares optimizers.\n * <p>This base class handles the boilerplate methods associated to thresholds\n * settings, jacobian and error estimation.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "span_end": 245,
        "name": "AbstractLeastSquaresOptimizer",
        "start_line": 44,
        "span_start": 240,
        "bug_name": "Math_65",
        "type": "class",
        "end_line": 371
      },
      {
        "javadoc": "/**\n * Base class for implementing least squares optimizers.\n * <p>This base class handles the boilerplate methods associated to thresholds\n * settings, jacobian and error estimation.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "span_end": 258,
        "name": "AbstractLeastSquaresOptimizer",
        "start_line": 44,
        "span_start": 258,
        "bug_name": "Math_65",
        "type": "class",
        "end_line": 371
      }
    ]
  },
  "Math_66": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 47,
        "name": "BrentOptimizer",
        "start_line": 34,
        "span_start": 44,
        "bug_name": "Math_66",
        "type": "class",
        "end_line": 245
      },
      {
        "javadoc": "/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 67,
        "name": "BrentOptimizer",
        "start_line": 34,
        "span_start": 57,
        "bug_name": "Math_66",
        "type": "class",
        "end_line": 245
      },
      {
        "javadoc": "/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 95,
        "name": "BrentOptimizer",
        "start_line": 34,
        "span_start": 94,
        "bug_name": "Math_66",
        "type": "class",
        "end_line": 245
      },
      {
        "javadoc": "/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 127,
        "name": "BrentOptimizer",
        "start_line": 34,
        "span_start": 119,
        "bug_name": "Math_66",
        "type": "class",
        "end_line": 245
      },
      {
        "javadoc": "/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 201,
        "name": "BrentOptimizer",
        "start_line": 34,
        "span_start": 200,
        "bug_name": "Math_66",
        "type": "class",
        "end_line": 245
      },
      {
        "javadoc": "/**\n * Implements Richard Brent's algorithm (from his book \"Algorithms for\n * Minimization without Derivatives\", p. 79) for finding minima of real\n * univariate functions. This implementation is an adaptation partly\n * based on the Python code from SciPy (module \"optimize.py\" v0.5).\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 242,
        "name": "BrentOptimizer",
        "start_line": 34,
        "span_start": 238,
        "bug_name": "Math_66",
        "type": "class",
        "end_line": 245
      }
    ]
  },
  "Math_68": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 165,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 104,
        "span_start": 166,
        "bug_name": "Math_68",
        "type": "class",
        "end_line": 853
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 251,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 104,
        "span_start": 247,
        "bug_name": "Math_68",
        "type": "class",
        "end_line": 853
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 303,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 104,
        "span_start": 303,
        "bug_name": "Math_68",
        "type": "class",
        "end_line": 853
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 344,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 104,
        "span_start": 345,
        "bug_name": "Math_68",
        "type": "class",
        "end_line": 853
      },
      {
        "javadoc": "/**\n * This class solves a least squares problem using the Levenberg-Marquardt algorithm.\n *\n * <p>This implementation <em>should</em> work even for over-determined systems\n * (i.e. systems having more point than equations). Over-determined systems\n * are solved by ignoring the point which have the smallest impact according\n * to their jacobian column norm. Only the rank of the matrix and some loop bounds\n * are changed to implement this.</p>\n *\n * <p>The resolution engine is a simple translation of the MINPACK <a\n * href=\"http://www.netlib.org/minpack/lmder.f\">lmder</a> routine with minor\n * changes. The changes include the over-determined resolution, the use of\n * inherited convergence checker and the Q.R. decomposition which has been\n * rewritten following the algorithm described in the\n * P. Lascaux and R. Theodor book <i>Analyse num&eacute;rique matricielle\n * appliqu&eacute;e &agrave; l'art de l'ing&eacute;nieur</i>, Masson 1986.</p>\n * <p>The authors of the original fortran version are:\n * <ul>\n * <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n * <li>Burton S. Garbow</li>\n * <li>Kenneth E. Hillstrom</li>\n * <li>Jorge J. More</li>\n * </ul>\n * The redistribution policy for MINPACK is available <a\n * href=\"http://www.netlib.org/minpack/disclaimer\">here</a>, for convenience, it\n * is reproduced below.</p>\n *\n * <table border=\"0\" width=\"80%\" cellpadding=\"10\" align=\"center\" bgcolor=\"#E0E0E0\">\n * <tr><td>\n *    Minpack Copyright Notice (1999) University of Chicago.\n *    All rights reserved\n * </td></tr>\n * <tr><td>\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * <ol>\n *  <li>Redistributions of source code must retain the above copyright\n *      notice, this list of conditions and the following disclaimer.</li>\n * <li>Redistributions in binary form must reproduce the above\n *     copyright notice, this list of conditions and the following\n *     disclaimer in the documentation and/or other materials provided\n *     with the distribution.</li>\n * <li>The end-user documentation included with the redistribution, if any,\n *     must include the following acknowledgment:\n *     <code>This product includes software developed by the University of\n *           Chicago, as Operator of Argonne National Laboratory.</code>\n *     Alternately, this acknowledgment may appear in the software itself,\n *     if and wherever such third-party acknowledgments normally appear.</li>\n * <li><strong>WARRANTY DISCLAIMER. THE SOFTWARE IS SUPPLIED \"AS IS\"\n *     WITHOUT WARRANTY OF ANY KIND. THE COPYRIGHT HOLDER, THE\n *     UNITED STATES, THE UNITED STATES DEPARTMENT OF ENERGY, AND\n *     THEIR EMPLOYEES: (1) DISCLAIM ANY WARRANTIES, EXPRESS OR\n *     IMPLIED, INCLUDING BUT NOT LIMITED TO ANY IMPLIED WARRANTIES\n *     OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE\n *     OR NON-INFRINGEMENT, (2) DO NOT ASSUME ANY LEGAL LIABILITY\n *     OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR\n *     USEFULNESS OF THE SOFTWARE, (3) DO NOT REPRESENT THAT USE OF\n *     THE SOFTWARE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS, (4)\n *     DO NOT WARRANT THAT THE SOFTWARE WILL FUNCTION\n *     UNINTERRUPTED, THAT IT IS ERROR-FREE OR THAT ANY ERRORS WILL\n *     BE CORRECTED.</strong></li>\n * <li><strong>LIMITATION OF LIABILITY. IN NO EVENT WILL THE COPYRIGHT\n *     HOLDER, THE UNITED STATES, THE UNITED STATES DEPARTMENT OF\n *     ENERGY, OR THEIR EMPLOYEES: BE LIABLE FOR ANY INDIRECT,\n *     INCIDENTAL, CONSEQUENTIAL, SPECIAL OR PUNITIVE DAMAGES OF\n *     ANY KIND OR NATURE, INCLUDING BUT NOT LIMITED TO LOSS OF\n *     PROFITS OR LOSS OF DATA, FOR ANY REASON WHATSOEVER, WHETHER\n *     SUCH LIABILITY IS ASSERTED ON THE BASIS OF CONTRACT, TORT\n *     (INCLUDING NEGLIGENCE OR STRICT LIABILITY), OR OTHERWISE,\n *     EVEN IF ANY OF SAID PARTIES HAS BEEN WARNED OF THE\n *     POSSIBILITY OF SUCH LOSS OR DAMAGES.</strong></li>\n * <ol></td></tr>\n * </table>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 420,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 104,
        "span_start": 413,
        "bug_name": "Math_68",
        "type": "class",
        "end_line": 853
      }
    ]
  },
  "Math_71": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "span_end": 299,
        "name": "EmbeddedRungeKuttaIntegrator",
        "start_line": 65,
        "span_start": 300,
        "bug_name": "Math_71",
        "type": "class",
        "end_line": 407
      },
      {
        "file": "/Users/danielding/WORK_DIR/Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
        "span_end": 179,
        "name": "RungeKuttaIntegrator",
        "start_line": 55,
        "span_start": 180,
        "bug_name": "Math_71",
        "type": "class",
        "end_line": 222
      }
    ]
  },
  "Math_72": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">\n * Brent algorithm</a> for  finding zeros of real univariate functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *\n * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
        "span_end": 115,
        "name": "BrentSolver",
        "start_line": 33,
        "span_start": 115,
        "bug_name": "Math_72",
        "type": "class",
        "end_line": 319
      },
      {
        "javadoc": "/**\n * Implements the <a href=\"http://mathworld.wolfram.com/BrentsMethod.html\">\n * Brent algorithm</a> for  finding zeros of real univariate functions.\n * <p>\n * The function should be continuous but not necessarily smooth.</p>\n *\n * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
        "span_end": 127,
        "name": "BrentSolver",
        "start_line": 33,
        "span_start": 127,
        "bug_name": "Math_72",
        "type": "class",
        "end_line": 319
      }
    ]
  },
  "Math_76": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Calculates the compact or truncated Singular Value Decomposition of a matrix.\n * <p>The Singular Value Decomposition of matrix A is a set of three matrices:\n * U, &Sigma; and V such that A = U &times; &Sigma; &times; V<sup>T</sup>.\n * Let A be a m &times; n matrix, then U is a m &times; p orthogonal matrix,\n * &Sigma; is a p &times; p diagonal matrix with positive diagonal elements,\n * V is a n &times; p orthogonal matrix (hence V<sup>T</sup> is a p &times; n\n * orthogonal matrix). The size p depends on the chosen algorithm:\n * <ul>\n *   <li>for full SVD, p would be n, but this is not supported by this implementation,</li>\n *   <li>for compact SVD, p is the rank r of the matrix\n *       (i. e. the number of positive singular values),</li>\n *   <li>for truncated SVD p is min(r, t) where t is user-specified.</li>\n * </ul>\n * </p>\n * <p>\n * Note that since this class computes only the compact or truncated SVD and not\n * the full SVD, the singular values computed are always positive.\n * </p>\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_76/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "span_end": 179,
        "name": "SingularValueDecompositionImpl",
        "start_line": 46,
        "span_start": 162,
        "bug_name": "Math_76",
        "type": "class",
        "end_line": 438
      },
      {
        "javadoc": "/**\n * Calculates the compact or truncated Singular Value Decomposition of a matrix.\n * <p>The Singular Value Decomposition of matrix A is a set of three matrices:\n * U, &Sigma; and V such that A = U &times; &Sigma; &times; V<sup>T</sup>.\n * Let A be a m &times; n matrix, then U is a m &times; p orthogonal matrix,\n * &Sigma; is a p &times; p diagonal matrix with positive diagonal elements,\n * V is a n &times; p orthogonal matrix (hence V<sup>T</sup> is a p &times; n\n * orthogonal matrix). The size p depends on the chosen algorithm:\n * <ul>\n *   <li>for full SVD, p would be n, but this is not supported by this implementation,</li>\n *   <li>for compact SVD, p is the rank r of the matrix\n *       (i. e. the number of positive singular values),</li>\n *   <li>for truncated SVD p is min(r, t) where t is user-specified.</li>\n * </ul>\n * </p>\n * <p>\n * Note that since this class computes only the compact or truncated SVD and not\n * the full SVD, the singular values computed are always positive.\n * </p>\n *\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_76/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "span_end": 264,
        "name": "SingularValueDecompositionImpl",
        "start_line": 46,
        "span_start": 248,
        "bug_name": "Math_76",
        "type": "class",
        "end_line": 438
      }
    ]
  },
  "Math_77": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * This class implements the {@link RealVector} interface with a double array.\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "span_end": 721,
        "name": "ArrayRealVector",
        "start_line": 31,
        "span_start": 721,
        "bug_name": "Math_77",
        "type": "class",
        "end_line": 1184
      },
      {
        "javadoc": "/**\n * This class implements the {@link RealVector} interface with a {@link OpenIntToDoubleHashMap} backing store.\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 506,
        "name": "OpenMapRealVector",
        "start_line": 30,
        "span_start": 498,
        "bug_name": "Math_77",
        "type": "class",
        "end_line": 885
      }
    ]
  },
  "Math_78": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step (and hence the step should be reduced to ensure the\n * event occurs at a bound rather than inside the step).</p>\n *\n * @version $Revision$ $Date$\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_78/src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "span_end": 190,
        "name": "EventState",
        "start_line": 42,
        "span_start": 191,
        "bug_name": "Math_78",
        "type": "class",
        "end_line": 334
      },
      {
        "javadoc": "/**\n * This class handles the state for one {@link EventHandler\n * event handler} during integration steps.\n *\n * <p>Each time the integrator proposes a step, the event handler\n * switching function should be checked. This class handles the state\n * of one handler during one integration step, with references to the\n * state at the end of the preceding step. This information is used to\n * decide if the handler should trigger an event or not during the\n * proposed step (and hence the step should be reduced to ensure the\n * event occurs at a bound rather than inside the step).</p>\n *\n * @version $Revision$ $Date$\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_78/src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "span_end": 198,
        "name": "EventState",
        "start_line": 42,
        "span_start": 198,
        "bug_name": "Math_78",
        "type": "class",
        "end_line": 334
      }
    ]
  },
  "Math_81": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Calculates the eigen decomposition of a <strong>symmetric</strong> matrix.\n * <p>The eigen decomposition of matrix A is a set of two matrices:\n * V and D such that A = V D V<sup>T</sup>. A, V and D are all m &times; m\n * matrices.</p>\n * <p>As of 2.0, this class supports only <strong>symmetric</strong> matrices,\n * and hence computes only real realEigenvalues. This implies the D matrix returned by\n * {@link #getD()} is always diagonal and the imaginary values returned {@link\n * #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always null.</p>\n * <p>When called with a {@link RealMatrix} argument, this implementation only uses\n * the upper part of the matrix, the part below the diagonal is not accessed at all.</p>\n * <p>Eigenvalues are computed as soon as the matrix is decomposed, but eigenvectors\n * are computed only when required, i.e. only when one of the {@link #getEigenvector(int)},\n * {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>\n * <p>This implementation is based on Inderjit Singh Dhillon thesis\n * <a href=\"http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf\">A\n * New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector\n * Problem</a>, on Beresford N. Parlett and Osni A. Marques paper <a\n * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An Implementation of the\n * dqds Algorithm (Positive Case)</a> and on the corresponding LAPACK routines (DLARRE,\n * DLASQ2, DLAZQ3, DLAZQ4, DLASQ5 and DLASQ6).</p>\n * <p>The authors of the original fortran version are:\n *   <ul>\n *     <li>Beresford Parlett, University of California, Berkeley, USA</li>\n *     <li>Jim Demmel, University of California, Berkeley, USA</li>\n *     <li>Inderjit Dhillon, University of Texas, Austin, USA</li>\n *     <li>Osni Marques, LBNL/NERSC, USA</li>\n *     <li>Christof Voemel, University of California, Berkeley, USA</li>\n *   </ul>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "span_end": 602,
        "name": "EigenDecompositionImpl",
        "start_line": 61,
        "span_start": 603,
        "bug_name": "Math_81",
        "type": "class",
        "end_line": 1842
      },
      {
        "javadoc": "/**\n * Calculates the eigen decomposition of a <strong>symmetric</strong> matrix.\n * <p>The eigen decomposition of matrix A is a set of two matrices:\n * V and D such that A = V D V<sup>T</sup>. A, V and D are all m &times; m\n * matrices.</p>\n * <p>As of 2.0, this class supports only <strong>symmetric</strong> matrices,\n * and hence computes only real realEigenvalues. This implies the D matrix returned by\n * {@link #getD()} is always diagonal and the imaginary values returned {@link\n * #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always null.</p>\n * <p>When called with a {@link RealMatrix} argument, this implementation only uses\n * the upper part of the matrix, the part below the diagonal is not accessed at all.</p>\n * <p>Eigenvalues are computed as soon as the matrix is decomposed, but eigenvectors\n * are computed only when required, i.e. only when one of the {@link #getEigenvector(int)},\n * {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>\n * <p>This implementation is based on Inderjit Singh Dhillon thesis\n * <a href=\"http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf\">A\n * New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector\n * Problem</a>, on Beresford N. Parlett and Osni A. Marques paper <a\n * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An Implementation of the\n * dqds Algorithm (Positive Case)</a> and on the corresponding LAPACK routines (DLARRE,\n * DLASQ2, DLAZQ3, DLAZQ4, DLASQ5 and DLASQ6).</p>\n * <p>The authors of the original fortran version are:\n *   <ul>\n *     <li>Beresford Parlett, University of California, Berkeley, USA</li>\n *     <li>Jim Demmel, University of California, Berkeley, USA</li>\n *     <li>Inderjit Dhillon, University of Texas, Austin, USA</li>\n *     <li>Osni Marques, LBNL/NERSC, USA</li>\n *     <li>Christof Voemel, University of California, Berkeley, USA</li>\n *   </ul>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "span_end": 906,
        "name": "EigenDecompositionImpl",
        "start_line": 61,
        "span_start": 905,
        "bug_name": "Math_81",
        "type": "class",
        "end_line": 1842
      },
      {
        "javadoc": "/**\n * Calculates the eigen decomposition of a <strong>symmetric</strong> matrix.\n * <p>The eigen decomposition of matrix A is a set of two matrices:\n * V and D such that A = V D V<sup>T</sup>. A, V and D are all m &times; m\n * matrices.</p>\n * <p>As of 2.0, this class supports only <strong>symmetric</strong> matrices,\n * and hence computes only real realEigenvalues. This implies the D matrix returned by\n * {@link #getD()} is always diagonal and the imaginary values returned {@link\n * #getImagEigenvalue(int)} and {@link #getImagEigenvalues()} are always null.</p>\n * <p>When called with a {@link RealMatrix} argument, this implementation only uses\n * the upper part of the matrix, the part below the diagonal is not accessed at all.</p>\n * <p>Eigenvalues are computed as soon as the matrix is decomposed, but eigenvectors\n * are computed only when required, i.e. only when one of the {@link #getEigenvector(int)},\n * {@link #getV()}, {@link #getVT()}, {@link #getSolver()} methods is called.</p>\n * <p>This implementation is based on Inderjit Singh Dhillon thesis\n * <a href=\"http://www.cs.utexas.edu/users/inderjit/public_papers/thesis.pdf\">A\n * New O(n<sup>2</sup>) Algorithm for the Symmetric Tridiagonal Eigenvalue/Eigenvector\n * Problem</a>, on Beresford N. Parlett and Osni A. Marques paper <a\n * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An Implementation of the\n * dqds Algorithm (Positive Case)</a> and on the corresponding LAPACK routines (DLARRE,\n * DLASQ2, DLAZQ3, DLAZQ4, DLASQ5 and DLASQ6).</p>\n * <p>The authors of the original fortran version are:\n *   <ul>\n *     <li>Beresford Parlett, University of California, Berkeley, USA</li>\n *     <li>Jim Demmel, University of California, Berkeley, USA</li>\n *     <li>Inderjit Dhillon, University of Texas, Austin, USA</li>\n *     <li>Osni Marques, LBNL/NERSC, USA</li>\n *     <li>Christof Voemel, University of California, Berkeley, USA</li>\n *   </ul>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "span_end": 1543,
        "name": "EigenDecompositionImpl",
        "start_line": 61,
        "span_start": 1543,
        "bug_name": "Math_81",
        "type": "class",
        "end_line": 1842
      }
    ]
  },
  "Math_83": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A tableau for use in the Simplex method.\n *\n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "span_end": 292,
        "name": "SimplexTableau",
        "start_line": 63,
        "span_start": 292,
        "bug_name": "Math_83",
        "type": "class",
        "end_line": 572
      },
      {
        "javadoc": "/**\n * A tableau for use in the Simplex method.\n *\n * <p>\n * Example:\n * <pre>\n *   W |  Z |  x1 |  x2 |  x- | s1 |  s2 |  a1 |  RHS\n * ---------------------------------------------------\n *  -1    0    0     0     0     0     0     1     0   &lt;= phase 1 objective\n *   0    1   -15   -10    0     0     0     0     0   &lt;= phase 2 objective\n *   0    0    1     0     0     1     0     0     2   &lt;= constraint 1\n *   0    0    0     1     0     0     1     0     3   &lt;= constraint 2\n *   0    0    1     1     0     0     0     1     4   &lt;= constraint 3\n * </pre>\n * W: Phase 1 objective function</br>\n * Z: Phase 2 objective function</br>\n * x1 &amp; x2: Decision variables</br>\n * x-: Extra decision variable to allow for negative values</br>\n * s1 &amp; s2: Slack/Surplus variables</br>\n * a1: Artificial variable</br>\n * RHS: Right hand side</br>\n * </p>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "span_end": 345,
        "name": "SimplexTableau",
        "start_line": 63,
        "span_start": 341,
        "bug_name": "Math_83",
        "type": "class",
        "end_line": 572
      }
    ]
  },
  "Math_84": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * This class implements the multi-directional direct search method.\n *\n * @version $Revision$ $Date$\n * @see NelderMead\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "span_end": 63,
        "name": "MultiDirectional",
        "start_line": 34,
        "span_start": 64,
        "bug_name": "Math_84",
        "type": "class",
        "end_line": 136
      },
      {
        "javadoc": "/**\n * This class implements the multi-directional direct search method.\n *\n * @version $Revision$ $Date$\n * @see NelderMead\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "span_end": 93,
        "name": "MultiDirectional",
        "start_line": 34,
        "span_start": 92,
        "bug_name": "Math_84",
        "type": "class",
        "end_line": 136
      }
    ]
  },
  "Math_86": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Calculates the Cholesky decomposition of a matrix.\n * <p>The Cholesky decomposition of a real symmetric positive-definite\n * matrix A consists of a lower triangular matrix L with same size that\n * satisfy: A = LL<sup>T</sup>Q = I). In a sense, this is the square root of A.</p>\n *\n * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "span_end": 116,
        "name": "CholeskyDecompositionImpl",
        "start_line": 34,
        "span_start": 114,
        "bug_name": "Math_86",
        "type": "class",
        "end_line": 354
      },
      {
        "javadoc": "/**\n * Calculates the Cholesky decomposition of a matrix.\n * <p>The Cholesky decomposition of a real symmetric positive-definite\n * matrix A consists of a lower triangular matrix L with same size that\n * satisfy: A = LL<sup>T</sup>Q = I). In a sense, this is the square root of A.</p>\n *\n * @see <a href=\"http://mathworld.wolfram.com/CholeskyDecomposition.html\">MathWorld</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Cholesky_decomposition\">Wikipedia</a>\n * @version $Revision$ $Date$\n * @since 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "span_end": 136,
        "name": "CholeskyDecompositionImpl",
        "start_line": 34,
        "span_start": 137,
        "bug_name": "Math_86",
        "type": "class",
        "end_line": 354
      }
    ]
  },
  "Math_90": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Maintains a frequency distribution.\n * <p>\n * Accepts int, long, char or Object values.  New values added must be\n * comparable to those that have been added, otherwise the add method will\n * throw an IllegalArgumentException.</p>\n * <p>\n * Integer values (int, long, Integer, Long) are not distinguished by type --\n * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have\n * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n * <p>\n * char values are converted by <code>addValue</code> to Character instances.\n * As such, these values are not comparable to integral values, so attempts\n * to combine integral types with chars in a frequency distribution will fail.\n * </p>\n * <p>\n * The values are ordered using the default (natural order), unless a\n * <code>Comparator</code> is supplied in the constructor.</p>\n *\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_90/src/java/org/apache/commons/math/stat/Frequency.java",
        "span_end": 109,
        "name": "Frequency",
        "start_line": 46,
        "span_start": 110,
        "bug_name": "Math_90",
        "type": "class",
        "end_line": 487
      },
      {
        "javadoc": "/**\n * Maintains a frequency distribution.\n * <p>\n * Accepts int, long, char or Object values.  New values added must be\n * comparable to those that have been added, otherwise the add method will\n * throw an IllegalArgumentException.</p>\n * <p>\n * Integer values (int, long, Integer, Long) are not distinguished by type --\n * i.e. <code>addValue(Long.valueOf(2)), addValue(2), addValue(2l)</code> all have\n * the same effect (similarly for arguments to <code>getCount,</code> etc.).</p>\n * <p>\n * char values are converted by <code>addValue</code> to Character instances.\n * As such, these values are not comparable to integral values, so attempts\n * to combine integral types with chars in a frequency distribution will fail.\n * </p>\n * <p>\n * The values are ordered using the default (natural order), unless a\n * <code>Comparator</code> is supplied in the constructor.</p>\n *\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_90/src/java/org/apache/commons/math/stat/Frequency.java",
        "span_end": 120,
        "name": "Frequency",
        "start_line": 46,
        "span_start": 121,
        "bug_name": "Math_90",
        "type": "class",
        "end_line": 487
      }
    ]
  },
  "Math_92": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_92/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 207,
        "name": "MathUtils",
        "start_line": 27,
        "span_start": 184,
        "bug_name": "Math_92",
        "type": "class",
        "end_line": 1118
      },
      {
        "javadoc": "/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_92/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 236,
        "name": "MathUtils",
        "start_line": 27,
        "span_start": 234,
        "bug_name": "Math_92",
        "type": "class",
        "end_line": 1118
      },
      {
        "javadoc": "/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_92/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 281,
        "name": "MathUtils",
        "start_line": 27,
        "span_start": 277,
        "bug_name": "Math_92",
        "type": "class",
        "end_line": 1118
      }
    ]
  },
  "Math_93": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_93/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 346,
        "name": "MathUtils",
        "start_line": 27,
        "span_start": 345,
        "bug_name": "Math_93",
        "type": "class",
        "end_line": 1076
      },
      {
        "javadoc": "/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_93/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 376,
        "name": "MathUtils",
        "start_line": 27,
        "span_start": 377,
        "bug_name": "Math_93",
        "type": "class",
        "end_line": 1076
      },
      {
        "javadoc": "/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_93/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 396,
        "name": "MathUtils",
        "start_line": 27,
        "span_start": 397,
        "bug_name": "Math_93",
        "type": "class",
        "end_line": 1076
      }
    ]
  },
  "Math_98": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries\n * and <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n * LU decompostion</a> to support linear system\n * solution and inverse.\n * <p>\n * The LU decompostion is performed as needed, to support the following operations: <ul>\n * <li>solve</li>\n * <li>isSingular</li>\n * <li>getDeterminant</li>\n * <li>inverse</li> </ul></p>\n * <p>\n * <strong>Usage notes</strong>:<br>\n * <ul><li>\n * The LU decomposition is stored and reused on subsequent calls.  If matrix\n * data are modified using any of the public setXxx methods, the saved\n * decomposition is discarded.  If data are modified via references to the\n * underlying array obtained using <code>getDataRef()</code>, then the stored\n * LU decomposition will not be discarded.  In this case, you need to\n * explicitly invoke <code>LUDecompose()</code> to recompute the decomposition\n * before using any of the methods above.</li>\n * <li>\n * As specified in the {@link BigMatrix} interface, matrix element indexing\n * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n * returns the element in the first row, first column of the matrix.</li></ul></p>\n *\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "span_end": 991,
        "name": "BigMatrixImpl",
        "start_line": 50,
        "span_start": 991,
        "bug_name": "Math_98",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * Implementation of RealMatrix using a double[][] array to store entries and\n * <a href=\"http://www.math.gatech.edu/~bourbaki/math2601/Web-notes/2num.pdf\">\n * LU decomposition</a> to support linear system\n * solution and inverse.\n * <p>\n * The LU decomposition is performed as needed, to support the following operations: <ul>\n * <li>solve</li>\n * <li>isSingular</li>\n * <li>getDeterminant</li>\n * <li>inverse</li> </ul></p>\n * <p>\n * <strong>Usage notes</strong>:<br>\n * <ul><li>\n * The LU decomposition is cached and reused on subsequent calls.\n * If data are modified via references to the underlying array obtained using\n * <code>getDataRef()</code>, then the stored LU decomposition will not be\n * discarded.  In this case, you need to explicitly invoke\n * <code>LUDecompose()</code> to recompute the decomposition\n * before using any of the methods above.</li>\n * <li>\n * As specified in the {@link RealMatrix} interface, matrix element indexing\n * is 0-based -- e.g., <code>getEntry(0, 0)</code>\n * returns the element in the first row, first column of the matrix.</li></ul>\n * </p>\n *\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "span_end": 779,
        "name": "RealMatrixImpl",
        "start_line": 52,
        "span_start": 779,
        "bug_name": "Math_98",
        "type": "class",
        "end_line": 1178
      }
    ]
  },
  "Math_99": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_99/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 542,
        "name": "MathUtils",
        "start_line": 30,
        "span_start": 543,
        "bug_name": "Math_99",
        "type": "class",
        "end_line": 1220
      },
      {
        "javadoc": "/**\n * Some useful additions to the built-in functions in {@link Math}.\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_99/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 713,
        "name": "MathUtils",
        "start_line": 30,
        "span_start": 714,
        "bug_name": "Math_99",
        "type": "class",
        "end_line": 1220
      }
    ]
  },
  "Math_100": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Base class for implementing estimators.\n * <p>This base class handles the boilerplates methods associated to thresholds\n * settings, jacobian and error estimation.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "span_end": 166,
        "name": "AbstractEstimator",
        "start_line": 33,
        "span_start": 166,
        "bug_name": "Math_100",
        "type": "class",
        "end_line": 301
      },
      {
        "javadoc": "/**\n * Base class for implementing estimators.\n * <p>This base class handles the boilerplates methods associated to thresholds\n * settings, jacobian and error estimation.</p>\n * @version $Revision$ $Date$\n * @since 1.2\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "span_end": 207,
        "name": "AbstractEstimator",
        "start_line": 33,
        "span_start": 202,
        "bug_name": "Math_100",
        "type": "class",
        "end_line": 301
      }
    ]
  },
  "Math_106": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Formats a Fraction number in proper format.  The number format for each of\n * the whole number, numerator and, denominator can be configured.\n * <p>\n * Minus signs are only allowed in the whole number part - i.e.,\n * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n * will result in a <code>ParseException</code>.\n *\n * @since 1.1\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "span_end": 165,
        "name": "ProperFractionFormat",
        "start_line": 35,
        "span_start": 165,
        "bug_name": "Math_106",
        "type": "class",
        "end_line": 221
      },
      {
        "javadoc": "/**\n * Formats a Fraction number in proper format.  The number format for each of\n * the whole number, numerator and, denominator can be configured.\n * <p>\n * Minus signs are only allowed in the whole number part - i.e.,\n * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n * will result in a <code>ParseException</code>.\n *\n * @since 1.1\n * @version $Revision$ $Date$\n */\n",
        "file": "/Users/danielding/WORK_DIR/Math_106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "span_end": 200,
        "name": "ProperFractionFormat",
        "start_line": 35,
        "span_start": 200,
        "bug_name": "Math_106",
        "type": "class",
        "end_line": 221
      }
    ]
  },
  "Mockito_2": {
    "bug_count": 3,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_2/src/org/mockito/internal/util/Timer.java",
        "span_end": 2,
        "name": "Timer",
        "start_line": 4,
        "span_start": 4,
        "bug_name": "Mockito_2",
        "type": "class",
        "end_line": 28
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_2/src/org/mockito/internal/util/Timer.java",
        "span_end": 9,
        "name": "Timer",
        "start_line": 4,
        "span_start": 10,
        "bug_name": "Mockito_2",
        "type": "class",
        "end_line": 28
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_2/src/org/mockito/internal/util/Timer.java",
        "span_end": 28,
        "name": "Timer",
        "start_line": 4,
        "span_start": 28,
        "bug_name": "Mockito_2",
        "type": "class",
        "end_line": 28
      }
    ]
  },
  "Mockito_3": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_3/src/org/mockito/internal/invocation/InvocationMatcher.java",
        "span_end": 130,
        "name": "InvocationMatcher",
        "start_line": 21,
        "span_start": 127,
        "bug_name": "Mockito_3",
        "type": "class",
        "end_line": 151
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_3/src/org/mockito/internal/invocation/InvocationMatcher.java",
        "span_end": 142,
        "name": "InvocationMatcher",
        "start_line": 21,
        "span_start": 143,
        "bug_name": "Mockito_3",
        "type": "class",
        "end_line": 151
      }
    ]
  },
  "Mockito_4": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Reports verification and misusing errors.\n * <p>\n * One of the key points of mocking library is proper verification/exception\n * messages. All messages in one place makes it easier to tune and amend them.\n * <p>\n * Reporter can be injected and therefore is easily testable.\n * <p>\n * Generally, exception messages are full of line breaks to make them easy to\n * read (xunit plugins take only fraction of screen on modern IDEs).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_4/src/org/mockito/exceptions/Reporter.java",
        "span_end": 424,
        "name": "Reporter",
        "start_line": 48,
        "span_start": 424,
        "bug_name": "Mockito_4",
        "type": "class",
        "end_line": 801
      },
      {
        "javadoc": "/**\n * Reports verification and misusing errors.\n * <p>\n * One of the key points of mocking library is proper verification/exception\n * messages. All messages in one place makes it easier to tune and amend them.\n * <p>\n * Reporter can be injected and therefore is easily testable.\n * <p>\n * Generally, exception messages are full of line breaks to make them easy to\n * read (xunit plugins take only fraction of screen on modern IDEs).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_4/src/org/mockito/exceptions/Reporter.java",
        "span_end": 434,
        "name": "Reporter",
        "start_line": 48,
        "span_start": 434,
        "bug_name": "Mockito_4",
        "type": "class",
        "end_line": 801
      },
      {
        "javadoc": "/**\n * Reports verification and misusing errors.\n * <p>\n * One of the key points of mocking library is proper verification/exception\n * messages. All messages in one place makes it easier to tune and amend them.\n * <p>\n * Reporter can be injected and therefore is easily testable.\n * <p>\n * Generally, exception messages are full of line breaks to make them easy to\n * read (xunit plugins take only fraction of screen on modern IDEs).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_4/src/org/mockito/exceptions/Reporter.java",
        "span_end": 676,
        "name": "Reporter",
        "start_line": 48,
        "span_start": 677,
        "bug_name": "Mockito_4",
        "type": "class",
        "end_line": 801
      }
    ]
  },
  "Mockito_6": {
    "bug_count": 20,
    "entries": [
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 324,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 324,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 339,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 339,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 358,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 358,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 373,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 373,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 392,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 392,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 407,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 407,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 427,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 427,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 442,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 442,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 461,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 461,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 122,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 122,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 137,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 137,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 152,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 152,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 167,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 167,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 182,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 182,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 197,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 197,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 212,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 212,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 227,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 227,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 244,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 244,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 292,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 292,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre class=\"code\"><code class=\"java\">\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </code></pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </code></pre>\n * <p>\n * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.\n * Internally, they record a matcher on a stack and return a dummy value (usually null).\n * This implementation is due static type safety imposed by java compiler.\n * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.\n *\n * <p>\n * <b>Warning 2:</b>\n * <p>\n * The any family methods <b>*doesn't do any type checks*</b>, those are only here to avoid casting\n * in your code. If you want to perform type checks use the {@link #isA(Class)} method.\n * This <b>might</b> however change (type checks could be added) in a future major release.\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre class=\"code\"><code class=\"java\">\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </code></pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre class=\"code\"><code class=\"java\">\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </code></pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 309,
        "name": "Matchers",
        "start_line": 105,
        "span_start": 309,
        "bug_name": "Mockito_6",
        "type": "class",
        "end_line": 881
      }
    ]
  },
  "Mockito_9": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Optional Answer that adds partial mocking support\n * <p>\n * {@link Answer} can be used to define the return values of unstubbed invocations.\n * <p>\n * This implementation can be helpful when working with legacy code.\n * When this implementation is used, unstubbed methods will delegate to the real implementation.\n * This is a way to create a partial mock object that calls real methods by default.\n * <p>\n * As usual you are going to read <b>the partial mock warning</b>:\n * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n * How does partial mock fit into this paradigm? Well, it just doesn't...\n * Partial mock usually means that the complexity has been moved to a different method on the same object.\n * In most cases, this is not the way you want to design your application.\n * <p>\n * However, there are rare cases when partial mocks come handy:\n * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n * <p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_9/src/org/mockito/internal/stubbing/answers/CallsRealMethods.java",
        "span_end": 35,
        "name": "CallsRealMethods",
        "start_line": 32,
        "span_start": 36,
        "bug_name": "Mockito_9",
        "type": "class",
        "end_line": 38
      }
    ]
  },
  "Mockito_10": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_10/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 71,
        "name": "ReturnsDeepStubs",
        "start_line": 42,
        "span_start": 71,
        "bug_name": "Mockito_10",
        "type": "class",
        "end_line": 162
      },
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_10/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 102,
        "name": "ReturnsDeepStubs",
        "start_line": 42,
        "span_start": 87,
        "bug_name": "Mockito_10",
        "type": "class",
        "end_line": 162
      }
    ]
  },
  "Mockito_14": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Invocation handler set on mock objects.\n *\n * @param <T>\n *            type of mock object to handle\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_14/src/org/mockito/internal/MockHandler.java",
        "span_end": 78,
        "name": "MockHandler",
        "start_line": 31,
        "span_start": 76,
        "bug_name": "Mockito_14",
        "type": "class",
        "end_line": 119
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_14/src/org/mockito/internal/MockitoCore.java",
        "span_end": 73,
        "name": "MockitoCore",
        "start_line": 35,
        "span_start": 73,
        "bug_name": "Mockito_14",
        "type": "class",
        "end_line": 156
      }
    ]
  },
  "Mockito_15": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * This node returns an actual injecter which will be either :\n *\n * <ul>\n * <li>an {@link OngoingInjecter} that do nothing if a candidate couldn't be found</li>\n * <li>an {@link OngoingInjecter} that will try to inject the candidate trying first the property setter then if not possible try the field access</li>\n * </ul>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_15/src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java",
        "span_end": 25,
        "name": "FinalMockCandidateFilter",
        "start_line": 17,
        "span_start": 25,
        "bug_name": "Mockito_15",
        "type": "class",
        "end_line": 41
      }
    ]
  },
  "Mockito_16": {
    "bug_count": 3,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_16/src/org/mockito/internal/MockitoCore.java",
        "span_end": 35,
        "name": "MockitoCore",
        "start_line": 25,
        "span_start": 32,
        "bug_name": "Mockito_16",
        "type": "class",
        "end_line": 140
      },
      {
        "javadoc": "/**\n * <p align=\"left\"><img src=\"logo.jpg\"/></p>\n * Mockito library enables mocks creation, verification and stubbing.\n * <p>\n * This javadoc content is also available on the <a href=\"http://mockito.org\">http://mockito.org</a> web page.\n * All documentation is kept in javadocs because it guarantees consistency between what's on the web and what's in the source code.\n * Also, it makes possible to access documentation straight from the IDE even if you work offline.\n *\n * <h1>Contents</h1>\n *\n * <b>\n *      <a href=\"#1\">1. Let's verify some behaviour! </a><br/>\n *      <a href=\"#2\">2. How about some stubbing? </a><br/>\n *      <a href=\"#3\">3. Argument matchers </a><br/>\n *      <a href=\"#4\">4. Verifying exact number of invocations / at least once / never </a><br/>\n *      <a href=\"#5\">5. Stubbing void methods with exceptions </a><br/>\n *      <a href=\"#6\">6. Verification in order </a><br/>\n *      <a href=\"#7\">7. Making sure interaction(s) never happened on mock </a><br/>\n *      <a href=\"#8\">8. Finding redundant invocations </a><br/>\n *      <a href=\"#9\">9. Shorthand for mocks creation - &#064;Mock annotation </a><br/>\n *      <a href=\"#10\">10. Stubbing consecutive calls (iterator-style stubbing) </a><br/>\n *      <a href=\"#11\">11. Stubbing with callbacks </a><br/>\n *      <a href=\"#12\">12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids </a><br/>\n *      <a href=\"#13\">13. Spying on real objects </a><br/>\n *      <a href=\"#14\">14. Changing default return values of unstubbed invocations (Since 1.7) </a><br/>\n *      <a href=\"#15\">15. Capturing arguments for further assertions (Since 1.8.0) </a><br/>\n *      <a href=\"#16\">16. Real partial mocks (Since 1.8.0) </a><br/>\n *      <a href=\"#17\">17. Resetting mocks (Since 1.8.0) </a><br/>\n *      <a href=\"#18\">18. Troubleshooting & validating framework usage (Since 1.8.0) </a><br/>\n *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) </a><br/>\n *      <a href=\"#20\">20. (**New**) Serializable mocks (Since 1.8.1) </a><br/>\n * </b>\n *\n * <p>\n * Following examples mock a List, because everyone knows its interface (methods\n * like add(), get(), clear() will be used). <br>\n * You probably wouldn't mock List class 'in real'.\n *\n * <h3 id=\"1\">1. Let's verify some behaviour!</h3>\n *\n * <pre>\n * //Let's import Mockito statically so that the code looks clearer\n * import static org.mockito.Mockito.*;\n *\n * //mock creation\n * List mockedList = mock(List.class);\n *\n * //using mock object\n * mockedList.add(\"one\");\n * mockedList.clear();\n *\n * //verification\n * verify(mockedList).add(\"one\");\n * verify(mockedList).clear();\n * </pre>\n *\n * <p>\n * Once created, mock will remember all interactions. Then you can selectively\n * verify whatever interaction you are interested in.\n *\n * <h3 id=\"2\">2. How about some stubbing?</h3>\n *\n * <pre>\n * //You can mock concrete classes, not only interfaces\n * LinkedList mockedList = mock(LinkedList.class);\n *\n * //stubbing\n * when(mockedList.get(0)).thenReturn(\"first\");\n * when(mockedList.get(1)).thenThrow(new RuntimeException());\n *\n * //following prints \"first\"\n * System.out.println(mockedList.get(0));\n *\n * //following throws runtime exception\n * System.out.println(mockedList.get(1));\n *\n * //following prints \"null\" because get(999) was not stubbed\n * System.out.println(mockedList.get(999));\n *\n * //Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>\n * //If your code cares what get(0) returns then something else breaks (often before even verify() gets executed).\n * //If your code doesn't care what get(0) returns then it should not be stubbed. Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a>.\n * verify(mockedList).get(0);\n * </pre>\n *\n * <ul>\n * <li> By default, for all methods that return value, mock returns null, an\n * empty collection or appropriate primitive/primitive wrapper value (e.g: 0,\n * false, ... for int/Integer, boolean/Boolean, ...). </li>\n *\n * <li> Stubbing can be overridden: for example common stubbing can go to\n * fixture setup but the test methods can override it.\n * Please note that overridding stubbing is a potential code smell that points out too much stubbing</li>\n *\n * <li> Once stubbed, the method will always return stubbed value regardless\n * of how many times it is called. </li>\n *\n * <li> Last stubbing is more important - when you stubbed the same method with\n * the same arguments many times. </li>\n *\n * </ul>\n *\n * <h3 id=\"3\">3. Argument matchers</h3>\n *\n * Mockito verifies argument values in natural java style: by using an equals() method.\n * Sometimes, when extra flexibility is required then you might use argument matchers:\n *\n * <pre>\n * //stubbing using built-in anyInt() argument matcher\n * when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n * //stubbing using hamcrest (let's say isValid() returns your own hamcrest matcher):\n * when(mockedList.contains(argThat(isValid()))).thenReturn(\"element\");\n *\n * //following prints \"element\"\n * System.out.println(mockedList.get(999));\n *\n * //<b>you can also verify using an argument matcher</b>\n * verify(mockedList).get(anyInt());\n * </pre>\n *\n * <p>\n * Argument matchers allow flexible verification or stubbing.\n * {@link Matchers Click here to see} more built-in matchers\n * and examples of <b>custom argument matchers / hamcrest matchers</b>.\n * <p>\n * For information solely on <b>custom argument matchers</b> check out javadoc for {@link ArgumentMatcher} class.\n * <p>\n * Be reasonable with using complicated argument matching.\n * The natural matching style using equals() with occasional anyX() matchers tend to give clean & simple tests.\n * Sometimes it's just better to refactor the code to allow equals() matching or even implement equals() method to help out with testing.\n * <p>\n * Also, read <a href=\"#15\">section 15</a> or javadoc for {@link ArgumentCaptor} class.\n * {@link ArgumentCaptor} is a special implementation of an argument matcher that captures argument values for further assertions.\n * <p>\n * <b>Warning on argument matchers:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided\n * by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n *\n * <pre>\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without an argument matcher.\n * </pre>\n *\n * <h3 id=\"4\">4. Verifying exact number of invocations / at least x / never</h3>\n *\n * <pre>\n * //using mock\n * mockedList.add(\"once\");\n *\n * mockedList.add(\"twice\");\n * mockedList.add(\"twice\");\n *\n * mockedList.add(\"three times\");\n * mockedList.add(\"three times\");\n * mockedList.add(\"three times\");\n *\n * //following two verifications work exactly the same - times(1) is used by default\n * verify(mockedList).add(\"once\");\n * verify(mockedList, times(1)).add(\"once\");\n *\n * //exact number of invocations verification\n * verify(mockedList, times(2)).add(\"twice\");\n * verify(mockedList, times(3)).add(\"three times\");\n *\n * //verification using never(). never() is an alias to times(0)\n * verify(mockedList, never()).add(\"never happened\");\n *\n * //verification using atLeast()/atMost()\n * verify(mockedList, atLeastOnce()).add(\"three times\");\n * verify(mockedList, atLeast(2)).add(\"five times\");\n * verify(mockedList, atMost(5)).add(\"three times\");\n *\n * </pre>\n *\n * <p>\n * <b>times(1) is the default.</b> Therefore using times(1) explicitly can be\n * omitted.\n *\n * <h3 id=\"5\">5. Stubbing void methods with exceptions</h3>\n *\n * <pre>\n *   doThrow(new RuntimeException()).when(mockedList).clear();\n *\n *   //following throws RuntimeException:\n *   mockedList.clear();\n * </pre>\n *\n * Read more about doThrow|doAnswer family of methods in paragraph 12.\n * <p>\n * Initially, {@link Mockito#stubVoid(Object)} was used for stubbing voids.\n * Currently stubVoid() is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods.\n *\n * <h3 id=\"6\">6. Verification in order</h3>\n *\n * <pre>\n * List firstMock = mock(List.class);\n * List secondMock = mock(List.class);\n *\n * //using mocks\n * firstMock.add(\"was called first\");\n * secondMock.add(\"was called second\");\n *\n * //create inOrder object passing any mocks that need to be verified in order\n * InOrder inOrder = inOrder(firstMock, secondMock);\n *\n * //following will make sure that firstMock was called before secondMock\n * inOrder.verify(firstMock).add(\"was called first\");\n * inOrder.verify(secondMock).add(\"was called second\");\n * </pre>\n *\n * Verification in order is flexible - <b>you don't have to verify all\n * interactions</b> one-by-one but only those that you are interested in\n * testing in order.\n * <p>\n * Also, you can create InOrder object passing only mocks that are relevant for\n * in-order verification.\n *\n * <h3 id=\"7\">7. Making sure interaction(s) never happened on mock</h3>\n *\n * <pre>\n * //using mocks - only mockOne is interacted\n * mockOne.add(\"one\");\n *\n * //ordinary verification\n * verify(mockOne).add(\"one\");\n *\n * //verify that method was never called on a mock\n * verify(mockOne, never()).add(\"two\");\n *\n * //verify that other mocks were not interacted\n * verifyZeroInteractions(mockTwo, mockThree);\n *\n * </pre>\n *\n * <h3 id=\"8\">8. Finding redundant invocations</h3>\n *\n * <pre>\n * //using mocks\n * mockedList.add(\"one\");\n * mockedList.add(\"two\");\n *\n * verify(mockedList).add(\"one\");\n *\n * //following verification will fail\n * verifyNoMoreInteractions(mockedList);\n * </pre>\n *\n * A word of <b>warning</b>:\n * Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method.\n * verifyNoMoreInteractions() is not recommended to use in every test method.\n * verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n * Abusing it leads to overspecified, less maintainable tests. You can find further reading\n * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here</a>.\n *\n * <p>\n * See also {@link Mockito#never()} - it is more explicit and\n * communicates the intent well.\n * <p>\n *\n * <h3 id=\"9\">9. Shorthand for mocks creation - &#064;Mock annotation</h3>\n *\n * <ul>\n * <li>Minimizes repetitive mock creation code.</li>\n * <li>Makes the test class more readable.</li>\n * <li>Makes the verification error easier to read because the <b>field name</b>\n * is used to identify the mock.</li>\n * </ul>\n *\n * <pre>\n *   public class ArticleManagerTest {\n *\n *       &#064;Mock private ArticleCalculator calculator;\n *       &#064;Mock private ArticleDatabase database;\n *       &#064;Mock private UserProvider userProvider;\n *\n *       private ArticleManager manager;\n * </pre>\n *\n * <b>Important!</b> This needs to be somewhere in the base class or a test\n * runner:\n *\n * <pre>\n * MockitoAnnotations.initMocks(testClass);\n * </pre>\n *\n * You can use built-in runner: {@link MockitoJUnitRunner}.\n * <p>\n * Read more here: {@link MockitoAnnotations}\n *\n * <h3 id=\"10\"> 10. Stubbing consecutive calls (iterator-style stubbing)</h3>\n *\n * Sometimes we need to stub with different return value/exception for the same\n * method call. Typical use case could be mocking iterators.\n * Original version of Mockito did not have this feature to promote simple mocking.\n * For example, instead of iterators one could use {@link Iterable} or simply\n * collections. Those offer natural ways of stubbing (e.g. using real\n * collections). In rare scenarios stubbing consecutive calls could be useful,\n * though:\n * <p>\n *\n * <pre>\n * when(mock.someMethod(\"some arg\"))\n *   .thenThrow(new RuntimeException())\n *   .thenReturn(\"foo\");\n *\n * //First call: throws runtime exception:\n * mock.someMethod(\"some arg\");\n *\n * //Second call: prints \"foo\"\n * System.out.println(mock.someMethod(\"some arg\"));\n *\n * //Any consecutive call: prints \"foo\" as well (last stubbing wins).\n * System.out.println(mock.someMethod(\"some arg\"));\n * </pre>\n *\n * Alternative, shorter version of consecutive stubbing:\n *\n * <pre>\n * when(mock.someMethod(\"some arg\"))\n *   .thenReturn(\"one\", \"two\", \"three\");\n * </pre>\n *\n * <h3 id=\"11\"> 11. Stubbing with callbacks</h3>\n *\n * Allows stubbing with generic {@link Answer} interface.\n *  <p>\n * Yet another controversial feature which was not included in Mockito\n * originally. We recommend using simple stubbing with thenReturn() or\n * thenThrow() only. Those two should be <b>just enough</b> to test/test-drive\n * any clean & simple code.\n *\n * <pre>\n * when(mock.someMethod(anyString())).thenAnswer(new Answer() {\n *     Object answer(InvocationOnMock invocation) {\n *         Object[] args = invocation.getArguments();\n *         Object mock = invocation.getMock();\n *         return \"called with arguments: \" + args;\n *     }\n * });\n *\n * //Following prints \"called with arguments: foo\"\n * System.out.println(mock.someMethod(\"foo\"));\n * </pre>\n *\n * <h3 id=\"12\"> 12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods for stubbing voids (mostly)</h3>\n *\n * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n * <p>\n * {@link Mockito#doThrow(Throwable)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids.\n * The main reason is improved readability and consistency with the family of doAnswer() methods.\n * <p>\n * Use doThrow() when you want to stub a void method with an exception:\n * <pre>\n *   doThrow(new RuntimeException()).when(mockedList).clear();\n *\n *   //following throws RuntimeException:\n *   mockedList.clear();\n * </pre>\n *\n * Read more about other methods:\n * <p>\n * {@link Mockito#doThrow(Throwable)}\n * <p>\n * {@link Mockito#doAnswer(Answer)}\n * <p>\n * {@link Mockito#doNothing()}\n * <p>\n * {@link Mockito#doReturn(Object)}\n *\n * <h3 id=\"13\"> 13. Spying on real objects</h3>\n *\n * You can create spies of real objects. When you use the spy then the <b>real</b> methods are called (unless a method was stubbed).\n * <p>\n * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n *\n * <p>\n * Spying on real objects can be associated with \"partial mocking\" concept.\n * <b>Before the release 1.8</b>, Mockito spies were not real partial mocks.\n * The reason was we thought partial mock is a code smell.\n * At some point we found legitimate use cases for partial mocks\n * (3rd party interfaces, interim refactoring of legacy code, the full article is <a href=\n * \"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\"\n * >here</a>)\n * <p>\n *\n * <pre>\n *   List list = new LinkedList();\n *   List spy = spy(list);\n *\n *   //optionally, you can stub out some methods:\n *   when(spy.size()).thenReturn(100);\n *\n *   //using the spy calls <b>real</b> methods\n *   spy.add(\"one\");\n *   spy.add(\"two\");\n *\n *   //prints \"one\" - the first element of a list\n *   System.out.println(spy.get(0));\n *\n *   //size() method was stubbed - 100 is printed\n *   System.out.println(spy.size());\n *\n *   //optionally, you can verify\n *   verify(spy).add(\"one\");\n *   verify(spy).add(\"two\");\n * </pre>\n *\n * <h4>Important gotcha on spying real objects!</h4>\n *\n * 1. Sometimes it's impossible to use {@link Mockito#when(Object)} for stubbing spies. Example:\n *\n * <pre>\n *   List list = new LinkedList();\n *   List spy = spy(list);\n *\n *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n *   when(spy.get(0)).thenReturn(\"foo\");\n *\n *   //You have to use doReturn() for stubbing\n *   doReturn(\"foo\").when(spy).get(0);\n * </pre>\n *\n * 2. Watch out for final methods.\n * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n *\n * <h3 id=\"14\">14. Changing default return values of unstubbed invocations (Since 1.7) </h3>\n *\n * You can create a mock with specified strategy for its return values.\n * It's quite advanced feature and typically you don't need it to write decent tests.\n * However, it can be helpful for working with <b>legacy systems</b>.\n * <p>\n * It is the default answer so it will be used <b>only when you don't</b> stub the method call.\n *\n * <pre>\n *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer());\n * </pre>\n *\n * <p>\n * Read more about this interesting implementation of <i>Answer</i>: {@link Mockito#RETURNS_SMART_NULLS}\n *\n * <h3 id=\"15\">15. Capturing arguments for further assertions (Since 1.8.0) </h3>\n *\n * Mockito verifies argument values in natural java style: by using an equals() method.\n * This is also the recommended way of matching arguments because it makes tests clean & simple.\n * In some situations though, it is helpful to assert on certain arguments after the actual verification.\n * For example:\n * <pre>\n *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);\n *   verify(mock).doSomething(argument.capture());\n *   assertEquals(\"John\", argument.getValue().getName());\n * </pre>\n *\n * <b>Warning:</b> it is recommended to use ArgumentCaptor with verification <b>but not</b> with stubbing.\n * Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.\n * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.\n * <p>\n * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).\n * Both techniques can be used for making sure certain arguments where passed to mocks.\n * However, ArgumentCaptor may be a better fit if:\n * <ul>\n * <li>custom argument matcher is not likely to be reused</li>\n * <li>you just need it to assert on argument values to complete verification</li>\n * </ul>\n * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n *\n * <h3 id=\"16\">16. Real partial mocks (Since 1.8.0) </h3>\n *\n *  Finally, after many internal debates & discussions on the mailing list, partial mock support was added to Mockito.\n *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n *  <a href=\"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\">here</a>\n *  <p>\n *  <b>Before release 1.8</b> spy() was not producing real partial mocks and it was confusing for some users.\n *  Read more about spying: <a href=\"#13\">here</a> or in javadoc for {@link Mockito#spy(Object)} method.\n *  <p>\n *  <pre>\n *    //you can create partial mock with spy() method:\n *    List list = spy(new LinkedList());\n *\n *    //you can enable partial mock capabilities selectively on mocks:\n *    Foo mock = mock(Foo.class);\n *    //Be sure the real implementation is 'safe'.\n *    //If real implementation throws exceptions or depends on specific state of the object then you're in trouble.\n *    when(mock.someMethod()).thenCallRealMethod();\n *  </pre>\n *\n * As usual you are going to read <b>the partial mock warning</b>:\n * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n * How does partial mock fit into this paradigm? Well, it just doesn't...\n * Partial mock usually means that the complexity has been moved to a different method on the same object.\n * In most cases, this is not the way you want to design your application.\n * <p>\n * However, there are rare cases when partial mocks come handy:\n * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n *\n * <h3 id=\"17\">17. Resetting mocks (Since 1.8.0) </h3>\n *\n * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n * Normally, you don't need to reset your mocks, just create new mocks for each test method.\n * <p>\n * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n * <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.\n * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\".\n * There are several threads about it on mockito mailing list.\n * <p>\n * The only reason we added reset() method is to\n * make it possible to work with container-injected mocks.\n * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here</a>)\n * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here</a>).\n * <p>\n * <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much).\n * <pre>\n *   List mock = mock(List.class);\n *   when(mock.size()).thenReturn(10);\n *   mock.add(1);\n *\n *   reset(mock);\n *   //at this point the mock forgot any interactions & stubbing\n * </pre>\n *\n * <h3 id=\"18\">18. Troubleshooting & validating framework usage (Since 1.8.0) </h3>\n *\n * First of all, in case of any trouble, I encourage you to read the Mockito FAQ:\n * <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n * <p>\n * In case of questions you may also post to mockito mailing list:\n * <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a>\n * <p>\n * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>.\n * However, there's a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}\n *\n * <h3 id=\"19\">19. Aliases for behavior driven development (Since 1.8.0) </h3>\n *\n * Behavior Driven Development style of writing tests uses <b>//given //when //then</b> comments as fundamental parts of your test methods.\n * This is exactly how we write our tests and we warmly encourage you to do so!\n * <p>\n * Start learning about BDD here: <a href=\"http://en.wikipedia.org/wiki/Behavior_Driven_Development\">http://en.wikipedia.org/wiki/Behavior_Driven_Development</a>\n * <p>\n * The problem is that current stubbing api with canonical role of <b>when</b> word does not integrate nicely with <b>//given //when //then</b> comments.\n * It's because stubbing belongs to <b>given</b> component of the test and not to the <b>when</b> component of the test.\n * Hence {@link BDDMockito} class introduces an alias so that you stub method calls with {@link BDDMockito#given(Object)} method.\n * Now it really nicely integrates with the <b>given</b> component of a BDD style test!\n * <p>\n * Here is how the test might look like:\n * <pre>\n * import static org.mockito.BDDMockito.*;\n *\n * Seller seller = mock(Seller.class);\n * Shop shop = new Shop(seller);\n *\n * public void shouldBuyBread() throws Exception {\n *   //given\n *   given(seller.askForBread()).willReturn(new Bread());\n *\n *   //when\n *   Goods goods = shop.buyBread();\n *\n *   //then\n *   assertThat(goods, containBread());\n * }\n * </pre>\n *\n * <h3 id=\"20\">20. (**New**) Serializable mocks (Since 1.8.1) </h3>\n *\n * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n * <p>\n * WARNING: This should be rarely used in unit testing.\n * <p>\n * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\n * was in a web environment and the objects from the external dependency were being serialized to pass between layers.\n * <p>\n * To create serializable mock use {@link MockSettings#serializable()}:\n * <pre>\n *   List serializableMock = mock(List.class, withSettings().serializable());\n * </pre>\n * <p>\n * The mock can be serialized assuming all the normal <a href='http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html'>\n * serialization requirements</a> are met by the class.\n * <p>\n * Making a real object spy serializable is a bit more effort as the spy(...) method does not have an overloaded version\n * which accepts MockSettings. No worries, you will hardly ever use it.\n *\n * <pre>\n * List<Object> list = new ArrayList<Object>();\n * List<Object> spy = mock(ArrayList.class, withSettings()\n *                 .spiedInstance(list)\n *                 .defaultAnswer(CALLS_REAL_METHODS)\n *                 .serializable());\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_16/src/org/mockito/Mockito.java",
        "span_end": 827,
        "name": "Mockito",
        "start_line": 618,
        "span_start": 827,
        "bug_name": "Mockito_16",
        "type": "class",
        "end_line": 1569
      },
      {
        "javadoc": "/**\n * <p align=\"left\"><img src=\"logo.jpg\"/></p>\n * Mockito library enables mocks creation, verification and stubbing.\n * <p>\n * This javadoc content is also available on the <a href=\"http://mockito.org\">http://mockito.org</a> web page.\n * All documentation is kept in javadocs because it guarantees consistency between what's on the web and what's in the source code.\n * Also, it makes possible to access documentation straight from the IDE even if you work offline.\n *\n * <h1>Contents</h1>\n *\n * <b>\n *      <a href=\"#1\">1. Let's verify some behaviour! </a><br/>\n *      <a href=\"#2\">2. How about some stubbing? </a><br/>\n *      <a href=\"#3\">3. Argument matchers </a><br/>\n *      <a href=\"#4\">4. Verifying exact number of invocations / at least once / never </a><br/>\n *      <a href=\"#5\">5. Stubbing void methods with exceptions </a><br/>\n *      <a href=\"#6\">6. Verification in order </a><br/>\n *      <a href=\"#7\">7. Making sure interaction(s) never happened on mock </a><br/>\n *      <a href=\"#8\">8. Finding redundant invocations </a><br/>\n *      <a href=\"#9\">9. Shorthand for mocks creation - &#064;Mock annotation </a><br/>\n *      <a href=\"#10\">10. Stubbing consecutive calls (iterator-style stubbing) </a><br/>\n *      <a href=\"#11\">11. Stubbing with callbacks </a><br/>\n *      <a href=\"#12\">12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids </a><br/>\n *      <a href=\"#13\">13. Spying on real objects </a><br/>\n *      <a href=\"#14\">14. Changing default return values of unstubbed invocations (Since 1.7) </a><br/>\n *      <a href=\"#15\">15. Capturing arguments for further assertions (Since 1.8.0) </a><br/>\n *      <a href=\"#16\">16. Real partial mocks (Since 1.8.0) </a><br/>\n *      <a href=\"#17\">17. Resetting mocks (Since 1.8.0) </a><br/>\n *      <a href=\"#18\">18. Troubleshooting & validating framework usage (Since 1.8.0) </a><br/>\n *      <a href=\"#19\">19. Aliases for behavior driven development (Since 1.8.0) </a><br/>\n *      <a href=\"#20\">20. (**New**) Serializable mocks (Since 1.8.1) </a><br/>\n * </b>\n *\n * <p>\n * Following examples mock a List, because everyone knows its interface (methods\n * like add(), get(), clear() will be used). <br>\n * You probably wouldn't mock List class 'in real'.\n *\n * <h3 id=\"1\">1. Let's verify some behaviour!</h3>\n *\n * <pre>\n * //Let's import Mockito statically so that the code looks clearer\n * import static org.mockito.Mockito.*;\n *\n * //mock creation\n * List mockedList = mock(List.class);\n *\n * //using mock object\n * mockedList.add(\"one\");\n * mockedList.clear();\n *\n * //verification\n * verify(mockedList).add(\"one\");\n * verify(mockedList).clear();\n * </pre>\n *\n * <p>\n * Once created, mock will remember all interactions. Then you can selectively\n * verify whatever interaction you are interested in.\n *\n * <h3 id=\"2\">2. How about some stubbing?</h3>\n *\n * <pre>\n * //You can mock concrete classes, not only interfaces\n * LinkedList mockedList = mock(LinkedList.class);\n *\n * //stubbing\n * when(mockedList.get(0)).thenReturn(\"first\");\n * when(mockedList.get(1)).thenThrow(new RuntimeException());\n *\n * //following prints \"first\"\n * System.out.println(mockedList.get(0));\n *\n * //following throws runtime exception\n * System.out.println(mockedList.get(1));\n *\n * //following prints \"null\" because get(999) was not stubbed\n * System.out.println(mockedList.get(999));\n *\n * //Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>\n * //If your code cares what get(0) returns then something else breaks (often before even verify() gets executed).\n * //If your code doesn't care what get(0) returns then it should not be stubbed. Not convinced? See <a href=\"http://monkeyisland.pl/2008/04/26/asking-and-telling\">here</a>.\n * verify(mockedList).get(0);\n * </pre>\n *\n * <ul>\n * <li> By default, for all methods that return value, mock returns null, an\n * empty collection or appropriate primitive/primitive wrapper value (e.g: 0,\n * false, ... for int/Integer, boolean/Boolean, ...). </li>\n *\n * <li> Stubbing can be overridden: for example common stubbing can go to\n * fixture setup but the test methods can override it.\n * Please note that overridding stubbing is a potential code smell that points out too much stubbing</li>\n *\n * <li> Once stubbed, the method will always return stubbed value regardless\n * of how many times it is called. </li>\n *\n * <li> Last stubbing is more important - when you stubbed the same method with\n * the same arguments many times. </li>\n *\n * </ul>\n *\n * <h3 id=\"3\">3. Argument matchers</h3>\n *\n * Mockito verifies argument values in natural java style: by using an equals() method.\n * Sometimes, when extra flexibility is required then you might use argument matchers:\n *\n * <pre>\n * //stubbing using built-in anyInt() argument matcher\n * when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n * //stubbing using hamcrest (let's say isValid() returns your own hamcrest matcher):\n * when(mockedList.contains(argThat(isValid()))).thenReturn(\"element\");\n *\n * //following prints \"element\"\n * System.out.println(mockedList.get(999));\n *\n * //<b>you can also verify using an argument matcher</b>\n * verify(mockedList).get(anyInt());\n * </pre>\n *\n * <p>\n * Argument matchers allow flexible verification or stubbing.\n * {@link Matchers Click here to see} more built-in matchers\n * and examples of <b>custom argument matchers / hamcrest matchers</b>.\n * <p>\n * For information solely on <b>custom argument matchers</b> check out javadoc for {@link ArgumentMatcher} class.\n * <p>\n * Be reasonable with using complicated argument matching.\n * The natural matching style using equals() with occasional anyX() matchers tend to give clean & simple tests.\n * Sometimes it's just better to refactor the code to allow equals() matching or even implement equals() method to help out with testing.\n * <p>\n * Also, read <a href=\"#15\">section 15</a> or javadoc for {@link ArgumentCaptor} class.\n * {@link ArgumentCaptor} is a special implementation of an argument matcher that captures argument values for further assertions.\n * <p>\n * <b>Warning on argument matchers:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided\n * by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n *\n * <pre>\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without an argument matcher.\n * </pre>\n *\n * <h3 id=\"4\">4. Verifying exact number of invocations / at least x / never</h3>\n *\n * <pre>\n * //using mock\n * mockedList.add(\"once\");\n *\n * mockedList.add(\"twice\");\n * mockedList.add(\"twice\");\n *\n * mockedList.add(\"three times\");\n * mockedList.add(\"three times\");\n * mockedList.add(\"three times\");\n *\n * //following two verifications work exactly the same - times(1) is used by default\n * verify(mockedList).add(\"once\");\n * verify(mockedList, times(1)).add(\"once\");\n *\n * //exact number of invocations verification\n * verify(mockedList, times(2)).add(\"twice\");\n * verify(mockedList, times(3)).add(\"three times\");\n *\n * //verification using never(). never() is an alias to times(0)\n * verify(mockedList, never()).add(\"never happened\");\n *\n * //verification using atLeast()/atMost()\n * verify(mockedList, atLeastOnce()).add(\"three times\");\n * verify(mockedList, atLeast(2)).add(\"five times\");\n * verify(mockedList, atMost(5)).add(\"three times\");\n *\n * </pre>\n *\n * <p>\n * <b>times(1) is the default.</b> Therefore using times(1) explicitly can be\n * omitted.\n *\n * <h3 id=\"5\">5. Stubbing void methods with exceptions</h3>\n *\n * <pre>\n *   doThrow(new RuntimeException()).when(mockedList).clear();\n *\n *   //following throws RuntimeException:\n *   mockedList.clear();\n * </pre>\n *\n * Read more about doThrow|doAnswer family of methods in paragraph 12.\n * <p>\n * Initially, {@link Mockito#stubVoid(Object)} was used for stubbing voids.\n * Currently stubVoid() is deprecated in favor of {@link Mockito#doThrow(Throwable)}.\n * This is because of improved readability and consistency with the family of {@link Mockito#doAnswer(Answer)} methods.\n *\n * <h3 id=\"6\">6. Verification in order</h3>\n *\n * <pre>\n * List firstMock = mock(List.class);\n * List secondMock = mock(List.class);\n *\n * //using mocks\n * firstMock.add(\"was called first\");\n * secondMock.add(\"was called second\");\n *\n * //create inOrder object passing any mocks that need to be verified in order\n * InOrder inOrder = inOrder(firstMock, secondMock);\n *\n * //following will make sure that firstMock was called before secondMock\n * inOrder.verify(firstMock).add(\"was called first\");\n * inOrder.verify(secondMock).add(\"was called second\");\n * </pre>\n *\n * Verification in order is flexible - <b>you don't have to verify all\n * interactions</b> one-by-one but only those that you are interested in\n * testing in order.\n * <p>\n * Also, you can create InOrder object passing only mocks that are relevant for\n * in-order verification.\n *\n * <h3 id=\"7\">7. Making sure interaction(s) never happened on mock</h3>\n *\n * <pre>\n * //using mocks - only mockOne is interacted\n * mockOne.add(\"one\");\n *\n * //ordinary verification\n * verify(mockOne).add(\"one\");\n *\n * //verify that method was never called on a mock\n * verify(mockOne, never()).add(\"two\");\n *\n * //verify that other mocks were not interacted\n * verifyZeroInteractions(mockTwo, mockThree);\n *\n * </pre>\n *\n * <h3 id=\"8\">8. Finding redundant invocations</h3>\n *\n * <pre>\n * //using mocks\n * mockedList.add(\"one\");\n * mockedList.add(\"two\");\n *\n * verify(mockedList).add(\"one\");\n *\n * //following verification will fail\n * verifyNoMoreInteractions(mockedList);\n * </pre>\n *\n * A word of <b>warning</b>:\n * Some users who did a lot of classic, expect-run-verify mocking tend to use verifyNoMoreInteractions() very often, even in every test method.\n * verifyNoMoreInteractions() is not recommended to use in every test method.\n * verifyNoMoreInteractions() is a handy assertion from the interaction testing toolkit. Use it only when it's relevant.\n * Abusing it leads to overspecified, less maintainable tests. You can find further reading\n * <a href=\"http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected/\">here</a>.\n *\n * <p>\n * See also {@link Mockito#never()} - it is more explicit and\n * communicates the intent well.\n * <p>\n *\n * <h3 id=\"9\">9. Shorthand for mocks creation - &#064;Mock annotation</h3>\n *\n * <ul>\n * <li>Minimizes repetitive mock creation code.</li>\n * <li>Makes the test class more readable.</li>\n * <li>Makes the verification error easier to read because the <b>field name</b>\n * is used to identify the mock.</li>\n * </ul>\n *\n * <pre>\n *   public class ArticleManagerTest {\n *\n *       &#064;Mock private ArticleCalculator calculator;\n *       &#064;Mock private ArticleDatabase database;\n *       &#064;Mock private UserProvider userProvider;\n *\n *       private ArticleManager manager;\n * </pre>\n *\n * <b>Important!</b> This needs to be somewhere in the base class or a test\n * runner:\n *\n * <pre>\n * MockitoAnnotations.initMocks(testClass);\n * </pre>\n *\n * You can use built-in runner: {@link MockitoJUnitRunner}.\n * <p>\n * Read more here: {@link MockitoAnnotations}\n *\n * <h3 id=\"10\"> 10. Stubbing consecutive calls (iterator-style stubbing)</h3>\n *\n * Sometimes we need to stub with different return value/exception for the same\n * method call. Typical use case could be mocking iterators.\n * Original version of Mockito did not have this feature to promote simple mocking.\n * For example, instead of iterators one could use {@link Iterable} or simply\n * collections. Those offer natural ways of stubbing (e.g. using real\n * collections). In rare scenarios stubbing consecutive calls could be useful,\n * though:\n * <p>\n *\n * <pre>\n * when(mock.someMethod(\"some arg\"))\n *   .thenThrow(new RuntimeException())\n *   .thenReturn(\"foo\");\n *\n * //First call: throws runtime exception:\n * mock.someMethod(\"some arg\");\n *\n * //Second call: prints \"foo\"\n * System.out.println(mock.someMethod(\"some arg\"));\n *\n * //Any consecutive call: prints \"foo\" as well (last stubbing wins).\n * System.out.println(mock.someMethod(\"some arg\"));\n * </pre>\n *\n * Alternative, shorter version of consecutive stubbing:\n *\n * <pre>\n * when(mock.someMethod(\"some arg\"))\n *   .thenReturn(\"one\", \"two\", \"three\");\n * </pre>\n *\n * <h3 id=\"11\"> 11. Stubbing with callbacks</h3>\n *\n * Allows stubbing with generic {@link Answer} interface.\n *  <p>\n * Yet another controversial feature which was not included in Mockito\n * originally. We recommend using simple stubbing with thenReturn() or\n * thenThrow() only. Those two should be <b>just enough</b> to test/test-drive\n * any clean & simple code.\n *\n * <pre>\n * when(mock.someMethod(anyString())).thenAnswer(new Answer() {\n *     Object answer(InvocationOnMock invocation) {\n *         Object[] args = invocation.getArguments();\n *         Object mock = invocation.getMock();\n *         return \"called with arguments: \" + args;\n *     }\n * });\n *\n * //Following prints \"called with arguments: foo\"\n * System.out.println(mock.someMethod(\"foo\"));\n * </pre>\n *\n * <h3 id=\"12\"> 12. doThrow()|doAnswer()|doNothing()|doReturn() family of methods for stubbing voids (mostly)</h3>\n *\n * Stubbing voids requires different approach from {@link Mockito#when(Object)} because the compiler does not like void methods inside brackets...\n * <p>\n * {@link Mockito#doThrow(Throwable)} replaces the {@link Mockito#stubVoid(Object)} method for stubbing voids.\n * The main reason is improved readability and consistency with the family of doAnswer() methods.\n * <p>\n * Use doThrow() when you want to stub a void method with an exception:\n * <pre>\n *   doThrow(new RuntimeException()).when(mockedList).clear();\n *\n *   //following throws RuntimeException:\n *   mockedList.clear();\n * </pre>\n *\n * Read more about other methods:\n * <p>\n * {@link Mockito#doThrow(Throwable)}\n * <p>\n * {@link Mockito#doAnswer(Answer)}\n * <p>\n * {@link Mockito#doNothing()}\n * <p>\n * {@link Mockito#doReturn(Object)}\n *\n * <h3 id=\"13\"> 13. Spying on real objects</h3>\n *\n * You can create spies of real objects. When you use the spy then the <b>real</b> methods are called (unless a method was stubbed).\n * <p>\n * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n *\n * <p>\n * Spying on real objects can be associated with \"partial mocking\" concept.\n * <b>Before the release 1.8</b>, Mockito spies were not real partial mocks.\n * The reason was we thought partial mock is a code smell.\n * At some point we found legitimate use cases for partial mocks\n * (3rd party interfaces, interim refactoring of legacy code, the full article is <a href=\n * \"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\"\n * >here</a>)\n * <p>\n *\n * <pre>\n *   List list = new LinkedList();\n *   List spy = spy(list);\n *\n *   //optionally, you can stub out some methods:\n *   when(spy.size()).thenReturn(100);\n *\n *   //using the spy calls <b>real</b> methods\n *   spy.add(\"one\");\n *   spy.add(\"two\");\n *\n *   //prints \"one\" - the first element of a list\n *   System.out.println(spy.get(0));\n *\n *   //size() method was stubbed - 100 is printed\n *   System.out.println(spy.size());\n *\n *   //optionally, you can verify\n *   verify(spy).add(\"one\");\n *   verify(spy).add(\"two\");\n * </pre>\n *\n * <h4>Important gotcha on spying real objects!</h4>\n *\n * 1. Sometimes it's impossible to use {@link Mockito#when(Object)} for stubbing spies. Example:\n *\n * <pre>\n *   List list = new LinkedList();\n *   List spy = spy(list);\n *\n *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n *   when(spy.get(0)).thenReturn(\"foo\");\n *\n *   //You have to use doReturn() for stubbing\n *   doReturn(\"foo\").when(spy).get(0);\n * </pre>\n *\n * 2. Watch out for final methods.\n * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n *\n * <h3 id=\"14\">14. Changing default return values of unstubbed invocations (Since 1.7) </h3>\n *\n * You can create a mock with specified strategy for its return values.\n * It's quite advanced feature and typically you don't need it to write decent tests.\n * However, it can be helpful for working with <b>legacy systems</b>.\n * <p>\n * It is the default answer so it will be used <b>only when you don't</b> stub the method call.\n *\n * <pre>\n *   Foo mock = mock(Foo.class, Mockito.RETURNS_SMART_NULLS);\n *   Foo mockTwo = mock(Foo.class, new YourOwnAnswer());\n * </pre>\n *\n * <p>\n * Read more about this interesting implementation of <i>Answer</i>: {@link Mockito#RETURNS_SMART_NULLS}\n *\n * <h3 id=\"15\">15. Capturing arguments for further assertions (Since 1.8.0) </h3>\n *\n * Mockito verifies argument values in natural java style: by using an equals() method.\n * This is also the recommended way of matching arguments because it makes tests clean & simple.\n * In some situations though, it is helpful to assert on certain arguments after the actual verification.\n * For example:\n * <pre>\n *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);\n *   verify(mock).doSomething(argument.capture());\n *   assertEquals(\"John\", argument.getValue().getName());\n * </pre>\n *\n * <b>Warning:</b> it is recommended to use ArgumentCaptor with verification <b>but not</b> with stubbing.\n * Using ArgumentCaptor with stubbing may decrease test readability because captor is created outside of assert (aka verify or 'then') block.\n * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.\n * <p>\n * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).\n * Both techniques can be used for making sure certain arguments where passed to mocks.\n * However, ArgumentCaptor may be a better fit if:\n * <ul>\n * <li>custom argument matcher is not likely to be reused</li>\n * <li>you just need it to assert on argument values to complete verification</li>\n * </ul>\n * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.\n *\n * <h3 id=\"16\">16. Real partial mocks (Since 1.8.0) </h3>\n *\n *  Finally, after many internal debates & discussions on the mailing list, partial mock support was added to Mockito.\n *  Previously we considered partial mocks as code smells. However, we found a legitimate use case for partial mocks - more reading:\n *  <a href=\"http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring\">here</a>\n *  <p>\n *  <b>Before release 1.8</b> spy() was not producing real partial mocks and it was confusing for some users.\n *  Read more about spying: <a href=\"#13\">here</a> or in javadoc for {@link Mockito#spy(Object)} method.\n *  <p>\n *  <pre>\n *    //you can create partial mock with spy() method:\n *    List list = spy(new LinkedList());\n *\n *    //you can enable partial mock capabilities selectively on mocks:\n *    Foo mock = mock(Foo.class);\n *    //Be sure the real implementation is 'safe'.\n *    //If real implementation throws exceptions or depends on specific state of the object then you're in trouble.\n *    when(mock.someMethod()).thenCallRealMethod();\n *  </pre>\n *\n * As usual you are going to read <b>the partial mock warning</b>:\n * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n * How does partial mock fit into this paradigm? Well, it just doesn't...\n * Partial mock usually means that the complexity has been moved to a different method on the same object.\n * In most cases, this is not the way you want to design your application.\n * <p>\n * However, there are rare cases when partial mocks come handy:\n * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n *\n * <h3 id=\"17\">17. Resetting mocks (Since 1.8.0) </h3>\n *\n * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.\n * Normally, you don't need to reset your mocks, just create new mocks for each test method.\n * <p>\n * Instead of reset() please consider writing simple, small and focused test methods over lengthy, over-specified tests.\n * <b>First potential code smell is reset() in the middle of the test method.</b> This probably means you're testing too much.\n * Follow the whisper of your test methods: \"Please keep us small & focused on single behavior\".\n * There are several threads about it on mockito mailing list.\n * <p>\n * The only reason we added reset() method is to\n * make it possible to work with container-injected mocks.\n * See issue 55 (<a href=\"http://code.google.com/p/mockito/issues/detail?id=55\">here</a>)\n * or FAQ (<a href=\"http://code.google.com/p/mockito/wiki/FAQ\">here</a>).\n * <p>\n * <b>Don't harm yourself.</b> reset() in the middle of the test method is a code smell (you're probably testing too much).\n * <pre>\n *   List mock = mock(List.class);\n *   when(mock.size()).thenReturn(10);\n *   mock.add(1);\n *\n *   reset(mock);\n *   //at this point the mock forgot any interactions & stubbing\n * </pre>\n *\n * <h3 id=\"18\">18. Troubleshooting & validating framework usage (Since 1.8.0) </h3>\n *\n * First of all, in case of any trouble, I encourage you to read the Mockito FAQ:\n * <a href=\"http://code.google.com/p/mockito/wiki/FAQ\">http://code.google.com/p/mockito/wiki/FAQ</a>\n * <p>\n * In case of questions you may also post to mockito mailing list:\n * <a href=\"http://groups.google.com/group/mockito\">http://groups.google.com/group/mockito</a>\n * <p>\n * Next, you should know that Mockito validates if you use it correctly <b>all the time</b>.\n * However, there's a gotcha so please read the javadoc for {@link Mockito#validateMockitoUsage()}\n *\n * <h3 id=\"19\">19. Aliases for behavior driven development (Since 1.8.0) </h3>\n *\n * Behavior Driven Development style of writing tests uses <b>//given //when //then</b> comments as fundamental parts of your test methods.\n * This is exactly how we write our tests and we warmly encourage you to do so!\n * <p>\n * Start learning about BDD here: <a href=\"http://en.wikipedia.org/wiki/Behavior_Driven_Development\">http://en.wikipedia.org/wiki/Behavior_Driven_Development</a>\n * <p>\n * The problem is that current stubbing api with canonical role of <b>when</b> word does not integrate nicely with <b>//given //when //then</b> comments.\n * It's because stubbing belongs to <b>given</b> component of the test and not to the <b>when</b> component of the test.\n * Hence {@link BDDMockito} class introduces an alias so that you stub method calls with {@link BDDMockito#given(Object)} method.\n * Now it really nicely integrates with the <b>given</b> component of a BDD style test!\n * <p>\n * Here is how the test might look like:\n * <pre>\n * import static org.mockito.BDDMockito.*;\n *\n * Seller seller = mock(Seller.class);\n * Shop shop = new Shop(seller);\n *\n * public void shouldBuyBread() throws Exception {\n *   //given\n *   given(seller.askForBread()).willReturn(new Bread());\n *\n *   //when\n *   Goods goods = shop.buyBread();\n *\n *   //then\n *   assertThat(goods, containBread());\n * }\n * </pre>\n *\n * <h3 id=\"20\">20. (**New**) Serializable mocks (Since 1.8.1) </h3>\n *\n * Mocks can be made serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.\n * <p>\n * WARNING: This should be rarely used in unit testing.\n * <p>\n * The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This\n * was in a web environment and the objects from the external dependency were being serialized to pass between layers.\n * <p>\n * To create serializable mock use {@link MockSettings#serializable()}:\n * <pre>\n *   List serializableMock = mock(List.class, withSettings().serializable());\n * </pre>\n * <p>\n * The mock can be serialized assuming all the normal <a href='http://java.sun.com/j2se/1.5.0/docs/api/java/io/Serializable.html'>\n * serialization requirements</a> are met by the class.\n * <p>\n * Making a real object spy serializable is a bit more effort as the spy(...) method does not have an overloaded version\n * which accepts MockSettings. No worries, you will hardly ever use it.\n *\n * <pre>\n * List<Object> list = new ArrayList<Object>();\n * List<Object> spy = mock(ArrayList.class, withSettings()\n *                 .spiedInstance(list)\n *                 .defaultAnswer(CALLS_REAL_METHODS)\n *                 .serializable());\n * </pre>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_16/src/org/mockito/Mockito.java",
        "span_end": 899,
        "name": "Mockito",
        "start_line": 618,
        "span_start": 899,
        "bug_name": "Mockito_16",
        "type": "class",
        "end_line": 1569
      }
    ]
  },
  "Mockito_17": {
    "bug_count": 3,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_17/src/org/mockito/internal/creation/MockSettingsImpl.java",
        "span_end": 22,
        "name": "MockSettingsImpl",
        "start_line": 12,
        "span_start": 20,
        "bug_name": "Mockito_17",
        "type": "class",
        "end_line": 80
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_17/src/org/mockito/internal/creation/MockSettingsImpl.java",
        "span_end": 74,
        "name": "MockSettingsImpl",
        "start_line": 12,
        "span_start": 74,
        "bug_name": "Mockito_17",
        "type": "class",
        "end_line": 80
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_17/src/org/mockito/internal/util/MockUtil.java",
        "span_end": 45,
        "name": "MockUtil",
        "start_line": 20,
        "span_start": 45,
        "bug_name": "Mockito_17",
        "type": "class",
        "end_line": 98
      }
    ]
  },
  "Mockito_19": {
    "bug_count": 7,
    "entries": [
      {
        "javadoc": "/**\n * This node returns an actual injecter which will be either :\n *\n * <ul>\n * <li>an {@link OngoingInjecter} that do nothing if a candidate couldn't be found</li>\n * <li>an {@link OngoingInjecter} that will try to inject the candidate trying first the property setter then if not possible try the field access</li>\n * </ul>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_19/src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java",
        "span_end": 23,
        "name": "FinalMockCandidateFilter",
        "start_line": 22,
        "span_start": 23,
        "bug_name": "Mockito_19",
        "type": "class",
        "end_line": 48
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_19/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java",
        "span_end": 23,
        "name": "NameBasedCandidateFilter",
        "start_line": 14,
        "span_start": 23,
        "bug_name": "Mockito_19",
        "type": "class",
        "end_line": 45
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_19/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java",
        "span_end": 31,
        "name": "NameBasedCandidateFilter",
        "start_line": 14,
        "span_start": 31,
        "bug_name": "Mockito_19",
        "type": "class",
        "end_line": 45
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_19/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java",
        "span_end": 42,
        "name": "NameBasedCandidateFilter",
        "start_line": 14,
        "span_start": 42,
        "bug_name": "Mockito_19",
        "type": "class",
        "end_line": 45
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_19/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java",
        "span_end": 20,
        "name": "TypeBasedCandidateFilter",
        "start_line": 12,
        "span_start": 20,
        "bug_name": "Mockito_19",
        "type": "class",
        "end_line": 30
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_19/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java",
        "span_end": 27,
        "name": "TypeBasedCandidateFilter",
        "start_line": 12,
        "span_start": 28,
        "bug_name": "Mockito_19",
        "type": "class",
        "end_line": 30
      },
      {
        "javadoc": "/**\n * Inject mocks using first setters then fields, if no setters available.\n *\n * <p>\n * <u>Algorithm :<br></u>\n * for each field annotated by @InjectMocks\n *   <ul>\n *   <li>initialize field annotated by @InjectMocks\n *   <li>for each fields of a class in @InjectMocks type hierarchy\n *     <ul>\n *     <li>make a copy of mock candidates\n *     <li>order fields from sub-type to super-type, then by field name\n *     <li>for the list of fields in a class try two passes of :\n *         <ul>\n *             <li>find mock candidate by type\n *             <li>if more than <b>*one*</b> candidate find mock candidate on name\n *             <li>if one mock candidate then\n *                 <ul>\n *                     <li>set mock by property setter if possible\n *                     <li>else set mock by field injection\n *                 </ul>\n *             <li>remove mock from mocks copy (mocks are just injected once in a class)\n *             <li>remove injected field from list of class fields\n *         </ul>\n *     <li>else don't fail, user will then provide dependencies\n *     </ul>\n *   </ul>\n * </p>\n *\n * <p>\n * <u>Note:</u> If the field needing injection is not initialized, the strategy tries\n * to create one using a no-arg constructor of the field type.\n * </p>\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_19/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java",
        "span_end": 114,
        "name": "PropertyAndSetterInjection",
        "start_line": 60,
        "span_start": 114,
        "bug_name": "Mockito_19",
        "type": "class",
        "end_line": 130
      }
    ]
  },
  "Mockito_20": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_20/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
        "span_end": 34,
        "name": "ByteBuddyMockMaker",
        "start_line": 14,
        "span_start": 32,
        "bug_name": "Mockito_20",
        "type": "class",
        "end_line": 109
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_20/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
        "span_end": 45,
        "name": "ByteBuddyMockMaker",
        "start_line": 14,
        "span_start": 45,
        "bug_name": "Mockito_20",
        "type": "class",
        "end_line": 109
      }
    ]
  },
  "Mockito_21": {
    "bug_count": 2,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_21/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java",
        "span_end": 28,
        "name": "ConstructorInstantiator",
        "start_line": 5,
        "span_start": 17,
        "bug_name": "Mockito_21",
        "type": "class",
        "end_line": 45
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_21/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java",
        "span_end": 35,
        "name": "ConstructorInstantiator",
        "start_line": 5,
        "span_start": 36,
        "bug_name": "Mockito_21",
        "type": "class",
        "end_line": 45
      }
    ]
  },
  "Mockito_23": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 51,
        "name": "ReturnsDeepStubs",
        "start_line": 40,
        "span_start": 44,
        "bug_name": "Mockito_23",
        "type": "class",
        "end_line": 130
      },
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 59,
        "name": "ReturnsDeepStubs",
        "start_line": 40,
        "span_start": 59,
        "bug_name": "Mockito_23",
        "type": "class",
        "end_line": 130
      },
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 99,
        "name": "ReturnsDeepStubs",
        "start_line": 40,
        "span_start": 100,
        "bug_name": "Mockito_23",
        "type": "class",
        "end_line": 130
      },
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 114,
        "name": "ReturnsDeepStubs",
        "start_line": 40,
        "span_start": 114,
        "bug_name": "Mockito_23",
        "type": "class",
        "end_line": 130
      },
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 123,
        "name": "ReturnsDeepStubs",
        "start_line": 40,
        "span_start": 123,
        "bug_name": "Mockito_23",
        "type": "class",
        "end_line": 130
      }
    ]
  },
  "Mockito_25": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_25/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 56,
        "name": "ReturnsDeepStubs",
        "start_line": 38,
        "span_start": 53,
        "bug_name": "Mockito_25",
        "type": "class",
        "end_line": 98
      },
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_25/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 68,
        "name": "ReturnsDeepStubs",
        "start_line": 38,
        "span_start": 68,
        "bug_name": "Mockito_25",
        "type": "class",
        "end_line": 98
      },
      {
        "javadoc": "/**\n * Returning deep stub implementation.\n *\n * Will return previously created mock if the invocation matches.\n *\n * <p>Supports nested generic information, with this answer you can write code like this :\n *\n * <pre class=\"code\"><code class=\"java\">\n *     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}\n *\n *     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());\n *     Number number = mock.entrySet().iterator().next().getValue().iterator().next();\n * </code></pre>\n * </p>\n *\n * @see org.mockito.Mockito#RETURNS_DEEP_STUBS\n * @see org.mockito.Answers#RETURNS_DEEP_STUBS\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_25/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 83,
        "name": "ReturnsDeepStubs",
        "start_line": 38,
        "span_start": 77,
        "bug_name": "Mockito_25",
        "type": "class",
        "end_line": 98
      }
    ]
  },
  "Mockito_30": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Reports verification and misusing errors.\n * <p>\n * One of the key points of mocking library is proper verification/exception\n * messages. All messages in one place makes it easier to tune and amend them.\n * <p>\n * Reporter can be injected and therefore is easily testable.\n * <p>\n * Generally, exception messages are full of line breaks to make them easy to\n * read (xunit plugins take only fraction of screen on modern IDEs).\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_30/src/org/mockito/exceptions/Reporter.java",
        "span_end": 441,
        "name": "Reporter",
        "start_line": 46,
        "span_start": 438,
        "bug_name": "Mockito_30",
        "type": "class",
        "end_line": 553
      },
      {
        "javadoc": "/**\n * Optional Answer that can be used with\n * {@link Mockito#mock(Class, Answer)}\n * <p>\n * This implementation can be helpful when working with legacy code. Unstubbed\n * methods often return null. If your code uses the object returned by an\n * unstubbed call you get a NullPointerException. This implementation of\n * Answer returns SmartNulls instead of nulls.\n * SmartNull gives nicer exception message than NPE because it points out the\n * line where unstubbed method was called. You just click on the stack trace.\n * <p>\n * ReturnsSmartNulls first tries to return ordinary return values (see\n * {@link ReturnsMoreEmptyValues}) then it tries to return SmartNull. If the\n * return type is not mockable (e.g. final) then ordinary null is returned.\n * <p>\n * ReturnsSmartNulls will be probably the default return values strategy in\n * Mockito 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_30/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "span_end": 56,
        "name": "ReturnsSmartNulls",
        "start_line": 39,
        "span_start": 56,
        "bug_name": "Mockito_30",
        "type": "class",
        "end_line": 79
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_30/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "span_end": 56,
        "name": "ThrowingInterceptor",
        "start_line": 43,
        "span_start": 56,
        "bug_name": "Mockito_30",
        "type": "class",
        "end_line": 64
      }
    ]
  },
  "Mockito_31": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * Optional Answer that can be used with\n * {@link Mockito#mock(Class, Answer)}\n * <p>\n * This implementation can be helpful when working with legacy code. Unstubbed\n * methods often return null. If your code uses the object returned by an\n * unstubbed call you get a NullPointerException. This implementation of\n * Answer returns SmartNulls instead of nulls.\n * SmartNull gives nicer exception message than NPE because it points out the\n * line where unstubbed method was called. You just click on the stack trace.\n * <p>\n * ReturnsSmartNulls first tries to return ordinary return values (see\n * {@link ReturnsMoreEmptyValues}) then it tries to return SmartNull. If the\n * return type is not mockable (e.g. final) then ordinary null is returned.\n * <p>\n * ReturnsSmartNulls will be probably the default return values strategy in\n * Mockito 2.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_31/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "span_end": 60,
        "name": "ReturnsSmartNulls",
        "start_line": 38,
        "span_start": 60,
        "bug_name": "Mockito_31",
        "type": "class",
        "end_line": 77
      },
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_31/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "span_end": 60,
        "name": "ThrowingInterceptor",
        "start_line": 42,
        "span_start": 60,
        "bug_name": "Mockito_31",
        "type": "class",
        "end_line": 62
      }
    ]
  },
  "Mockito_32": {
    "bug_count": 1,
    "entries": [
      {
        "file": "/Users/danielding/WORK_DIR/Mockito_32/src/org/mockito/internal/configuration/SpyAnnotationEngine.java",
        "span_end": 49,
        "name": "SpyAnnotationEngine",
        "start_line": 20,
        "span_start": 49,
        "bug_name": "Mockito_32",
        "type": "class",
        "end_line": 68
      }
    ]
  },
  "Mockito_35": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre>\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre>\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </pre>\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre>\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre>\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_35/src/org/mockito/Matchers.java",
        "span_end": 362,
        "name": "Matchers",
        "start_line": 92,
        "span_start": 362,
        "bug_name": "Mockito_35",
        "type": "class",
        "end_line": 719
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre>\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre>\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </pre>\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre>\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre>\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_35/src/org/mockito/Matchers.java",
        "span_end": 479,
        "name": "Matchers",
        "start_line": 92,
        "span_start": 479,
        "bug_name": "Mockito_35",
        "type": "class",
        "end_line": 719
      },
      {
        "javadoc": "/**\n * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.\n * <p>\n * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.\n * <pre>\n *  //stubbing using anyInt() argument matcher\n *  when(mockedList.get(anyInt())).thenReturn(\"element\");\n *\n *  //following prints \"element\"\n *  System.out.println(mockedList.get(999));\n *\n *  //you can also verify using argument matcher\n *  verify(mockedList).get(anyInt());\n * </pre>\n * Scroll down to see all methods - full list of matchers.\n * <p>\n * <b>Warning:</b>\n * <p>\n * If you are using argument matchers, <b>all arguments</b> have to be provided by matchers.\n * <p>\n * E.g: (example shows verification but the same applies to stubbing):\n * <pre>\n *   verify(mock).someMethod(anyInt(), anyString(), <b>eq(\"third argument\")</b>);\n *   //above is correct - eq() is also an argument matcher\n *\n *   verify(mock).someMethod(anyInt(), anyString(), <b>\"third argument\"</b>);\n *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.\n * </pre>\n *\n * <h1>Custom Argument Matchers</h1>\n *\n * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.\n * <p>\n * Before you start implementing your own custom argument matcher, make sure you check out {@link ArgumentCaptor} api.\n * <p>\n * So, how to implement your own argument matcher?\n * First, you might want to subclass {@link ArgumentMatcher} which is an hamcrest matcher with predefined describeTo() method.\n * Default description generated by describeTo() uses <b>decamelized class name</b> - to promote meaningful class names.\n * <p>\n * Example:\n *\n * <pre>\n *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {\n *      public boolean matches(Object list) {\n *          return ((List) list).size() == 2;\n *      }\n *   }\n *\n *   List mock = mock(List.class);\n *\n *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);\n *\n *   mock.addAll(Arrays.asList(\"one\", \"two\"));\n *\n *   verify(mock).addAll(argThat(new IsListOfTwoElements()));\n * </pre>\n *\n * To keep it readable you may want to extract method, e.g:\n * <pre>\n *   verify(mock).addAll(<b>argThat(new IsListOfTwoElements())</b>);\n *   //becomes\n *   verify(mock).addAll(<b>listOfTwoElements()</b>);\n * </pre>\n *\n * <b>Warning:</b> Be reasonable with using complicated argument matching, especially custom argument matchers, as it can make the test less readable.\n * Sometimes it's better to implement equals() for arguments that are passed to mocks\n * (Mockito naturally uses equals() for argument matching).\n * This can make the test cleaner.\n * <p>\n * Also, <b>sometimes {@link ArgumentCaptor} may be a better fit</b> than custom matcher.\n * For example, if custom argument matcher is not likely to be reused\n * or you just need it to assert on argument values to complete verification of behavior.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_35/src/org/mockito/Matchers.java",
        "span_end": 516,
        "name": "Matchers",
        "start_line": 92,
        "span_start": 516,
        "bug_name": "Mockito_35",
        "type": "class",
        "end_line": 719
      }
    ]
  },
  "Mockito_36": {
    "bug_count": 1,
    "entries": [
      {
        "javadoc": "/**\n * Method call on a mock object.\n * <p>\n * Contains sequence number which should be globally unique and is used for\n * verification in order.\n * <p>\n * Contains stack trace of invocation\n */\n",
        "file": "/Users/danielding/WORK_DIR/Mockito_36/src/org/mockito/internal/invocation/Invocation.java",
        "span_end": 201,
        "name": "Invocation",
        "start_line": 27,
        "span_start": 202,
        "bug_name": "Mockito_36",
        "type": "class",
        "end_line": 217
      }
    ]
  },
  "Time_1": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * A placeholder implementation to use when a duration field is not supported.\n * <p>\n * UnsupportedDurationField is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_1/src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "span_end": 229,
        "name": "UnsupportedDurationField",
        "start_line": 32,
        "span_start": 227,
        "bug_name": "Time_1",
        "type": "class",
        "end_line": 282
      },
      {
        "javadoc": "/**\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_1/src/main/java/org/joda/time/Partial.java",
        "span_end": 221,
        "name": "Partial",
        "start_line": 68,
        "span_start": 217,
        "bug_name": "Time_1",
        "type": "class",
        "end_line": 1003
      }
    ]
  },
  "Time_2": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * A placeholder implementation to use when a duration field is not supported.\n * <p>\n * UnsupportedDurationField is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_2/src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "span_end": 226,
        "name": "UnsupportedDurationField",
        "start_line": 32,
        "span_start": 227,
        "bug_name": "Time_2",
        "type": "class",
        "end_line": 279
      },
      {
        "javadoc": "/**\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_2/src/main/java/org/joda/time/Partial.java",
        "span_end": 218,
        "name": "Partial",
        "start_line": 68,
        "span_start": 218,
        "bug_name": "Time_2",
        "type": "class",
        "end_line": 1000
      },
      {
        "javadoc": "/**\n * Partial is an immutable partial datetime supporting any set of datetime fields.\n * <p>\n * A Partial instance can be used to hold any combination of fields.\n * The instance does not contain a time zone, so any datetime is local.\n * <p>\n * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.\n * This method compares each field on this partial with those of the instant\n * and determines if the partial matches the instant.\n * Given this definition, an empty Partial instance represents any datetime\n * and always matches.\n * <p>\n * Calculations on Partial are performed using a {@link Chronology}.\n * This chronology is set to be in the UTC time zone for all calculations.\n * <p>\n * Each individual field can be queried in two ways:\n * <ul>\n * <li><code>get(DateTimeFieldType.monthOfYear())</code>\n * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value - <code>monthOfYear().get()</code>\n * <li>text value - <code>monthOfYear().getAsText()</code>\n * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n * <li>set - <code>monthOfYear().setCopy()</code>\n * </ul>\n * <p>\n * Partial is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.1\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_2/src/main/java/org/joda/time/Partial.java",
        "span_end": 448,
        "name": "Partial",
        "start_line": 68,
        "span_start": 449,
        "bug_name": "Time_2",
        "type": "class",
        "end_line": 1000
      }
    ]
  },
  "Time_3": {
    "bug_count": 10,
    "entries": [
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 639,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 639,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 660,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 660,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 681,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 681,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 702,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 702,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 723,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 723,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 764,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 764,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 785,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 785,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 816,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 816,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 847,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 847,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      },
      {
        "javadoc": "/**\n * MutableDateTime is the standard implementation of a modifiable datetime class.\n * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.\n * <p>\n * This class uses a Chronology internally. The Chronology determines how the\n * millisecond instant value is converted into the date time fields.\n * The default Chronology is <code>ISOChronology</code> which is the agreed\n * international standard and compatible with the modern Gregorian calendar.\n * <p>\n * Each individual field can be accessed in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>get numeric value\n * <li>set numeric value\n * <li>add to numeric value\n * <li>add to numeric value wrapping with the field\n * <li>get text value\n * <li>get short text value\n * <li>set text value\n * <li>field maximum value\n * <li>field minimum value\n * </ul>\n *\n * <p>\n * MutableDateTime is mutable and not thread-safe, unless concurrent threads\n * are not invoking mutator methods.\n *\n * @author Guy Allard\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @author Mike Schrag\n * @since 1.0\n * @see DateTime\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 880,
        "name": "MutableDateTime",
        "start_line": 72,
        "span_start": 880,
        "bug_name": "Time_3",
        "type": "class",
        "end_line": 1466
      }
    ]
  },
  "Time_6": {
    "bug_count": 5,
    "entries": [
      {
        "javadoc": "/**\n * Implements the Gregorian/Julian calendar system which is the calendar system\n * used in most of the world. Wherever possible, it is recommended to use the\n * {@link ISOChronology} instead.\n * <p>\n * The Gregorian calendar replaced the Julian calendar, and the point in time\n * when this chronology switches can be controlled using the second parameter\n * of the getInstance method. By default this cutover is set to the date the\n * Gregorian calendar was first instituted, October 15, 1582.\n * <p>\n * Before this date, this chronology uses the proleptic Julian calendar\n * (proleptic means extending indefinitely). The Julian calendar has leap years\n * every four years, whereas the Gregorian has special rules for 100 and 400\n * years. A meaningful result will thus be obtained for all input values.\n * However before 8 CE, Julian leap years were irregular, and before 45 BCE\n * there was no Julian calendar.\n * <p>\n * This chronology differs from\n * {@link java.util.GregorianCalendar GregorianCalendar} in that years\n * in BCE are returned correctly. Thus year 1 BCE is returned as -1 instead of 1.\n * The yearOfEra field produces results compatible with GregorianCalendar.\n * <p>\n * The Julian calendar does not have a year zero, and so year -1 is followed by\n * year 1. If the Gregorian cutover date is specified at or before year -1\n * (Julian), year zero is defined. In other words, the proleptic Gregorian\n * chronology used by this class has a year zero.\n * <p>\n * To create a pure proleptic Julian chronology, use {@link JulianChronology},\n * and to create a pure proleptic Gregorian chronology, use\n * {@link GregorianChronology}.\n * <p>\n * GJChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_6/src/main/java/org/joda/time/chrono/GJChronology.java",
        "span_end": 195,
        "name": "GJChronology",
        "start_line": 75,
        "span_start": 196,
        "bug_name": "Time_6",
        "type": "class",
        "end_line": 1115
      },
      {
        "javadoc": "/**\n * Implements the Gregorian/Julian calendar system which is the calendar system\n * used in most of the world. Wherever possible, it is recommended to use the\n * {@link ISOChronology} instead.\n * <p>\n * The Gregorian calendar replaced the Julian calendar, and the point in time\n * when this chronology switches can be controlled using the second parameter\n * of the getInstance method. By default this cutover is set to the date the\n * Gregorian calendar was first instituted, October 15, 1582.\n * <p>\n * Before this date, this chronology uses the proleptic Julian calendar\n * (proleptic means extending indefinitely). The Julian calendar has leap years\n * every four years, whereas the Gregorian has special rules for 100 and 400\n * years. A meaningful result will thus be obtained for all input values.\n * However before 8 CE, Julian leap years were irregular, and before 45 BCE\n * there was no Julian calendar.\n * <p>\n * This chronology differs from\n * {@link java.util.GregorianCalendar GregorianCalendar} in that years\n * in BCE are returned correctly. Thus year 1 BCE is returned as -1 instead of 1.\n * The yearOfEra field produces results compatible with GregorianCalendar.\n * <p>\n * The Julian calendar does not have a year zero, and so year -1 is followed by\n * year 1. If the Gregorian cutover date is specified at or before year -1\n * (Julian), year zero is defined. In other words, the proleptic Gregorian\n * chronology used by this class has a year zero.\n * <p>\n * To create a pure proleptic Julian chronology, use {@link JulianChronology},\n * and to create a pure proleptic Gregorian chronology, use\n * {@link GregorianChronology}.\n * <p>\n * GJChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_6/src/main/java/org/joda/time/chrono/GJChronology.java",
        "span_end": 978,
        "name": "GJChronology",
        "start_line": 75,
        "span_start": 979,
        "bug_name": "Time_6",
        "type": "class",
        "end_line": 1115
      },
      {
        "javadoc": "/**\n * Cutover field for variable length fields. These fields internally call\n * set whenever add is called. As a result, the same correction applied to\n * set must be applied to add and addWrapField. Knowing when to use this\n * field requires specific knowledge of how the GJ fields are implemented.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_6/src/main/java/org/joda/time/chrono/GJChronology.java",
        "span_end": 978,
        "name": "ImpreciseCutoverField",
        "start_line": 936,
        "span_start": 979,
        "bug_name": "Time_6",
        "type": "class",
        "end_line": 1082
      },
      {
        "javadoc": "/**\n * Implements the Gregorian/Julian calendar system which is the calendar system\n * used in most of the world. Wherever possible, it is recommended to use the\n * {@link ISOChronology} instead.\n * <p>\n * The Gregorian calendar replaced the Julian calendar, and the point in time\n * when this chronology switches can be controlled using the second parameter\n * of the getInstance method. By default this cutover is set to the date the\n * Gregorian calendar was first instituted, October 15, 1582.\n * <p>\n * Before this date, this chronology uses the proleptic Julian calendar\n * (proleptic means extending indefinitely). The Julian calendar has leap years\n * every four years, whereas the Gregorian has special rules for 100 and 400\n * years. A meaningful result will thus be obtained for all input values.\n * However before 8 CE, Julian leap years were irregular, and before 45 BCE\n * there was no Julian calendar.\n * <p>\n * This chronology differs from\n * {@link java.util.GregorianCalendar GregorianCalendar} in that years\n * in BCE are returned correctly. Thus year 1 BCE is returned as -1 instead of 1.\n * The yearOfEra field produces results compatible with GregorianCalendar.\n * <p>\n * The Julian calendar does not have a year zero, and so year -1 is followed by\n * year 1. If the Gregorian cutover date is specified at or before year -1\n * (Julian), year zero is defined. In other words, the proleptic Gregorian\n * chronology used by this class has a year zero.\n * <p>\n * To create a pure proleptic Julian chronology, use {@link JulianChronology},\n * and to create a pure proleptic Gregorian chronology, use\n * {@link GregorianChronology}.\n * <p>\n * GJChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_6/src/main/java/org/joda/time/chrono/GJChronology.java",
        "span_end": 1000,
        "name": "GJChronology",
        "start_line": 75,
        "span_start": 1001,
        "bug_name": "Time_6",
        "type": "class",
        "end_line": 1115
      },
      {
        "javadoc": "/**\n * Cutover field for variable length fields. These fields internally call\n * set whenever add is called. As a result, the same correction applied to\n * set must be applied to add and addWrapField. Knowing when to use this\n * field requires specific knowledge of how the GJ fields are implemented.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_6/src/main/java/org/joda/time/chrono/GJChronology.java",
        "span_end": 1000,
        "name": "ImpreciseCutoverField",
        "start_line": 936,
        "span_start": 1001,
        "bug_name": "Time_6",
        "type": "class",
        "end_line": 1082
      }
    ]
  },
  "Time_9": {
    "bug_count": 3,
    "entries": [
      {
        "javadoc": "/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic\n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal\n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time\n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving\n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_9/src/main/java/org/joda/time/DateTimeZone.java",
        "span_end": 95,
        "name": "DateTimeZone",
        "start_line": 88,
        "span_start": 96,
        "bug_name": "Time_9",
        "type": "class",
        "end_line": 1299
      },
      {
        "javadoc": "/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic\n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal\n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time\n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving\n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_9/src/main/java/org/joda/time/DateTimeZone.java",
        "span_end": 266,
        "name": "DateTimeZone",
        "start_line": 88,
        "span_start": 257,
        "bug_name": "Time_9",
        "type": "class",
        "end_line": 1299
      },
      {
        "javadoc": "/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic\n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal\n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time\n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving\n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_9/src/main/java/org/joda/time/DateTimeZone.java",
        "span_end": 281,
        "name": "DateTimeZone",
        "start_line": 88,
        "span_start": 282,
        "bug_name": "Time_9",
        "type": "class",
        "end_line": 1299
      }
    ]
  },
  "Time_10": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * BaseSingleFieldPeriod is an abstract implementation of ReadablePeriod that\n * manages a single duration field, such as days or minutes.\n * <p>\n * This class should generally not be used directly by API users.\n * The {@link ReadablePeriod} interface should be used when different\n * kinds of period objects are to be referenced.\n * <p>\n * BaseSingleFieldPeriod subclasses may be mutable and not thread-safe.\n *\n * @author Stephen Colebourne\n * @since 1.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_10/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
        "span_end": 51,
        "name": "BaseSingleFieldPeriod",
        "start_line": 46,
        "span_start": 52,
        "bug_name": "Time_10",
        "type": "class",
        "end_line": 345
      },
      {
        "javadoc": "/**\n * BaseSingleFieldPeriod is an abstract implementation of ReadablePeriod that\n * manages a single duration field, such as days or minutes.\n * <p>\n * This class should generally not be used directly by API users.\n * The {@link ReadablePeriod} interface should be used when different\n * kinds of period objects are to be referenced.\n * <p>\n * BaseSingleFieldPeriod subclasses may be mutable and not thread-safe.\n *\n * @author Stephen Colebourne\n * @since 1.4\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_10/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
        "span_end": 104,
        "name": "BaseSingleFieldPeriod",
        "start_line": 46,
        "span_start": 104,
        "bug_name": "Time_10",
        "type": "class",
        "end_line": 345
      }
    ]
  },
  "Time_12": {
    "bug_count": 4,
    "entries": [
      {
        "javadoc": "/**\n * LocalDate is an immutable datetime class representing a date\n * without a time zone.\n * <p>\n * LocalDate implements the {@link ReadablePartial} interface.\n * To do this, the interface methods focus on the key fields -\n * Year, MonthOfYear and DayOfMonth.\n * However, <b>all</b> date fields may in fact be queried.\n * <p>\n * LocalDate differs from DateMidnight in that this class does not\n * have a time zone and does not represent a single instant in time.\n * <p>\n * Calculations on LocalDate are performed using a {@link Chronology}.\n * This chronology will be set internally to be in the UTC time zone\n * for all calculations.\n *\n * <p>Each individual field can be queried in two ways:\n * <ul>\n * <li><code>getMonthOfYear()</code>\n * <li><code>monthOfYear().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value\n * <li>text value\n * <li>short text value\n * <li>maximum/minimum values\n * <li>add/subtract\n * <li>set\n * <li>rounding\n * </ul>\n *\n * <p>\n * LocalDate is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.3\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_12/src/main/java/org/joda/time/LocalDate.java",
        "span_end": 212,
        "name": "LocalDate",
        "start_line": 82,
        "span_start": 210,
        "bug_name": "Time_12",
        "type": "class",
        "end_line": 2102
      },
      {
        "javadoc": "/**\n * LocalDate is an immutable datetime class representing a date\n * without a time zone.\n * <p>\n * LocalDate implements the {@link ReadablePartial} interface.\n * To do this, the interface methods focus on the key fields -\n * Year, MonthOfYear and DayOfMonth.\n * However, <b>all</b> date fields may in fact be queried.\n * <p>\n * LocalDate differs from DateMidnight in that this class does not\n * have a time zone and does not represent a single instant in time.\n * <p>\n * Calculations on LocalDate are performed using a {@link Chronology}.\n * This chronology will be set internally to be in the UTC time zone\n * for all calculations.\n *\n * <p>Each individual field can be queried in two ways:\n * <ul>\n * <li><code>getMonthOfYear()</code>\n * <li><code>monthOfYear().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value\n * <li>text value\n * <li>short text value\n * <li>maximum/minimum values\n * <li>add/subtract\n * <li>set\n * <li>rounding\n * </ul>\n *\n * <p>\n * LocalDate is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.3\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_12/src/main/java/org/joda/time/LocalDate.java",
        "span_end": 243,
        "name": "LocalDate",
        "start_line": 82,
        "span_start": 243,
        "bug_name": "Time_12",
        "type": "class",
        "end_line": 2102
      },
      {
        "javadoc": "/**\n * LocalDateTime is an unmodifiable datetime class representing a\n * datetime without a time zone.\n * <p>\n * LocalDateTime implements the {@link ReadablePartial} interface.\n * To do this, certain methods focus on key fields Year, MonthOfYear,\n * DayOfYear and MillisOfDay.\n * However, <b>all</b> fields may in fact be queried.\n * <p>\n * Internally, LocalDateTime uses a single millisecond-based value to\n * represent the local datetime. This value is only used internally and\n * is not exposed to applications.\n * <p>\n * Calculations on LocalDateTime are performed using a {@link Chronology}.\n * This chronology will be set internally to be in the UTC time zone\n * for all calculations.\n *\n * <p>Each individual field can be queried in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value\n * <li>text value\n * <li>short text value\n * <li>maximum/minimum values\n * <li>add/subtract\n * <li>set\n * <li>rounding\n * </ul>\n *\n * <p>\n * LocalDateTime is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.3\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_12/src/main/java/org/joda/time/LocalDateTime.java",
        "span_end": 201,
        "name": "LocalDateTime",
        "start_line": 80,
        "span_start": 199,
        "bug_name": "Time_12",
        "type": "class",
        "end_line": 2327
      },
      {
        "javadoc": "/**\n * LocalDateTime is an unmodifiable datetime class representing a\n * datetime without a time zone.\n * <p>\n * LocalDateTime implements the {@link ReadablePartial} interface.\n * To do this, certain methods focus on key fields Year, MonthOfYear,\n * DayOfYear and MillisOfDay.\n * However, <b>all</b> fields may in fact be queried.\n * <p>\n * Internally, LocalDateTime uses a single millisecond-based value to\n * represent the local datetime. This value is only used internally and\n * is not exposed to applications.\n * <p>\n * Calculations on LocalDateTime are performed using a {@link Chronology}.\n * This chronology will be set internally to be in the UTC time zone\n * for all calculations.\n *\n * <p>Each individual field can be queried in two ways:\n * <ul>\n * <li><code>getHourOfDay()</code>\n * <li><code>hourOfDay().get()</code>\n * </ul>\n * The second technique also provides access to other useful methods on the\n * field:\n * <ul>\n * <li>numeric value\n * <li>text value\n * <li>short text value\n * <li>maximum/minimum values\n * <li>add/subtract\n * <li>set\n * <li>rounding\n * </ul>\n *\n * <p>\n * LocalDateTime is thread-safe and immutable, provided that the Chronology is as well.\n * All standard Chronology classes supplied are thread-safe and immutable.\n *\n * @author Stephen Colebourne\n * @since 1.3\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_12/src/main/java/org/joda/time/LocalDateTime.java",
        "span_end": 236,
        "name": "LocalDateTime",
        "start_line": 80,
        "span_start": 236,
        "bug_name": "Time_12",
        "type": "class",
        "end_line": 2327
      }
    ]
  },
  "Time_13": {
    "bug_count": 6,
    "entries": [
      {
        "javadoc": "/**\n * Factory that creates complex instances of PeriodFormatter via method calls.\n * <p>\n * Period formatting is performed by the {@link PeriodFormatter} class.\n * Three classes provide factory methods to create formatters, and this is one.\n * The others are {@link PeriodFormat} and {@link ISOPeriodFormat}.\n * <p>\n * PeriodFormatterBuilder is used for constructing formatters which are then\n * used to print or parse. The formatters are built by appending specific fields\n * or other formatters to an instance of this builder.\n * <p>\n * For example, a formatter that prints years and months, like \"15 years and 8 months\",\n * can be constructed as follows:\n * <p>\n * <pre>\n * PeriodFormatter yearsAndMonths = new PeriodFormatterBuilder()\n *     .printZeroAlways()\n *     .appendYears()\n *     .appendSuffix(\" year\", \" years\")\n *     .appendSeparator(\" and \")\n *     .printZeroRarelyLast()\n *     .appendMonths()\n *     .appendSuffix(\" month\", \" months\")\n *     .toFormatter();\n * </pre>\n * <p>\n * PeriodFormatterBuilder itself is mutable and not thread-safe, but the\n * formatters that it builds are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n * @see PeriodFormat\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_13/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "span_end": 1098,
        "name": "PeriodFormatterBuilder",
        "start_line": 65,
        "span_start": 1098,
        "bug_name": "Time_13",
        "type": "class",
        "end_line": 1868
      },
      {
        "javadoc": "/**\n * Formats the numeric value of a field, potentially with prefix/suffix.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_13/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "span_end": 1098,
        "name": "FieldFormatter",
        "start_line": 1032,
        "span_start": 1098,
        "bug_name": "Time_13",
        "type": "class",
        "end_line": 1533
      },
      {
        "javadoc": "/**\n * Factory that creates complex instances of PeriodFormatter via method calls.\n * <p>\n * Period formatting is performed by the {@link PeriodFormatter} class.\n * Three classes provide factory methods to create formatters, and this is one.\n * The others are {@link PeriodFormat} and {@link ISOPeriodFormat}.\n * <p>\n * PeriodFormatterBuilder is used for constructing formatters which are then\n * used to print or parse. The formatters are built by appending specific fields\n * or other formatters to an instance of this builder.\n * <p>\n * For example, a formatter that prints years and months, like \"15 years and 8 months\",\n * can be constructed as follows:\n * <p>\n * <pre>\n * PeriodFormatter yearsAndMonths = new PeriodFormatterBuilder()\n *     .printZeroAlways()\n *     .appendYears()\n *     .appendSuffix(\" year\", \" years\")\n *     .appendSeparator(\" and \")\n *     .printZeroRarelyLast()\n *     .appendMonths()\n *     .appendSuffix(\" month\", \" months\")\n *     .toFormatter();\n * </pre>\n * <p>\n * PeriodFormatterBuilder itself is mutable and not thread-safe, but the\n * formatters that it builds are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n * @see PeriodFormat\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_13/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "span_end": 1132,
        "name": "PeriodFormatterBuilder",
        "start_line": 65,
        "span_start": 1133,
        "bug_name": "Time_13",
        "type": "class",
        "end_line": 1868
      },
      {
        "javadoc": "/**\n * Formats the numeric value of a field, potentially with prefix/suffix.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_13/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "span_end": 1132,
        "name": "FieldFormatter",
        "start_line": 1032,
        "span_start": 1133,
        "bug_name": "Time_13",
        "type": "class",
        "end_line": 1533
      },
      {
        "javadoc": "/**\n * Factory that creates complex instances of PeriodFormatter via method calls.\n * <p>\n * Period formatting is performed by the {@link PeriodFormatter} class.\n * Three classes provide factory methods to create formatters, and this is one.\n * The others are {@link PeriodFormat} and {@link ISOPeriodFormat}.\n * <p>\n * PeriodFormatterBuilder is used for constructing formatters which are then\n * used to print or parse. The formatters are built by appending specific fields\n * or other formatters to an instance of this builder.\n * <p>\n * For example, a formatter that prints years and months, like \"15 years and 8 months\",\n * can be constructed as follows:\n * <p>\n * <pre>\n * PeriodFormatter yearsAndMonths = new PeriodFormatterBuilder()\n *     .printZeroAlways()\n *     .appendYears()\n *     .appendSuffix(\" year\", \" years\")\n *     .appendSeparator(\" and \")\n *     .printZeroRarelyLast()\n *     .appendMonths()\n *     .appendSuffix(\" month\", \" months\")\n *     .toFormatter();\n * </pre>\n * <p>\n * PeriodFormatterBuilder itself is mutable and not thread-safe, but the\n * formatters that it builds are thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @since 1.0\n * @see PeriodFormat\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_13/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "span_end": 1141,
        "name": "PeriodFormatterBuilder",
        "start_line": 65,
        "span_start": 1142,
        "bug_name": "Time_13",
        "type": "class",
        "end_line": 1868
      },
      {
        "javadoc": "/**\n * Formats the numeric value of a field, potentially with prefix/suffix.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_13/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "span_end": 1141,
        "name": "FieldFormatter",
        "start_line": 1032,
        "span_start": 1142,
        "bug_name": "Time_13",
        "type": "class",
        "end_line": 1533
      }
    ]
  },
  "Time_23": {
    "bug_count": 2,
    "entries": [
      {
        "javadoc": "/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic\n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal\n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time\n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving\n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_23/src/main/java/org/joda/time/DateTimeZone.java",
        "span_end": 563,
        "name": "DateTimeZone",
        "start_line": 89,
        "span_start": 564,
        "bug_name": "Time_23",
        "type": "class",
        "end_line": 1277
      },
      {
        "javadoc": "/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic\n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal\n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time\n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving\n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_23/src/main/java/org/joda/time/DateTimeZone.java",
        "span_end": 588,
        "name": "DateTimeZone",
        "start_line": 89,
        "span_start": 572,
        "bug_name": "Time_23",
        "type": "class",
        "end_line": 1277
      }
    ]
  },
  "Time_26": {
    "bug_count": 14,
    "entries": [
      {
        "javadoc": "/**\n * Wraps another Chronology to add support for time zones.\n * <p>\n * ZonedChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 436,
        "name": "ZonedChronology",
        "start_line": 42,
        "span_start": 436,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * A DateTimeField that decorates another to add timezone behaviour.\n * <p>\n * This class converts passed in instants to local wall time, and vice\n * versa on output.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 436,
        "name": "ZonedDateTimeField",
        "start_line": 374,
        "span_start": 436,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Wraps another Chronology to add support for time zones.\n * <p>\n * ZonedChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 448,
        "name": "ZonedChronology",
        "start_line": 42,
        "span_start": 448,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * A DateTimeField that decorates another to add timezone behaviour.\n * <p>\n * This class converts passed in instants to local wall time, and vice\n * versa on output.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 448,
        "name": "ZonedDateTimeField",
        "start_line": 374,
        "span_start": 448,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Wraps another Chronology to add support for time zones.\n * <p>\n * ZonedChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 467,
        "name": "ZonedChronology",
        "start_line": 42,
        "span_start": 460,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * A DateTimeField that decorates another to add timezone behaviour.\n * <p>\n * This class converts passed in instants to local wall time, and vice\n * versa on output.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 467,
        "name": "ZonedDateTimeField",
        "start_line": 374,
        "span_start": 460,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Wraps another Chronology to add support for time zones.\n * <p>\n * ZonedChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 481,
        "name": "ZonedChronology",
        "start_line": 42,
        "span_start": 481,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * A DateTimeField that decorates another to add timezone behaviour.\n * <p>\n * This class converts passed in instants to local wall time, and vice\n * versa on output.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 481,
        "name": "ZonedDateTimeField",
        "start_line": 374,
        "span_start": 481,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Wraps another Chronology to add support for time zones.\n * <p>\n * ZonedChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 528,
        "name": "ZonedChronology",
        "start_line": 42,
        "span_start": 528,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * A DateTimeField that decorates another to add timezone behaviour.\n * <p>\n * This class converts passed in instants to local wall time, and vice\n * versa on output.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 528,
        "name": "ZonedDateTimeField",
        "start_line": 374,
        "span_start": 528,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * Wraps another Chronology to add support for time zones.\n * <p>\n * ZonedChronology is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 540,
        "name": "ZonedChronology",
        "start_line": 42,
        "span_start": 540,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 602
      },
      {
        "javadoc": "/**\n * A DateTimeField that decorates another to add timezone behaviour.\n * <p>\n * This class converts passed in instants to local wall time, and vice\n * versa on output.\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 540,
        "name": "ZonedDateTimeField",
        "start_line": 374,
        "span_start": 540,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 600
      },
      {
        "javadoc": "/**\n * DateTimeZone represents a time zone.\n * <p>\n * A time zone is a system of rules to convert time from one geographic\n * location to another. For example, Paris, France is one hour ahead of\n * London, England. Thus when it is 10:00 in London, it is 11:00 in Paris.\n * <p>\n * All time zone rules are expressed, for historical reasons, relative to\n * Greenwich, London. Local time in Greenwich is referred to as Greenwich Mean\n * Time (GMT).  This is similar, but not precisely identical, to Universal\n * Coordinated Time, or UTC. This library only uses the term UTC.\n * <p>\n * Using this system, America/Los_Angeles is expressed as UTC-08:00, or UTC-07:00\n * in the summer. The offset -08:00 indicates that America/Los_Angeles time is\n * obtained from UTC by adding -08:00, that is, by subtracting 8 hours.\n * <p>\n * The offset differs in the summer because of daylight saving time, or DST.\n * The following definitions of time are generally used:\n * <ul>\n * <li>UTC - The reference time.\n * <li>Standard Time - The local time without a daylight saving time offset.\n * For example, in Paris, standard time is UTC+01:00.\n * <li>Daylight Saving Time - The local time with a daylight saving time\n * offset. This offset is typically one hour, but not always. It is typically\n * used in most countries away from the equator.  In Paris, daylight saving\n * time is UTC+02:00.\n * <li>Wall Time - This is what a local clock on the wall reads. This will be\n * either Standard Time or Daylight Saving Time depending on the time of year\n * and whether the location uses Daylight Saving Time.\n * </ul>\n * <p>\n * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only\n * supports long format time zone ids. Thus EST and ECT are not accepted.\n * However, the factory that accepts a TimeZone will attempt to convert from\n * the old short id to a suitable long id.\n * <p>\n * DateTimeZone is thread-safe and immutable, and all subclasses must be as\n * well.\n *\n * @author Brian S O'Neill\n * @author Stephen Colebourne\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/DateTimeZone.java",
        "span_end": 935,
        "name": "DateTimeZone",
        "start_line": 89,
        "span_start": 936,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 1237
      },
      {
        "javadoc": "/**\n * Converts a strict DateTimeField into a lenient one. By being lenient, the\n * set method accepts out of bounds values, performing an addition instead.\n * <p>\n * LenientDateTimeField is thread-safe and immutable.\n *\n * @author Brian S O'Neill\n * @see org.joda.time.chrono.LenientChronology\n * @see StrictDateTimeField\n * @since 1.0\n */\n",
        "file": "/Users/danielding/WORK_DIR/Time_26/src/main/java/org/joda/time/field/LenientDateTimeField.java",
        "span_end": 74,
        "name": "LenientDateTimeField",
        "start_line": 32,
        "span_start": 75,
        "bug_name": "Time_26",
        "type": "class",
        "end_line": 77
      }
    ]
  }
}