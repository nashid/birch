{
  "Chart_2": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Iterates over the items in an {@link XYDataset} to find\n * the range of x-values.\n *\n * @param dataset  the dataset (<code>null</code> not permitted).\n * @param includeInterval  a flag that determines, for an\n *          {@link IntervalXYDataset}, whether the x-interval or just the\n *          x-value is used to determine the overall range.\n *\n * @return The range (possibly <code>null</code>).\n */\n",
        "file": "Chart_2/source/org/jfree/data/general/DatasetUtilities.java",
        "span_end": 760,
        "name": "iterateDomainBounds",
        "start_line": 740,
        "span_start": 755,
        "bug_name": "Chart_2",
        "end_line": 792
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Iterates over the data items of the xy dataset to find\n * the range bounds.\n *\n * @param dataset  the dataset (<code>null</code> not permitted).\n * @param includeInterval  a flag that determines, for an\n *          {@link IntervalXYDataset}, whether the y-interval or just the\n *          y-value is used to determine the overall range.\n *\n * @return The range (possibly <code>null</code>).\n *\n * @since 1.0.10\n */\n",
        "file": "Chart_2/source/org/jfree/data/general/DatasetUtilities.java",
        "span_end": 1247,
        "name": "iterateRangeBounds",
        "start_line": 1236,
        "span_start": 1242,
        "bug_name": "Chart_2",
        "end_line": 1303
      }
    ]
  },
  "Chart_4": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the range for the specified axis.\n *\n * @param axis  the axis.\n *\n * @return The range.\n */\n",
        "file": "Chart_4/source/org/jfree/chart/plot/XYPlot.java",
        "span_end": 4492,
        "name": "getDataRange",
        "start_line": 4425,
        "span_start": 4493,
        "bug_name": "Chart_4",
        "end_line": 4521
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the range for the specified axis.\n *\n * @param axis  the axis.\n *\n * @return The range.\n */\n",
        "file": "Chart_4/source/org/jfree/chart/plot/XYPlot.java",
        "span_end": 4500,
        "name": "getDataRange",
        "start_line": 4425,
        "span_start": 4501,
        "bug_name": "Chart_4",
        "end_line": 4521
      }
    ]
  },
  "Chart_14": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Removes a marker for a specific dataset/renderer and, if requested,\n * sends a {@link PlotChangeEvent} to all registered listeners.\n *\n * @param index the dataset/renderer index.\n * @param marker the marker.\n * @param layer the layer (foreground or background).\n *\n * @return A boolean indicating whether or not the marker was actually\n *         removed.\n *\n * @since 1.0.10\n */\n",
        "file": "Chart_14/source/org/jfree/chart/plot/CategoryPlot.java",
        "span_end": 2165,
        "name": "removeDomainMarker",
        "start_line": 2155,
        "span_start": 2166,
        "bug_name": "Chart_14",
        "end_line": 2174
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Removes a marker for a specific dataset/renderer and sends a\n * {@link PlotChangeEvent} to all registered listeners.\n *\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners.\n *\n * @return A boolean indicating whether or not the marker was actually\n *         removed.\n *\n * @since 1.0.10\n *\n * @see #addRangeMarker(int, Marker, Layer, boolean)\n */\n",
        "file": "Chart_14/source/org/jfree/chart/plot/CategoryPlot.java",
        "span_end": 2447,
        "name": "removeRangeMarker",
        "start_line": 2437,
        "span_start": 2448,
        "bug_name": "Chart_14",
        "end_line": 2459
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Removes a marker for a specific dataset/renderer and, if requested,\n * sends a {@link PlotChangeEvent} to all registered listeners.\n *\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n *\n * @return A boolean indicating whether or not the marker was actually\n *         removed.\n *\n * @since 1.0.10\n */\n",
        "file": "Chart_14/source/org/jfree/chart/plot/XYPlot.java",
        "span_end": 2292,
        "name": "removeDomainMarker",
        "start_line": 2282,
        "span_start": 2293,
        "bug_name": "Chart_14",
        "end_line": 2301
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Removes a marker for a specific dataset/renderer and sends a\n * {@link PlotChangeEvent} to all registered listeners.\n *\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n *\n * @return A boolean indicating whether or not the marker was actually\n *         removed.\n *\n * @since 1.0.10\n */\n",
        "file": "Chart_14/source/org/jfree/chart/plot/XYPlot.java",
        "span_end": 2528,
        "name": "removeRangeMarker",
        "start_line": 2518,
        "span_start": 2529,
        "bug_name": "Chart_14",
        "end_line": 2540
      }
    ]
  },
  "Chart_15": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the maximum explode percent.\n *\n * @return The percent.\n */\n",
        "file": "Chart_15/source/org/jfree/chart/plot/PiePlot.java",
        "span_end": 1377,
        "name": "getMaximumExplodePercent",
        "start_line": 1377,
        "span_start": 1378,
        "bug_name": "Chart_15",
        "end_line": 1391
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Initialises the drawing procedure.  This method will be called before\n * the first item is rendered, giving the plot an opportunity to initialise\n * any state information it wants to maintain.\n *\n * @param g2  the graphics device.\n * @param plotArea  the plot area (<code>null</code> not permitted).\n * @param plot  the plot.\n * @param index  the secondary index (<code>null</code> for primary\n *               renderer).\n * @param info  collects chart rendering information for return to caller.\n *\n * @return A state object (maintains state information relevant to one\n *         chart drawing).\n */\n",
        "file": "Chart_15/source/org/jfree/chart/plot/PiePlot.java",
        "span_end": 2052,
        "name": "initialise",
        "start_line": 2049,
        "span_start": 2051,
        "bug_name": "Chart_15",
        "end_line": 2061
      }
    ]
  },
  "Chart_16": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Constructs a DefaultIntervalCategoryDataset, populates it with data\n * from the arrays, and uses the supplied names for the series and the\n * supplied objects for the categories.\n *\n * @param seriesKeys  the series keys (if <code>null</code>, series keys\n *         will be generated automatically).\n * @param categoryKeys  the category keys (if <code>null</code>, category\n *         keys will be generated automatically).\n * @param starts  the start values data, indexed as data[series][category].\n * @param ends  the end values data, indexed as data[series][category].\n */\n",
        "file": "Chart_16/source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "span_end": 208,
        "name": "DefaultIntervalCategoryDataset",
        "start_line": 142,
        "span_start": 207,
        "bug_name": "Chart_16",
        "end_line": 212
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Sets the categories for the dataset.\n *\n * @param categoryKeys  an array of objects representing the categories in\n *                      the dataset.\n *\n * @see #getRowKeys()\n * @see #setSeriesKeys(Comparable[])\n */\n",
        "file": "Chart_16/source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "span_end": 338,
        "name": "setCategoryKeys",
        "start_line": 334,
        "span_start": 338,
        "bug_name": "Chart_16",
        "end_line": 351
      }
    ]
  },
  "Chart_18": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Removes a value from the collection.\n *\n * @param index  the index of the item to remove (in the range\n *     <code>0</code> to <code>getItemCount() - 1</code>).\n *\n * @throws IndexOutOfBoundsException if <code>index</code> is not within\n *     the specified range.\n */\n",
        "file": "Chart_18/source/org/jfree/data/DefaultKeyedValues.java",
        "span_end": 320,
        "name": "removeValue",
        "start_line": 315,
        "span_start": 318,
        "bug_name": "Chart_18",
        "end_line": 319
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Removes a value from the collection.\n *\n * @param key  the item key (<code>null</code> not permitted).\n *\n * @throws IllegalArgumentException if <code>key</code> is\n *     <code>null</code>.\n * @throws UnknownKeyException if <code>key</code> is not recognised.\n */\n",
        "file": "Chart_18/source/org/jfree/data/DefaultKeyedValues.java",
        "span_end": 335,
        "name": "removeValue",
        "start_line": 330,
        "span_start": 335,
        "bug_name": "Chart_18",
        "end_line": 337
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Removes a column from the table.\n *\n * @param columnKey  the column key (<code>null</code> not permitted).\n *\n * @throws UnknownKeyException if the table does not contain a column with\n *     the specified key.\n * @throws IllegalArgumentException if <code>columnKey</code> is\n *     <code>null</code>.\n *\n * @see #removeColumn(int)\n * @see #removeRow(Comparable)\n */\n",
        "file": "Chart_18/source/org/jfree/data/DefaultKeyedValues2D.java",
        "span_end": 458,
        "name": "removeColumn",
        "start_line": 454,
        "span_start": 455,
        "bug_name": "Chart_18",
        "end_line": 470
      }
    ]
  },
  "Chart_19": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the index of the specified axis, or <code>-1</code> if the axis\n * is not assigned to the plot.\n *\n * @param axis  the axis (<code>null</code> not permitted).\n *\n * @return The axis index.\n *\n * @see #getDomainAxis(int)\n * @see #getRangeAxisIndex(ValueAxis)\n *\n * @since 1.0.3\n */\n",
        "file": "Chart_19/source/org/jfree/chart/plot/CategoryPlot.java",
        "span_end": 697,
        "name": "getDomainAxisIndex",
        "start_line": 697,
        "span_start": 698,
        "bug_name": "Chart_19",
        "end_line": 702
      }
    ]
  },
  "Chart_21": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Adds a list of values relating to one Box and Whisker entity to the\n * table.  The various median values are calculated.\n *\n * @param item  a box and whisker item (<code>null</code> not permitted).\n * @param rowKey  the row key (<code>null</code> not permitted).\n * @param columnKey  the column key (<code>null</code> not permitted).\n *\n * @see #add(List, Comparable, Comparable)\n */\n",
        "file": "Chart_21/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "span_end": 156,
        "name": "add",
        "start_line": 144,
        "span_start": 157,
        "bug_name": "Chart_21",
        "end_line": 195
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Adds a list of values relating to one Box and Whisker entity to the\n * table.  The various median values are calculated.\n *\n * @param item  a box and whisker item (<code>null</code> not permitted).\n * @param rowKey  the row key (<code>null</code> not permitted).\n * @param columnKey  the column key (<code>null</code> not permitted).\n *\n * @see #add(List, Comparable, Comparable)\n */\n",
        "file": "Chart_21/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "span_end": 187,
        "name": "add",
        "start_line": 144,
        "span_start": 188,
        "bug_name": "Chart_21",
        "end_line": 195
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Resets the cached bounds, by iterating over the entire dataset to find\n * the current bounds.\n */\n",
        "file": "Chart_21/source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "span_end": 741,
        "name": "updateBounds",
        "start_line": 741,
        "span_start": 741,
        "bug_name": "Chart_21",
        "end_line": 781
      }
    ]
  },
  "Chart_22": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the object for the given row and column keys.\n *\n * @param rowKey  the row key (<code>null</code> not permitted).\n * @param columnKey  the column key (<code>null</code> not permitted).\n *\n * @return The object (possibly <code>null</code>).\n *\n * @throws IllegalArgumentException if <code>rowKey<code> or\n *         <code>columnKey</code> is <code>null</code>.\n * @throws UnknownKeyException if <code>rowKey</code> or\n *         <code>columnKey</code> is not recognised.\n */\n",
        "file": "Chart_22/source/org/jfree/data/KeyedObjects2D.java",
        "span_end": 233,
        "name": "getObject",
        "start_line": 214,
        "span_start": 231,
        "bug_name": "Chart_22",
        "end_line": 239
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Removes an object from the table by setting it to <code>null</code>.  If\n * all the objects in the specified row and/or column are now\n * <code>null</code>, the row and/or column is removed from the table.\n *\n * @param rowKey  the row key (<code>null</code> not permitted).\n * @param columnKey  the column key (<code>null</code> not permitted).\n *\n * @see #addObject(Object, Comparable, Comparable)\n */\n",
        "file": "Chart_22/source/org/jfree/data/KeyedObjects2D.java",
        "span_end": 319,
        "name": "removeObject",
        "start_line": 297,
        "span_start": 318,
        "bug_name": "Chart_22",
        "end_line": 342
      }
    ]
  },
  "Chart_25": {
    "bug_count": 6,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Draws an item for a plot with a horizontal orientation.\n *\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the data area.\n * @param plot  the plot.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the data.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n */\n",
        "file": "Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 258,
        "name": "drawHorizontalItem",
        "start_line": 230,
        "span_start": 259,
        "bug_name": "Chart_25",
        "end_line": 364
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Draws an item for a plot with a horizontal orientation.\n *\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the data area.\n * @param plot  the plot.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the data.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n */\n",
        "file": "Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 315,
        "name": "drawHorizontalItem",
        "start_line": 230,
        "span_start": 315,
        "bug_name": "Chart_25",
        "end_line": 364
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Draws an item for a plot with a horizontal orientation.\n *\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the data area.\n * @param plot  the plot.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the data.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n */\n",
        "file": "Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 343,
        "name": "drawHorizontalItem",
        "start_line": 230,
        "span_start": 344,
        "bug_name": "Chart_25",
        "end_line": 364
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Draws an item for a plot with a vertical orientation.\n *\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the data area.\n * @param plot  the plot.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the data.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n */\n",
        "file": "Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 402,
        "name": "drawVerticalItem",
        "start_line": 379,
        "span_start": 403,
        "bug_name": "Chart_25",
        "end_line": 512
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Draws an item for a plot with a vertical orientation.\n *\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the data area.\n * @param plot  the plot.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the data.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n */\n",
        "file": "Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 459,
        "name": "drawVerticalItem",
        "start_line": 379,
        "span_start": 459,
        "bug_name": "Chart_25",
        "end_line": 512
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Draws an item for a plot with a vertical orientation.\n *\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the data area.\n * @param plot  the plot.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the data.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n */\n",
        "file": "Chart_25/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "span_end": 486,
        "name": "drawVerticalItem",
        "start_line": 379,
        "span_start": 487,
        "bug_name": "Chart_25",
        "end_line": 512
      }
    ]
  },
  "Cli_1": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Return the <code>Object</code> type of this <code>Option</code>.\n *\n * @param opt the name of the option\n * @return the type of this <code>Option</code>\n */\n",
        "file": "Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 98,
        "name": "getOptionObject",
        "start_line": 87,
        "span_start": 93,
        "bug_name": "Cli_1",
        "end_line": 100
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Retrieves the array of values, if any, of an option.\n *\n * @param opt string name of the option\n * @return Values of the argument if option is set, and has an argument,\n * otherwise null.\n */\n",
        "file": "Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 158,
        "name": "getOptionValues",
        "start_line": 146,
        "span_start": 149,
        "bug_name": "Cli_1",
        "end_line": 156
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Retrieves the option object given the long or short option as a String</p>\n * @param opt short or long name of the option\n * @return Canonicalized option\n */\n",
        "file": "Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 169,
        "name": "resolveOption",
        "start_line": 163,
        "span_start": 169,
        "bug_name": "Cli_1",
        "end_line": 180
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Add left-over unrecognized option/argument.\n *\n * @param arg the unrecognised option/argument.\n */\n",
        "file": "Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 287,
        "name": "addArg",
        "start_line": 275,
        "span_start": 277,
        "bug_name": "Cli_1",
        "end_line": 289
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns an iterator over the Option members of CommandLine.\n *\n * @return an <code>Iterator</code> over the processed {@link Option}\n * members of this {@link CommandLine}\n */\n",
        "file": "Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 298,
        "name": "iterator",
        "start_line": 297,
        "span_start": 298,
        "bug_name": "Cli_1",
        "end_line": 300
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns an array of the processed {@link Option}s.\n *\n * @return an array of the processed {@link Option}s.\n */\n",
        "file": "Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 308,
        "name": "getOptions",
        "start_line": 307,
        "span_start": 308,
        "bug_name": "Cli_1",
        "end_line": 316
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns an array of the processed {@link Option}s.\n *\n * @return an array of the processed {@link Option}s.\n */\n",
        "file": "Cli_1/src/java/org/apache/commons/cli/CommandLine.java",
        "span_end": 316,
        "name": "getOptions",
        "start_line": 307,
        "span_start": 316,
        "bug_name": "Cli_1",
        "end_line": 316
      }
    ]
  },
  "Cli_10": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Cli_10/src/java/org/apache/commons/cli/Parser.java",
        "span_end": 46,
        "name": "setOptions",
        "start_line": 45,
        "span_start": 46,
        "bug_name": "Cli_10",
        "end_line": 48
      }
    ]
  },
  "Cli_13": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Cli_13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
        "span_end": 134,
        "name": "getUndefaultedValues",
        "start_line": 132,
        "span_start": 132,
        "bug_name": "Cli_13",
        "end_line": 142
      },
      {
        "member_type": "method",
        "file": "Cli_13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java",
        "span_end": 144,
        "name": "processValues",
        "start_line": 139,
        "span_start": 144,
        "bug_name": "Cli_13",
        "end_line": 189
      }
    ]
  },
  "Cli_14": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Cli_14/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "span_end": 252,
        "name": "validate",
        "start_line": 237,
        "span_start": 250,
        "bug_name": "Cli_14",
        "end_line": 282
      },
      {
        "member_type": "method",
        "file": "Cli_14/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "span_end": 261,
        "name": "validate",
        "start_line": 237,
        "span_start": 261,
        "bug_name": "Cli_14",
        "end_line": 282
      }
    ]
  },
  "Cli_16": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Cli_16/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
        "span_end": 73,
        "name": "addOption",
        "start_line": 65,
        "span_start": 74,
        "bug_name": "Cli_16",
        "end_line": 79
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Creates a new GroupImpl using the specified parameters.\n *\n * @param options the Options and Arguments that make up the Group\n * @param name the name of this Group, or null\n * @param description a description of this Group\n * @param minimum the minimum number of Options for a valid CommandLine\n * @param maximum the maximum number of Options for a valid CommandLine\n */\n",
        "file": "Cli_16/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "span_end": 91,
        "name": "GroupImpl",
        "start_line": 64,
        "span_start": 92,
        "bug_name": "Cli_16",
        "end_line": 112
      }
    ]
  },
  "Cli_18": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>An implementation of {@link Parser}'s abstract\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n *\n * <p>The following are the rules used by this flatten method.\n * <ol>\n *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n *  burst anymore of <code>arguments</code> entries, just add each\n *  successive entry without further processing.  Otherwise, ignore\n *  <code>stopAtNonOption</code>.</li>\n *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n *  just add the entry to the list of processed tokens</li>\n *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n *  just add the entry to the list of processed tokens</li>\n *  <li>if the current <code>arguments</code> entry is two characters\n *  in length and the first character is \"<b>-</b>\" then check if this\n *  is a valid {@link Option} id.  If it is a valid id, then add the\n *  entry to the list of processed tokens and set the current {@link Option}\n *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n *  is true, then the remaining entries are copied to the list of\n *  processed tokens.  Otherwise, the current entry is ignored.</li>\n *  <li>if the current <code>arguments</code> entry is more than two\n *  characters in length and the first character is \"<b>-</b>\" then\n *  we need to burst the entry to determine its constituents.  For more\n *  information on the bursting algorithm see\n *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n *  <li>if the current <code>arguments</code> entry is not handled\n *  by any of the previous rules, then the entry is added to the list\n *  of processed tokens.</li>\n * </ol>\n * </p>\n *\n * @param options The command line {@link Options}\n * @param arguments The command line arguments to be parsed\n * @param stopAtNonOption Specifies whether to stop flattening\n * when an non option is found.\n * @return The flattened <code>arguments</code> String array.\n */\n",
        "file": "Cli_18/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 128,
        "name": "flatten",
        "start_line": 97,
        "span_start": 128,
        "bug_name": "Cli_18",
        "end_line": 159
      }
    ]
  },
  "Cli_21": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Creates a new WriteableCommandLineImpl rooted on the specified Option, to\n * hold the parsed arguments.\n *\n * @param rootOption the CommandLine's root Option\n * @param arguments the arguments this CommandLine represents\n */\n",
        "file": "Cli_21/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
        "span_end": 65,
        "name": "WriteableCommandLineImpl",
        "start_line": 61,
        "span_start": 63,
        "bug_name": "Cli_21",
        "end_line": 66
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Tests whether the passed in trigger looks like an option. This\n * implementation first checks whether the passed in string starts with a\n * prefix that indicates an option. If this is the case, it is also checked\n * whether an option of this name is known for the current option. (This can\n * lead to reentrant invocations of this method, so care has to be taken\n * about this.)\n *\n * @param trigger the command line element to test\n * @return a flag whether this element seems to be an option\n */\n",
        "file": "Cli_21/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
        "span_end": 245,
        "name": "looksLikeOption",
        "start_line": 241,
        "span_start": 234,
        "bug_name": "Cli_21",
        "end_line": 272
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method for testing whether an element of the command line looks\n * like an option. This method queries the command line, but sets the\n * current option first.\n *\n * @param commandLine the command line\n * @param trigger the trigger to be checked\n * @return a flag whether this element looks like an option\n */\n",
        "file": "Cli_21/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "span_end": 513,
        "name": "looksLikeOption",
        "start_line": 511,
        "span_start": 513,
        "bug_name": "Cli_21",
        "end_line": 520
      }
    ]
  },
  "Cli_22": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>An implementation of {@link Parser}'s abstract\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n *\n * <p>The following are the rules used by this flatten method.\n * <ol>\n *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n *  burst anymore of <code>arguments</code> entries, just add each\n *  successive entry without further processing.  Otherwise, ignore\n *  <code>stopAtNonOption</code>.</li>\n *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n *  just add the entry to the list of processed tokens</li>\n *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n *  just add the entry to the list of processed tokens</li>\n *  <li>if the current <code>arguments</code> entry is two characters\n *  in length and the first character is \"<b>-</b>\" then check if this\n *  is a valid {@link Option} id.  If it is a valid id, then add the\n *  entry to the list of processed tokens and set the current {@link Option}\n *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n *  is true, then the remaining entries are copied to the list of\n *  processed tokens.  Otherwise, the current entry is ignored.</li>\n *  <li>if the current <code>arguments</code> entry is more than two\n *  characters in length and the first character is \"<b>-</b>\" then\n *  we need to burst the entry to determine its constituents.  For more\n *  information on the bursting algorithm see\n *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n *  <li>if the current <code>arguments</code> entry is not handled\n *  by any of the previous rules, then the entry is added to the list\n *  of processed tokens.</li>\n * </ol>\n * </p>\n *\n * @param options The command line {@link Options}\n * @param arguments The command line arguments to be parsed\n * @param stopAtNonOption Specifies whether to stop flattening\n * when an non option is found.\n * @return The flattened <code>arguments</code> String array.\n */\n",
        "file": "Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 119,
        "name": "flatten",
        "start_line": 95,
        "span_start": 116,
        "bug_name": "Cli_22",
        "end_line": 157
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>An implementation of {@link Parser}'s abstract\n * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n *\n * <p>The following are the rules used by this flatten method.\n * <ol>\n *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n *  burst anymore of <code>arguments</code> entries, just add each\n *  successive entry without further processing.  Otherwise, ignore\n *  <code>stopAtNonOption</code>.</li>\n *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n *  just add the entry to the list of processed tokens</li>\n *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n *  just add the entry to the list of processed tokens</li>\n *  <li>if the current <code>arguments</code> entry is two characters\n *  in length and the first character is \"<b>-</b>\" then check if this\n *  is a valid {@link Option} id.  If it is a valid id, then add the\n *  entry to the list of processed tokens and set the current {@link Option}\n *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n *  is true, then the remaining entries are copied to the list of\n *  processed tokens.  Otherwise, the current entry is ignored.</li>\n *  <li>if the current <code>arguments</code> entry is more than two\n *  characters in length and the first character is \"<b>-</b>\" then\n *  we need to burst the entry to determine its constituents.  For more\n *  information on the bursting algorithm see\n *  {@link PosixParser#burstToken(String, boolean) burstToken}.</li>\n *  <li>if the current <code>arguments</code> entry is not handled\n *  by any of the previous rules, then the entry is added to the list\n *  of processed tokens.</li>\n * </ol>\n * </p>\n *\n * @param options The command line {@link Options}\n * @param arguments The command line arguments to be parsed\n * @param stopAtNonOption Specifies whether to stop flattening\n * when an non option is found.\n * @return The flattened <code>arguments</code> String array.\n */\n",
        "file": "Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 152,
        "name": "flatten",
        "start_line": 95,
        "span_start": 146,
        "bug_name": "Cli_22",
        "end_line": 157
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Add the special token \"<b>--</b>\" and the current <code>value</code>\n * to the processed tokens list. Then add all the remaining\n * <code>argument</code> values to the processed tokens list.\n *\n * @param value The current token\n */\n",
        "file": "Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 187,
        "name": "processNonOptionToken",
        "start_line": 182,
        "span_start": 184,
        "bug_name": "Cli_22",
        "end_line": 191
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>If an {@link Option} exists for <code>token</code> then\n * add the token to the processed list.</p>\n *\n * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n * is set then add the remaining tokens to the processed tokens list\n * directly.</p>\n *\n * @param token The current option token\n * @param stopAtNonOption Specifies whether flattening should halt\n * at the first non option.\n */\n",
        "file": "Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 210,
        "name": "processOptionToken",
        "start_line": 205,
        "span_start": 211,
        "bug_name": "Cli_22",
        "end_line": 218
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Breaks <code>token</code> into its constituent parts\n * using the following algorithm.\n *\n * <ul>\n *  <li>ignore the first character (\"<b>-</b>\")</li>\n *  <li>foreach remaining character check if an {@link Option}\n *  exists with that id.</li>\n *  <li>if an {@link Option} does exist then add that character\n *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n *  <li>if the {@link Option} can have an argument value and there\n *  are remaining characters in the token then add the remaining\n *  characters as a token to the list of processed tokens.</li>\n *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n *  \"<b>--</b>\" followed by the remaining characters and also\n *  the remaining tokens directly to the processed tokens list.</li>\n *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n *  character prepended with \"<b>-</b>\".</li>\n * </ul>\n *\n * @param token The current token to be <b>burst</b>\n * @param stopAtNonOption Specifies whether to stop processing\n * at the first non-Option encountered.\n */\n",
        "file": "Cli_22/src/java/org/apache/commons/cli/PosixParser.java",
        "span_end": 262,
        "name": "burstToken",
        "start_line": 246,
        "span_start": 262,
        "bug_name": "Cli_22",
        "end_line": 275
      }
    ]
  },
  "Cli_23": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\n",
        "file": "Cli_23/src/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 824,
        "name": "renderWrappedText",
        "start_line": 805,
        "span_start": 824,
        "bug_name": "Cli_23",
        "end_line": 842
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Render the specified text and return the rendered Options\n * in a StringBuffer.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n *\n * @return the StringBuffer with the rendered Options contents.\n */\n",
        "file": "Cli_23/src/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 836,
        "name": "renderWrappedText",
        "start_line": 805,
        "span_start": 833,
        "bug_name": "Cli_23",
        "end_line": 842
      }
    ]
  },
  "Cli_26": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Create an Option using the current settings and with\n * the specified Option <code>char</code>.\n *\n * @param opt the <code>java.lang.String</code> representation\n * of the Option\n * @return the Option instance\n * @throws IllegalArgumentException if <code>opt</code> is not\n * a valid character.  See Option.\n */\n",
        "file": "Cli_26/src/java/org/apache/commons/cli/OptionBuilder.java",
        "span_end": 349,
        "name": "create",
        "start_line": 346,
        "span_start": 348,
        "bug_name": "Cli_26",
        "end_line": 368
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Create an Option using the current settings and with\n * the specified Option <code>char</code>.\n *\n * @param opt the <code>java.lang.String</code> representation\n * of the Option\n * @return the Option instance\n * @throws IllegalArgumentException if <code>opt</code> is not\n * a valid character.  See Option.\n */\n",
        "file": "Cli_26/src/java/org/apache/commons/cli/OptionBuilder.java",
        "span_end": 360,
        "name": "create",
        "start_line": 346,
        "span_start": 359,
        "bug_name": "Cli_26",
        "end_line": 368
      }
    ]
  },
  "Cli_30": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Sets the values of Options using the values in <code>properties</code>.\n *\n * @param properties The value properties to be processed.\n */\n",
        "file": "Cli_30/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "span_end": 155,
        "name": "handleProperties",
        "start_line": 139,
        "span_start": 150,
        "bug_name": "Cli_30",
        "end_line": 184
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Sets the values of Options using the values in <code>properties</code>.\n *\n * @param properties The value properties to be processed.\n */\n",
        "file": "Cli_30/src/main/java/org/apache/commons/cli/Parser.java",
        "span_end": 268,
        "name": "processProperties",
        "start_line": 252,
        "span_start": 263,
        "bug_name": "Cli_30",
        "end_line": 305
      }
    ]
  },
  "Cli_31": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Appends the usage clause for an Option to a StringBuffer.\n *\n * @param buff the StringBuffer to append to\n * @param option the Option to append\n * @param required whether the Option is required or not\n */\n",
        "file": "Cli_31/src/main/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 656,
        "name": "appendOption",
        "start_line": 636,
        "span_start": 653,
        "bug_name": "Cli_31",
        "end_line": 664
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Resets the member variables to their default values.\n */\n",
        "file": "Cli_31/src/main/java/org/apache/commons/cli/OptionBuilder.java",
        "span_end": 80,
        "name": "reset",
        "start_line": 77,
        "span_start": 80,
        "bug_name": "Cli_31",
        "end_line": 87
      }
    ]
  },
  "Cli_33": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Print the specified text to the specified PrintWriter.\n *\n * @param pw The printWriter to write the help to\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be written to the PrintWriter\n */\n",
        "file": "Cli_33/src/main/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 730,
        "name": "printWrapped",
        "start_line": 726,
        "span_start": 730,
        "bug_name": "Cli_33",
        "end_line": 732
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Render the specified text width a maximum width. This method differs\n * from renderWrappedText by not removing leading spaces after a new line.\n *\n * @param sb The StringBuffer to place the rendered text into.\n * @param width The number of characters to display per line\n * @param nextLineTabStop The position on the next line for the first tab.\n * @param text The text to be rendered.\n */\n",
        "file": "Cli_33/src/main/java/org/apache/commons/cli/HelpFormatter.java",
        "span_end": 901,
        "name": "renderWrappedTextBlock",
        "start_line": 900,
        "span_start": 900,
        "bug_name": "Cli_33",
        "end_line": 918
      }
    ]
  },
  "Cli_34": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Resets the member variables to their default values.\n */\n",
        "file": "Cli_34/src/main/java/org/apache/commons/cli/OptionBuilder.java",
        "span_end": 84,
        "name": "reset",
        "start_line": 79,
        "span_start": 84,
        "bug_name": "Cli_34",
        "end_line": 89
      }
    ]
  },
  "Cli_39": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the <code>Object</code> of type <code>clazz</code>\n * with the value of <code>str</code>.\n *\n * @param str the command line value\n * @param clazz the type of argument\n * @return The instance of <code>clazz</code> initialised with\n * the value of <code>str</code>.\n * @throws ParseException if the value creation for the given class failed\n */\n",
        "file": "Cli_39/src/main/java/org/apache/commons/cli/TypeHandler.java",
        "span_end": 92,
        "name": "createValue",
        "start_line": 64,
        "span_start": 92,
        "bug_name": "Cli_39",
        "end_line": 106
      }
    ]
  },
  "Closure_3": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 155,
        "name": "enterScope",
        "start_line": 124,
        "span_start": 155,
        "bug_name": "Closure_3",
        "end_line": 170
      },
      {
        "member_type": "method",
        "file": "Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 280,
        "name": "canInline",
        "start_line": 280,
        "span_start": 280,
        "bug_name": "Closure_3",
        "end_line": 417
      },
      {
        "member_type": "method",
        "file": "Closure_3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 374,
        "name": "canInline",
        "start_line": 280,
        "span_start": 375,
        "bug_name": "Closure_3",
        "end_line": 417
      }
    ]
  },
  "Closure_4": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n",
        "file": "Closure_4/src/com/google/javascript/rhino/jstype/NamedType.java",
        "span_end": 190,
        "name": "resolveInternal",
        "start_line": 183,
        "span_start": 190,
        "bug_name": "Closure_4",
        "end_line": 212
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Resolve the referenced type within the enclosing scope.\n */\n",
        "file": "Closure_4/src/com/google/javascript/rhino/jstype/NamedType.java",
        "span_end": 202,
        "name": "resolveInternal",
        "start_line": 183,
        "span_start": 202,
        "bug_name": "Closure_4",
        "end_line": 212
      }
    ]
  },
  "Closure_6": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Expect that the first type can be assigned to a symbol of the second\n * type.\n *\n * @param t The node traversal.\n * @param n The node to issue warnings on.\n * @param rightType The type on the RHS of the assign.\n * @param leftType The type of the symbol on the LHS of the assign.\n * @param owner The owner of the property being assigned to.\n * @param propName The name of the property being assigned to.\n * @return True if the types matched, false otherwise.\n */\n",
        "file": "Closure_6/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 368,
        "name": "expectCanAssignToPropertyOf",
        "start_line": 362,
        "span_start": 366,
        "bug_name": "Closure_6",
        "end_line": 385
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Expect that the first type can be assigned to a symbol of the second\n * type.\n *\n * @param t The node traversal.\n * @param n The node to issue warnings on.\n * @param rightType The type on the RHS of the assign.\n * @param leftType The type of the symbol on the LHS of the assign.\n * @param owner The owner of the property being assigned to.\n * @param propName The name of the property being assigned to.\n * @return True if the types matched, false otherwise.\n */\n",
        "file": "Closure_6/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 385,
        "name": "expectCanAssignToPropertyOf",
        "start_line": 362,
        "span_start": 385,
        "bug_name": "Closure_6",
        "end_line": 385
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Expect that the first type can be assigned to a symbol of the second\n * type.\n *\n * @param t The node traversal.\n * @param n The node to issue warnings on.\n * @param rightType The type on the RHS of the assign.\n * @param leftType The type of the symbol on the LHS of the assign.\n * @param msg An extra message for the mismatch warning, if necessary.\n * @return True if the types matched, false otherwise.\n */\n",
        "file": "Closure_6/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 409,
        "name": "expectCanAssignTo",
        "start_line": 398,
        "span_start": 405,
        "bug_name": "Closure_6",
        "end_line": 405
      }
    ]
  },
  "Closure_9": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_9/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 118,
        "name": "normalizeSourceName",
        "start_line": 116,
        "span_start": 119,
        "bug_name": "Closure_9",
        "end_line": 126
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Emit goog.provide and add suffix to all global vars to avoid conflicts\n * with other modules.\n */\n",
        "file": "Closure_9/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 183,
        "name": "visitScript",
        "start_line": 180,
        "span_start": 183,
        "bug_name": "Closure_9",
        "end_line": 205
      }
    ]
  },
  "Closure_16": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 180,
        "name": "applyAlias",
        "start_line": 173,
        "span_start": 170,
        "bug_name": "Closure_16",
        "end_line": 187
      },
      {
        "member_type": "method",
        "file": "Closure_16/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 468,
        "name": "fixTypeNode",
        "start_line": 463,
        "span_start": 468,
        "bug_name": "Closure_16",
        "end_line": 482
      }
    ]
  },
  "Closure_21": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java",
        "span_end": 101,
        "name": "visit",
        "start_line": 83,
        "span_start": 101,
        "bug_name": "Closure_21",
        "end_line": 131
      },
      {
        "member_type": "method",
        "file": "Closure_21/src/com/google/javascript/jscomp/CheckSideEffects.java",
        "span_end": 130,
        "name": "visit",
        "start_line": 83,
        "span_start": 113,
        "bug_name": "Closure_21",
        "end_line": 131
      }
    ]
  },
  "Closure_24": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 279,
        "name": "findAliases",
        "start_line": 272,
        "span_start": 278,
        "bug_name": "Closure_24",
        "end_line": 298
      },
      {
        "member_type": "method",
        "file": "Closure_24/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 295,
        "name": "findAliases",
        "start_line": 272,
        "span_start": 287,
        "bug_name": "Closure_24",
        "end_line": 298
      }
    ]
  },
  "Closure_25": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_25/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 1038,
        "name": "traverseNew",
        "start_line": 1035,
        "span_start": 1036,
        "bug_name": "Closure_25",
        "end_line": 1061
      },
      {
        "member_type": "method",
        "file": "Closure_25/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 1061,
        "name": "traverseNew",
        "start_line": 1035,
        "span_start": 1055,
        "bug_name": "Closure_25",
        "end_line": 1061
      }
    ]
  },
  "Closure_26": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Emit <code>if (moduleName.module$exports) {\n *    moduleName = moduleName.module$export;\n * }</code> at end of file.\n */\n",
        "file": "Closure_26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 206,
        "name": "emitOptionalModuleExportsOverride",
        "start_line": 206,
        "span_start": 207,
        "bug_name": "Closure_26",
        "end_line": 219
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Rewrite module.exports to moduleName.module$exports.\n */\n",
        "file": "Closure_26/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "span_end": 227,
        "name": "visitModuleExports",
        "start_line": 224,
        "span_start": 228,
        "bug_name": "Closure_26",
        "end_line": 233
      }
    ]
  },
  "Closure_27": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_27/src/com/google/javascript/rhino/IR.java",
        "span_end": 225,
        "name": "labelName",
        "start_line": 221,
        "span_start": 224,
        "bug_name": "Closure_27",
        "end_line": 224
      },
      {
        "member_type": "method",
        "file": "Closure_27/src/com/google/javascript/rhino/IR.java",
        "span_end": 233,
        "name": "tryCatch",
        "start_line": 233,
        "span_start": 233,
        "bug_name": "Closure_27",
        "end_line": 238
      }
    ]
  },
  "Closure_29": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Counts the number of direct (full) references to an object.\n * Specifically we check for references of the following type:\n * <pre>\n *   x;\n *   x.fn();\n * </pre>\n */\n",
        "file": "Closure_29/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 156,
        "name": "isInlinableObject",
        "start_line": 155,
        "span_start": 157,
        "bug_name": "Closure_29",
        "end_line": 250
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Counts the number of direct (full) references to an object.\n * Specifically we check for references of the following type:\n * <pre>\n *   x;\n *   x.fn();\n * </pre>\n */\n",
        "file": "Closure_29/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 180,
        "name": "isInlinableObject",
        "start_line": 155,
        "span_start": 181,
        "bug_name": "Closure_29",
        "end_line": 250
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Counts the number of direct (full) references to an object.\n * Specifically we check for references of the following type:\n * <pre>\n *   x;\n *   x.fn();\n * </pre>\n */\n",
        "file": "Closure_29/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 215,
        "name": "isInlinableObject",
        "start_line": 155,
        "span_start": 216,
        "bug_name": "Closure_29",
        "end_line": 250
      }
    ]
  },
  "Closure_30": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_30/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "span_end": 157,
        "name": "process",
        "start_line": 155,
        "span_start": 157,
        "bug_name": "Closure_30",
        "end_line": 158
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Computes all the local variables that rValue reads from and store that\n * in the def's depends set.\n */\n",
        "file": "Closure_30/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
        "span_end": 398,
        "name": "computeDependence",
        "start_line": 392,
        "span_start": 396,
        "bug_name": "Closure_30",
        "end_line": 407
      }
    ]
  },
  "Closure_32": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n",
        "file": "Closure_32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1363,
        "name": "extractMultilineTextualBlock",
        "start_line": 1328,
        "span_start": 1358,
        "bug_name": "Closure_32",
        "end_line": 1441
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n",
        "file": "Closure_32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1381,
        "name": "extractMultilineTextualBlock",
        "start_line": 1328,
        "span_start": 1382,
        "bug_name": "Closure_32",
        "end_line": 1441
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n",
        "file": "Closure_32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1389,
        "name": "extractMultilineTextualBlock",
        "start_line": 1328,
        "span_start": 1389,
        "bug_name": "Closure_32",
        "end_line": 1441
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n",
        "file": "Closure_32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1416,
        "name": "extractMultilineTextualBlock",
        "start_line": 1328,
        "span_start": 1414,
        "bug_name": "Closure_32",
        "end_line": 1441
      }
    ]
  },
  "Closure_34": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_34/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 124,
        "name": "add",
        "start_line": 85,
        "span_start": 122,
        "bug_name": "Closure_34",
        "end_line": 730
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * We could use addList recursively here, but sometimes we produce\n * very deeply nested operators and run out of stack space, so we\n * just unroll the recursion when possible.\n *\n * We assume nodes are left-recursive.\n */\n",
        "file": "Closure_34/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 754,
        "name": "unrollBinaryOperator",
        "start_line": 739,
        "span_start": 754,
        "bug_name": "Closure_34",
        "end_line": 755
      },
      {
        "member_type": "method",
        "file": "Closure_34/src/com/google/javascript/jscomp/CodePrinter.java",
        "span_end": 334,
        "name": "appendOp",
        "start_line": 331,
        "span_start": 334,
        "bug_name": "Closure_34",
        "end_line": 342
      }
    ]
  },
  "Closure_37": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Traverses a function.\n */\n",
        "file": "Closure_37/src/com/google/javascript/jscomp/NodeTraversal.java",
        "span_end": 541,
        "name": "traverseFunction",
        "start_line": 510,
        "span_start": 541,
        "bug_name": "Closure_37",
        "end_line": 545
      },
      {
        "member_type": "method",
        "file": "Closure_37/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 669,
        "name": "processFunctionNode",
        "start_line": 609,
        "span_start": 667,
        "bug_name": "Closure_37",
        "end_line": 677
      }
    ]
  },
  "Closure_39": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_39/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "span_end": 383,
        "name": "toStringHelper",
        "start_line": 352,
        "span_start": 380,
        "bug_name": "Closure_39",
        "end_line": 396
      },
      {
        "member_type": "method",
        "file": "Closure_39/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "span_end": 394,
        "name": "toStringHelper",
        "start_line": 352,
        "span_start": 394,
        "bug_name": "Closure_39",
        "end_line": 396
      }
    ]
  },
  "Closure_41": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Infer the parameter and return types of a function from\n * the parameter and return types of the function it is overriding.\n *\n * @param oldType The function being overridden. Does nothing if this is null.\n * @param paramsParent The LP node of the function that we're assigning to.\n *     If null, that just means we're not initializing this to a function\n *     literal.\n */\n",
        "file": "Closure_41/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 291,
        "name": "inferFromOverriddenFunction",
        "start_line": 242,
        "span_start": 292,
        "bug_name": "Closure_41",
        "end_line": 299
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Infer the parameter types from the list of argument names and\n * the doc info.\n */\n",
        "file": "Closure_41/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 482,
        "name": "inferParameterTypes",
        "start_line": 424,
        "span_start": 483,
        "bug_name": "Closure_41",
        "end_line": 503
      }
    ]
  },
  "Closure_43": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_43/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 546,
        "name": "visit",
        "start_line": 498,
        "span_start": 547,
        "bug_name": "Closure_43",
        "end_line": 555
      },
      {
        "member_type": "method",
        "file": "Closure_43/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 580,
        "name": "attachLiteralTypes",
        "start_line": 557,
        "span_start": 580,
        "bug_name": "Closure_43",
        "end_line": 603
      }
    ]
  },
  "Closure_45": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Look at all the property assigns to all variables.\n * These may or may not count as references. For example,\n *\n * <code>\n * var x = {};\n * x.foo = 3; // not a reference.\n * var y = foo();\n * y.foo = 3; // is a reference.\n * </code>\n *\n * Interpreting assignments could mark a variable as referenced that\n * wasn't referenced before, in order to keep it alive. Because we find\n * references by lazily traversing subtrees, marking a variable as\n * referenced could trigger new traversals of new subtrees, which could\n * find new references.\n *\n * Therefore, this interpretation needs to be run to a fixed point.\n */\n",
        "file": "Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "span_end": 731,
        "name": "interpretAssigns",
        "start_line": 704,
        "span_start": 732,
        "bug_name": "Closure_45",
        "end_line": 753
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Look at all the property assigns to all variables.\n * These may or may not count as references. For example,\n *\n * <code>\n * var x = {};\n * x.foo = 3; // not a reference.\n * var y = foo();\n * y.foo = 3; // is a reference.\n * </code>\n *\n * Interpreting assignments could mark a variable as referenced that\n * wasn't referenced before, in order to keep it alive. Because we find\n * references by lazily traversing subtrees, marking a variable as\n * referenced could trigger new traversals of new subtrees, which could\n * find new references.\n *\n * Therefore, this interpretation needs to be run to a fixed point.\n */\n",
        "file": "Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "span_end": 741,
        "name": "interpretAssigns",
        "start_line": 704,
        "span_start": 739,
        "bug_name": "Closure_45",
        "end_line": 753
      },
      {
        "member_type": "constructor",
        "file": "Closure_45/src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "span_end": 904,
        "name": "Assign",
        "start_line": 902,
        "span_start": 904,
        "bug_name": "Closure_45",
        "end_line": 913
      }
    ]
  },
  "Closure_47": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Creates an \"OriginalMapping\" object for the given entry object.\n */\n",
        "file": "Closure_47/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
        "span_end": 490,
        "name": "getOriginalMappingForEntry",
        "start_line": 482,
        "span_start": 489,
        "bug_name": "Closure_47",
        "end_line": 496
      },
      {
        "member_type": "method",
        "file": "Closure_47/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 141,
        "name": "addMapping",
        "start_line": 117,
        "span_start": 138,
        "bug_name": "Closure_47",
        "end_line": 148
      }
    ]
  },
  "Closure_49": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 98,
        "name": "enterScope",
        "start_line": 75,
        "span_start": 91,
        "bug_name": "Closure_49",
        "end_line": 103
      },
      {
        "member_type": "method",
        "file": "Closure_49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 134,
        "name": "shouldTraverse",
        "start_line": 105,
        "span_start": 130,
        "bug_name": "Closure_49",
        "end_line": 156
      },
      {
        "member_type": "method",
        "file": "Closure_49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 179,
        "name": "visit",
        "start_line": 158,
        "span_start": 173,
        "bug_name": "Closure_49",
        "end_line": 192
      }
    ]
  },
  "Closure_50": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\n",
        "file": "Closure_50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
        "span_end": 376,
        "name": "tryFoldArrayJoin",
        "start_line": 367,
        "span_start": 376,
        "bug_name": "Closure_50",
        "end_line": 481
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\n",
        "file": "Closure_50/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
        "span_end": 389,
        "name": "tryFoldArrayJoin",
        "start_line": 367,
        "span_start": 389,
        "bug_name": "Closure_50",
        "end_line": 481
      }
    ]
  },
  "Closure_51": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_51/src/com/google/javascript/jscomp/CodeConsumer.java",
        "span_end": 241,
        "name": "addNumber",
        "start_line": 233,
        "span_start": 241,
        "bug_name": "Closure_51",
        "end_line": 259
      },
      {
        "member_type": "method",
        "file": "Closure_51/src/com/google/javascript/jscomp/CodeConsumer.java",
        "span_end": 259,
        "name": "addNumber",
        "start_line": 233,
        "span_start": 259,
        "bug_name": "Closure_51",
        "end_line": 259
      }
    ]
  },
  "Closure_53": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n * Note that the resulting expression will always evaluate to\n * true, as would the x = {...} expression.\n */\n",
        "file": "Closure_53/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 330,
        "name": "replaceAssignmentExpression",
        "start_line": 303,
        "span_start": 331,
        "bug_name": "Closure_53",
        "end_line": 364
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Replaces an assignment like x = {...} with t1=a,t2=b,t3=c,true.\n * Note that the resulting expression will always evaluate to\n * true, as would the x = {...} expression.\n */\n",
        "file": "Closure_53/src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "span_end": 349,
        "name": "replaceAssignmentExpression",
        "start_line": 303,
        "span_start": 350,
        "bug_name": "Closure_53",
        "end_line": 364
      }
    ]
  },
  "Closure_54": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Declare the symbol for a qualified name in the global scope.\n *\n * @param info The doc info for this property.\n * @param n A top-level GETPROP node (it should not be contained inside\n *     another GETPROP).\n * @param parent The parent of {@code n}.\n * @param rhsValue The node that {@code n} is being initialized to,\n *     or {@code null} if this is a stub declaration.\n */\n",
        "file": "Closure_54/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 1413,
        "name": "maybeDeclareQualifiedName",
        "start_line": 1373,
        "span_start": 1413,
        "bug_name": "Closure_54",
        "end_line": 1495
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Sets the prototype, creating the prototype object from the given\n * base type.\n * @param baseType The base type.\n */\n",
        "file": "Closure_54/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 341,
        "name": "setPrototypeBasedOn",
        "start_line": 322,
        "span_start": 341,
        "bug_name": "Closure_54",
        "end_line": 349
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Sets the prototype.\n * @param prototype the prototype. If this value is {@code null} it will\n *        silently be discarded.\n */\n",
        "file": "Closure_54/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 373,
        "name": "setPrototype",
        "start_line": 356,
        "span_start": 366,
        "bug_name": "Closure_54",
        "end_line": 398
      }
    ]
  },
  "Closure_60": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets the boolean value of a node that represents a expression. This method\n * effectively emulates the <code>Boolean()</code> JavaScript cast function.\n * Note: unlike getBooleanValue this function does not return UNKNOWN\n * for expressions with side-effects.\n */\n",
        "file": "Closure_60/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 107,
        "name": "getImpureBooleanValue",
        "start_line": 74,
        "span_start": 108,
        "bug_name": "Closure_60",
        "end_line": 114
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets the boolean value of a node that represents a literal. This method\n * effectively emulates the <code>Boolean()</code> JavaScript cast function\n * except it return UNKNOWN for known values with side-effects, use\n * getExpressionBooleanValue if you don't care about side-effects.\n */\n",
        "file": "Closure_60/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 136,
        "name": "getPureBooleanValue",
        "start_line": 122,
        "span_start": 136,
        "bug_name": "Closure_60",
        "end_line": 168
      }
    ]
  },
  "Closure_64": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Writes out js code from a root node. If printing input delimiters, this\n * method will attach a comment to the start of the text indicating which\n * input the output derived from. If there were any preserve annotations\n * within the root's source, they will also be printed in a block comment\n * at the beginning of the output.\n */\n",
        "file": "Closure_64/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 1432,
        "name": "toSource",
        "start_line": 1393,
        "span_start": 1432,
        "bug_name": "Closure_64",
        "end_line": 1452
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Generates JavaScript source code for an AST, doesn't generate source\n * map info.\n */\n",
        "file": "Closure_64/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 1473,
        "name": "toSource",
        "start_line": 1458,
        "span_start": 1461,
        "bug_name": "Closure_64",
        "end_line": 1482
      }
    ]
  },
  "Closure_68": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Parses a {@link JSDocInfo} object. This parsing method reads all tokens\n * returned by the {@link JsDocTokenStream#getJsDocToken()} method until the\n * {@link JsDocToken#EOC} is returned.\n *\n * @return {@code true} if JSDoc information was correctly parsed,\n *     {@code false} otherwise\n */\n",
        "file": "Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 870,
        "name": "parse",
        "start_line": 169,
        "span_start": 868,
        "bug_name": "Closure_68",
        "end_line": 913
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName\n *     | FunctionType | UnionType | RecordType | ArrayType\n */\n",
        "file": "Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1708,
        "name": "parseBasicTypeExpression",
        "start_line": 1685,
        "span_start": 1709,
        "bug_name": "Closure_68",
        "end_line": 1711
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * FunctionType := 'function' FunctionSignatureType\n * FunctionSignatureType :=\n *    TypeParameters '(' 'this' ':' TypeName, ParametersType ')' ResultType\n */\n",
        "file": "Closure_68/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1760,
        "name": "parseFunctionType",
        "start_line": 1758,
        "span_start": 1761,
        "bug_name": "Closure_68",
        "end_line": 1828
      }
    ]
  },
  "Closure_72": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Fix-up all local names to be unique for this subtree.\n * @param fnNode A mutable instance of the function to be inlined.\n */\n",
        "file": "Closure_72/src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
        "span_end": 151,
        "name": "makeLocalNamesUnique",
        "start_line": 142,
        "span_start": 152,
        "bug_name": "Closure_72",
        "end_line": 154
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Rename or remove labels.\n * @param node  The label node.\n * @param parent The parent of the label node.\n */\n",
        "file": "Closure_72/src/com/google/javascript/jscomp/RenameLabels.java",
        "span_end": 215,
        "name": "visitLabel",
        "start_line": 209,
        "span_start": 215,
        "bug_name": "Closure_72",
        "end_line": 235
      }
    ]
  },
  "Closure_74": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Try to fold comparison nodes, e.g ==\n */\n",
        "file": "Closure_74/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "span_end": 908,
        "name": "tryFoldComparison",
        "start_line": 887,
        "span_start": 907,
        "bug_name": "Closure_74",
        "end_line": 1069
      }
    ]
  },
  "Closure_75": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_75/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 313,
        "name": "getStringNumberValue",
        "start_line": 312,
        "span_start": 313,
        "bug_name": "Closure_75",
        "end_line": 356
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Copied from Rhino's ScriptRuntime\n */\n",
        "file": "Closure_75/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 375,
        "name": "isStrWhiteSpaceChar",
        "start_line": 375,
        "span_start": 375,
        "bug_name": "Closure_75",
        "end_line": 393
      }
    ]
  },
  "Closure_76": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Given a variable, node n in the tree and a sub-tree denoted by exprRoot as\n * the root, this function returns true if there exists a read of that\n * variable before a write to that variable that is on the right side of n.\n *\n * For example, suppose the node is x = 1:\n *\n * y = 1, x = 1; // false, there is no reads at all.\n * y = 1, x = 1, print(x) // true, there is a read right of n.\n * y = 1, x = 1, x = 2, print(x) // false, there is a read right of n but\n *                               // it is after a write.\n *\n * @param n The current node we should look at.\n * @param exprRoot The node\n */\n",
        "file": "Closure_76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "span_end": 319,
        "name": "isVariableStillLiveWithinExpression",
        "start_line": 290,
        "span_start": 300,
        "bug_name": "Closure_76",
        "end_line": 338
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\n",
        "file": "Closure_76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "span_end": 364,
        "name": "isVariableReadBeforeKill",
        "start_line": 352,
        "span_start": 362,
        "bug_name": "Closure_76",
        "end_line": 413
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Give an expression and a variable. It returns READ, if the first\n * reference of that variable is a read. It returns KILL, if the first\n * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n */\n",
        "file": "Closure_76/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "span_end": 378,
        "name": "isVariableReadBeforeKill",
        "start_line": 352,
        "span_start": 372,
        "bug_name": "Closure_76",
        "end_line": 413
      }
    ]
  },
  "Closure_79": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_79/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 122,
        "name": "process",
        "start_line": 118,
        "span_start": 122,
        "bug_name": "Closure_79",
        "end_line": 149
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Create a new variable in a synthetic script. This will prevent\n * subsequent compiler passes from crashing.\n */\n",
        "file": "Closure_79/src/com/google/javascript/jscomp/VarCheck.java",
        "span_end": 220,
        "name": "createSynthesizedExternVar",
        "start_line": 205,
        "span_start": 221,
        "bug_name": "Closure_79",
        "end_line": 222
      }
    ]
  },
  "Closure_80": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_80/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 1261,
        "name": "isBooleanResultHelper",
        "start_line": 1242,
        "span_start": 1262,
        "bug_name": "Closure_80",
        "end_line": 1267
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param locals A predicate to apply to unknown local values.\n * @return Whether the node is known to be a value that is not a reference\n *     outside the expression scope.\n */\n",
        "file": "Closure_80/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 2909,
        "name": "evaluatesToLocalValue",
        "start_line": 2865,
        "span_start": 2910,
        "bug_name": "Closure_80",
        "end_line": 2929
      }
    ]
  },
  "Closure_84": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_84/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 340,
        "name": "processAssignment",
        "start_line": 338,
        "span_start": 341,
        "bug_name": "Closure_84",
        "end_line": 349
      },
      {
        "member_type": "method",
        "file": "Closure_84/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 796,
        "name": "processUnaryExpression",
        "start_line": 796,
        "span_start": 797,
        "bug_name": "Closure_84",
        "end_line": 822
      },
      {
        "member_type": "method",
        "file": "Closure_84/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 805,
        "name": "processUnaryExpression",
        "start_line": 796,
        "span_start": 806,
        "bug_name": "Closure_84",
        "end_line": 822
      }
    ]
  },
  "Closure_85": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Tries to remove n if an unconditional branch node (break, continue or\n * return) if the target of n is the same as the the follow of n. That is, if\n * we remove n, the control flow remains the same. Also if n targets to\n * another unconditional branch, this function will recursively try to remove\n * the target branch as well. The reason why we want to cascade this removal\n * is because we only run this pass once. If we have code such as\n *\n * break -> break -> break\n *\n * where all 3 break's are useless. The order of removal matters. When we\n * first look at the first break, we see that it branches to the 2nd break.\n * However, if we remove the last break, the 2nd break becomes useless and\n * finally the first break becomes useless as well.\n *\n * @return The target of this jump. If the target is also useless jump,\n *     the target of that useless jump recursively.\n */\n",
        "file": "Closure_85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "span_end": 166,
        "name": "tryRemoveUnconditionalBranching",
        "start_line": 130,
        "span_start": 153,
        "bug_name": "Closure_85",
        "end_line": 179
      },
      {
        "member_type": "method",
        "file": "Closure_85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "span_end": 183,
        "name": "computeFollowing",
        "start_line": 181,
        "span_start": 183,
        "bug_name": "Closure_85",
        "end_line": 191
      },
      {
        "member_type": "method",
        "file": "Closure_85/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "span_end": 195,
        "name": "removeDeadExprStatementSafely",
        "start_line": 193,
        "span_start": 196,
        "bug_name": "Closure_85",
        "end_line": 229
      }
    ]
  },
  "Closure_89": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Updates the initial assignment to a collapsible property at global scope\n * by changing it to a variable declaration (e.g. a.b = 1 -> var a$b = 1).\n * The property's value may either be a primitive or an object literal or\n * function whose properties aren't collapsible.\n *\n * @param alias The flattened property name (e.g. \"a$b\")\n * @param refName The name for the reference being updated.\n * @param ref An object containing information about the assignment getting\n *     updated\n */\n",
        "file": "Closure_89/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 483,
        "name": "updateSimpleDeclaration",
        "start_line": 477,
        "span_start": 484,
        "bug_name": "Closure_89",
        "end_line": 543
      },
      {
        "member_type": "method",
        "file": "Closure_89/src/com/google/javascript/jscomp/GlobalNamespace.java",
        "span_end": 920,
        "name": "canCollapseUnannotatedChildNames",
        "start_line": 896,
        "span_start": 920,
        "bug_name": "Closure_89",
        "end_line": 925
      }
    ]
  },
  "Closure_90": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_90/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 184,
        "name": "apply",
        "start_line": 176,
        "span_start": 184,
        "bug_name": "Closure_90",
        "end_line": 190
      },
      {
        "member_type": "method",
        "file": "Closure_90/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 879,
        "name": "resolveInternal",
        "start_line": 861,
        "span_start": 880,
        "bug_name": "Closure_90",
        "end_line": 906
      }
    ]
  },
  "Closure_98": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime.\n */\n",
        "file": "Closure_98/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "span_end": 360,
        "name": "isAssignedOnceInLifetime",
        "start_line": 354,
        "span_start": 361,
        "bug_name": "Closure_98",
        "end_line": 371
      }
    ]
  },
  "Closure_99": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\n",
        "file": "Closure_99/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 91,
        "name": "shouldTraverse",
        "start_line": 84,
        "span_start": 92,
        "bug_name": "Closure_99",
        "end_line": 141
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\n",
        "file": "Closure_99/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 131,
        "name": "shouldTraverse",
        "start_line": 84,
        "span_start": 125,
        "bug_name": "Closure_99",
        "end_line": 141
      }
    ]
  },
  "Closure_100": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\n",
        "file": "Closure_100/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 98,
        "name": "shouldTraverse",
        "start_line": 84,
        "span_start": 99,
        "bug_name": "Closure_100",
        "end_line": 135
      },
      {
        "member_type": "method",
        "file": "Closure_100/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 146,
        "name": "shouldReportThis",
        "start_line": 146,
        "span_start": 146,
        "bug_name": "Closure_100",
        "end_line": 154
      }
    ]
  },
  "Closure_103": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines if the subtree might throw an exception.\n */\n",
        "file": "Closure_103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "span_end": 893,
        "name": "mayThrowException",
        "start_line": 884,
        "span_start": 894,
        "bug_name": "Closure_103",
        "end_line": 905
      },
      {
        "member_type": "method",
        "file": "Closure_103/src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "span_end": 765,
        "name": "getTypeWithProperty",
        "start_line": 736,
        "span_start": 763,
        "bug_name": "Closure_103",
        "end_line": 774
      }
    ]
  },
  "Closure_105": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\n",
        "file": "Closure_105/src/com/google/javascript/jscomp/FoldConstants.java",
        "span_end": 1492,
        "name": "tryFoldStringJoin",
        "start_line": 1461,
        "span_start": 1477,
        "bug_name": "Closure_105",
        "end_line": 1551
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n */\n",
        "file": "Closure_105/src/com/google/javascript/jscomp/FoldConstants.java",
        "span_end": 1500,
        "name": "tryFoldStringJoin",
        "start_line": 1461,
        "span_start": 1500,
        "bug_name": "Closure_105",
        "end_line": 1551
      }
    ]
  },
  "Closure_106": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_106/src/com/google/javascript/jscomp/GlobalNamespace.java",
        "span_end": 906,
        "name": "canCollapseUnannotatedChildNames",
        "start_line": 899,
        "span_start": 907,
        "bug_name": "Closure_106",
        "end_line": 917
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Records a block-level description.\n *\n * @return {@code true} if the description was recorded.\n */\n",
        "file": "Closure_106/src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "span_end": 191,
        "name": "recordBlockDescription",
        "start_line": 188,
        "span_start": 189,
        "bug_name": "Closure_106",
        "end_line": 191
      }
    ]
  },
  "Closure_108": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 315,
        "name": "exitScope",
        "start_line": 309,
        "span_start": 316,
        "bug_name": "Closure_108",
        "end_line": 323
      },
      {
        "member_type": "method",
        "file": "Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 431,
        "name": "findAliases",
        "start_line": 359,
        "span_start": 432,
        "bug_name": "Closure_108",
        "end_line": 448
      },
      {
        "member_type": "method",
        "file": "Closure_108/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 581,
        "name": "visit",
        "start_line": 525,
        "span_start": 581,
        "bug_name": "Closure_108",
        "end_line": 592
      }
    ]
  },
  "Closure_110": {
    "bug_count": 6,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 357,
        "name": "findAliases",
        "start_line": 352,
        "span_start": 358,
        "bug_name": "Closure_110",
        "end_line": 440
      },
      {
        "member_type": "method",
        "file": "Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 371,
        "name": "findAliases",
        "start_line": 352,
        "span_start": 366,
        "bug_name": "Closure_110",
        "end_line": 440
      },
      {
        "member_type": "method",
        "file": "Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 383,
        "name": "findAliases",
        "start_line": 352,
        "span_start": 383,
        "bug_name": "Closure_110",
        "end_line": 440
      },
      {
        "member_type": "method",
        "file": "Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 394,
        "name": "findAliases",
        "start_line": 352,
        "span_start": 392,
        "bug_name": "Closure_110",
        "end_line": 440
      },
      {
        "member_type": "method",
        "file": "Closure_110/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 408,
        "name": "findAliases",
        "start_line": 352,
        "span_start": 408,
        "bug_name": "Closure_110",
        "end_line": 440
      },
      {
        "member_type": "method",
        "file": "Closure_110/src/com/google/javascript/rhino/Node.java",
        "span_end": 553,
        "name": "getChildBefore",
        "start_line": 549,
        "span_start": 554,
        "bug_name": "Closure_110",
        "end_line": 565
      }
    ]
  },
  "Closure_115": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines whether a function can be inlined at a particular call site.\n * There are several criteria that the function and reference must hold in\n * order for the functions to be inlined:\n * 1) If a call's arguments have side effects,\n * the corresponding argument in the function must only be referenced once.\n * For instance, this will not be inlined:\n * <pre>\n *     function foo(a) { return a + a }\n *     x = foo(i++);\n * </pre>\n */\n",
        "file": "Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 704,
        "name": "canInlineReferenceDirectly",
        "start_line": 689,
        "span_start": 697,
        "bug_name": "Closure_115",
        "end_line": 747
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines whether a function can be inlined at a particular call site.\n * There are several criteria that the function and reference must hold in\n * order for the functions to be inlined:\n * 1) If a call's arguments have side effects,\n * the corresponding argument in the function must only be referenced once.\n * For instance, this will not be inlined:\n * <pre>\n *     function foo(a) { return a + a }\n *     x = foo(i++);\n * </pre>\n */\n",
        "file": "Closure_115/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 732,
        "name": "canInlineReferenceDirectly",
        "start_line": 689,
        "span_start": 730,
        "bug_name": "Closure_115",
        "end_line": 747
      }
    ]
  },
  "Closure_116": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines whether a function can be inlined at a particular call site.\n * There are several criteria that the function and reference must hold in\n * order for the functions to be inlined:\n * 1) If a call's arguments have side effects,\n * the corresponding argument in the function must only be referenced once.\n * For instance, this will not be inlined:\n * <pre>\n *     function foo(a) { return a + a }\n *     x = foo(i++);\n * </pre>\n */\n",
        "file": "Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 696,
        "name": "canInlineReferenceDirectly",
        "start_line": 689,
        "span_start": 697,
        "bug_name": "Closure_116",
        "end_line": 761
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines whether a function can be inlined at a particular call site.\n * There are several criteria that the function and reference must hold in\n * order for the functions to be inlined:\n * 1) If a call's arguments have side effects,\n * the corresponding argument in the function must only be referenced once.\n * For instance, this will not be inlined:\n * <pre>\n *     function foo(a) { return a + a }\n *     x = foo(i++);\n * </pre>\n */\n",
        "file": "Closure_116/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 722,
        "name": "canInlineReferenceDirectly",
        "start_line": 689,
        "span_start": 723,
        "bug_name": "Closure_116",
        "end_line": 761
      }
    ]
  },
  "Closure_117": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Given a node, get a human-readable name for the type of that node so\n * that will be easy for the programmer to find the original declaration.\n *\n * For example, if SubFoo's property \"bar\" might have the human-readable\n * name \"Foo.prototype.bar\".\n *\n * @param n The node.\n * @param dereference If true, the type of the node will be dereferenced\n *     to an Object type, if possible.\n */\n",
        "file": "Closure_117/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 726,
        "name": "getReadableJSTypeName",
        "start_line": 724,
        "span_start": 725,
        "bug_name": "Closure_117",
        "end_line": 777
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Given a node, get a human-readable name for the type of that node so\n * that will be easy for the programmer to find the original declaration.\n *\n * For example, if SubFoo's property \"bar\" might have the human-readable\n * name \"Foo.prototype.bar\".\n *\n * @param n The node.\n * @param dereference If true, the type of the node will be dereferenced\n *     to an Object type, if possible.\n */\n",
        "file": "Closure_117/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 767,
        "name": "getReadableJSTypeName",
        "start_line": 724,
        "span_start": 756,
        "bug_name": "Closure_117",
        "end_line": 777
      }
    ]
  },
  "Closure_134": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 210,
        "name": "process",
        "start_line": 195,
        "span_start": 210,
        "bug_name": "Closure_134",
        "end_line": 248
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns true if prop is in an independent set from all properties in\n * this sub graph.  That is, if none of its types is contained in the\n * related types for this sub graph and if none if its related types is one\n * of the types in the sub graph.\n */\n",
        "file": "Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 356,
        "name": "isIndependentOf",
        "start_line": 351,
        "span_start": 356,
        "bug_name": "Closure_134",
        "end_line": 356
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Adds the node to the sub graph, adding all of its types to the set of\n * types in the sub graph and all of its related types to the related types\n * for the sub graph.\n */\n",
        "file": "Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 366,
        "name": "addNode",
        "start_line": 363,
        "span_start": 366,
        "bug_name": "Closure_134",
        "end_line": 366
      },
      {
        "member_type": "method",
        "file": "Closure_134/src/com/google/javascript/jscomp/AmbiguateProperties.java",
        "span_end": 599,
        "name": "addNonUnionType",
        "start_line": 587,
        "span_start": 594,
        "bug_name": "Closure_134",
        "end_line": 599
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Find the function that's being overridden on this type, if any.\n */\n",
        "file": "Closure_134/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 562,
        "name": "findOverriddenFunction",
        "start_line": 553,
        "span_start": 560,
        "bug_name": "Closure_134",
        "end_line": 573
      }
    ]
  },
  "Closure_135": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Replaces references to \"this\" with references to name.  Do not\n * traverse function boundaries.\n */\n",
        "file": "Closure_135/src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "span_end": 361,
        "name": "replaceReferencesToThis",
        "start_line": 354,
        "span_start": 362,
        "bug_name": "Closure_135",
        "end_line": 368
      },
      {
        "member_type": "method",
        "file": "Closure_135/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 471,
        "name": "defineProperty",
        "start_line": 470,
        "span_start": 472,
        "bug_name": "Closure_135",
        "end_line": 487
      }
    ]
  },
  "Closure_136": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Adds a node that may represent a function signature (if it's a function\n * itself or the name of a function).\n */\n",
        "file": "Closure_136/src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "span_end": 125,
        "name": "addPossibleSignature",
        "start_line": 101,
        "span_start": 102,
        "bug_name": "Closure_136",
        "end_line": 117
      },
      {
        "member_type": "method",
        "file": "Closure_136/src/com/google/javascript/jscomp/RenameVars.java",
        "span_end": 203,
        "name": "visit",
        "start_line": 170,
        "span_start": 203,
        "bug_name": "Closure_136",
        "end_line": 234
      }
    ]
  },
  "Closure_137": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 344,
        "name": "containsSeparator",
        "start_line": 266,
        "span_start": 266,
        "bug_name": "Closure_137",
        "end_line": 358
      },
      {
        "member_type": "constructor",
        "file": "Closure_137/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "span_end": 390,
        "name": "ContextualRenamer",
        "start_line": 388,
        "span_start": 391,
        "bug_name": "Closure_137",
        "end_line": 391
      },
      {
        "member_type": "method",
        "file": "Closure_137/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 82,
        "name": "process",
        "start_line": 78,
        "span_start": 82,
        "bug_name": "Closure_137",
        "end_line": 104
      },
      {
        "member_type": "method",
        "file": "Closure_137/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 101,
        "name": "process",
        "start_line": 78,
        "span_start": 102,
        "bug_name": "Closure_137",
        "end_line": 104
      }
    ]
  },
  "Closure_138": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_138/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
        "span_end": 208,
        "name": "getPreciserScopeKnowingConditionOutcome",
        "start_line": 200,
        "span_start": 208,
        "bug_name": "Closure_138",
        "end_line": 223
      },
      {
        "member_type": "method",
        "file": "Closure_138/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
        "span_end": 218,
        "name": "getPreciserScopeKnowingConditionOutcome",
        "start_line": 200,
        "span_start": 218,
        "bug_name": "Closure_138",
        "end_line": 223
      },
      {
        "member_type": "method",
        "file": "Closure_138/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 646,
        "name": "traverseName",
        "start_line": 621,
        "span_start": 632,
        "bug_name": "Closure_138",
        "end_line": 660
      }
    ]
  },
  "Closure_139": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 280,
        "name": "visit",
        "start_line": 268,
        "span_start": 281,
        "bug_name": "Closure_139",
        "end_line": 285
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Remove duplicate VAR declarations.\n */\n",
        "file": "Closure_139/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 522,
        "name": "removeDuplicateDeclarations",
        "start_line": 519,
        "span_start": 521,
        "bug_name": "Closure_139",
        "end_line": 525
      }
    ]
  },
  "Closure_140": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Initializes the instance state needed for a compile job.\n */\n",
        "file": "Closure_140/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 263,
        "name": "init",
        "start_line": 259,
        "span_start": 264,
        "bug_name": "Closure_140",
        "end_line": 283
      },
      {
        "member_type": "method",
        "file": "Closure_140/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 1587,
        "name": "getNodeForCodeInsertion",
        "start_line": 1577,
        "span_start": 1582,
        "bug_name": "Closure_140",
        "end_line": 1592
      }
    ]
  },
  "Closure_141": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * @param knownConstants A set of names known to be constant value at\n * node 'n' (such as locals that are last written before n can execute).\n * @return Whether the tree can be affected by side-effects or\n * has side-effects.\n */\n",
        "file": "Closure_141/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 603,
        "name": "canBeSideEffected",
        "start_line": 584,
        "span_start": 602,
        "bug_name": "Closure_141",
        "end_line": 616
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Query the DefinitionProvider for the list of definitions that\n * correspond to a given qualified name subtree.  Return null if\n * DefinitionProvider does not contain an entry for a given name,\n * one or more of the values returned by getDeclarations is not\n * callable, or the \"name\" node is not a GETPROP or NAME.\n *\n * @param definitionProvider The name reference graph\n * @param name Query node\n * @return non-empty definition list or null\n */\n",
        "file": "Closure_141/src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "span_end": 181,
        "name": "getCallableDefinitions",
        "start_line": 175,
        "span_start": 177,
        "bug_name": "Closure_141",
        "end_line": 217
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Query the DefinitionProvider for the list of definitions that\n * correspond to a given qualified name subtree.  Return null if\n * DefinitionProvider does not contain an entry for a given name,\n * one or more of the values returned by getDeclarations is not\n * callable, or the \"name\" node is not a GETPROP or NAME.\n *\n * @param definitionProvider The name reference graph\n * @param name Query node\n * @return non-empty definition list or null\n */\n",
        "file": "Closure_141/src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "span_end": 197,
        "name": "getCallableDefinitions",
        "start_line": 175,
        "span_start": 198,
        "bug_name": "Closure_141",
        "end_line": 217
      }
    ]
  },
  "Closure_142": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_142/src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "span_end": 107,
        "name": "enterScope",
        "start_line": 90,
        "span_start": 108,
        "bug_name": "Closure_142",
        "end_line": 123
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n",
        "file": "Closure_142/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1167,
        "name": "extractMultilineTextualBlock",
        "start_line": 1112,
        "span_start": 1168,
        "bug_name": "Closure_142",
        "end_line": 1209
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Extracts the text found on the current line and all subsequent\n * until either an annotation, end of comment or end of file is reached.\n * Note that if this method detects an end of line as the first token, it\n * will quit immediately (indicating that there is no text where it was\n * expected).  Note that token = info.token; should be called after this\n * method is used to update the token properly in the parser.\n *\n * @param token The start token.\n * @param option How to handle whitespace.\n *\n * @return The extraction information.\n */\n",
        "file": "Closure_142/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "span_end": 1182,
        "name": "extractMultilineTextualBlock",
        "start_line": 1112,
        "span_start": 1183,
        "bug_name": "Closure_142",
        "end_line": 1209
      }
    ]
  },
  "Closure_143": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Create a map of constant names to constant values from a textual\n * description of the map.\n *\n * @param definitions A list of overriding definitions for defines in\n *     the form <name>[=<val>], where <val> is a number, boolean, or\n *     single-quoted string without single quotes.\n */\n",
        "file": "Closure_143/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 871,
        "name": "createDefineReplacements",
        "start_line": 847,
        "span_start": 871,
        "bug_name": "Closure_143",
        "end_line": 896
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Attempts to replace the input node with a simpler but functionally\n * equivalent set of nodes.\n */\n",
        "file": "Closure_143/src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
        "span_end": 91,
        "name": "trySimplify",
        "start_line": 84,
        "span_start": 91,
        "bug_name": "Closure_143",
        "end_line": 95
      }
    ]
  },
  "Closure_144": {
    "bug_count": 6,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Infer the return type from JSDocInfo.\n */\n",
        "file": "Closure_144/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 202,
        "name": "inferReturnType",
        "start_line": 199,
        "span_start": 200,
        "bug_name": "Closure_144",
        "end_line": 208
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Add a parameter to the param list.\n * @param builder A builder.\n * @param paramType The parameter type.\n * @param warnedAboutArgList Whether we've already warned about arg ordering\n *     issues (like if optional args appeared before required ones).\n * @param isOptional Is this an optional parameter?\n * @param isVarArgs Is this a var args parameter?\n * @return Whether a warning was emitted.\n */\n",
        "file": "Closure_144/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "span_end": 496,
        "name": "addParameter",
        "start_line": 468,
        "span_start": 496,
        "bug_name": "Closure_144",
        "end_line": 498
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets the function type from the function node and its attached\n * {@link JSDocInfo}.\n * @param name the function's name\n * @param rValue the function node. It must be a {@link Token#FUNCTION}.\n * @param info the {@link JSDocInfo} attached to the function definition\n * @param lvalueNode The node where this function is being\n *     assigned. For example, {@code A.prototype.foo = ...} would be used to\n *     determine that this function is a method of A.prototype. May be\n *     null to indicate that this is not being assigned to a qualified name.\n */\n",
        "file": "Closure_144/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 576,
        "name": "getFunctionType",
        "start_line": 550,
        "span_start": 577,
        "bug_name": "Closure_144",
        "end_line": 647
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets the function type from the function node and its attached\n * {@link JSDocInfo}.\n * @param name the function's name\n * @param rValue the function node. It must be a {@link Token#FUNCTION}.\n * @param info the {@link JSDocInfo} attached to the function definition\n * @param lvalueNode The node where this function is being\n *     assigned. For example, {@code A.prototype.foo = ...} would be used to\n *     determine that this function is a method of A.prototype. May be\n *     null to indicate that this is not being assigned to a qualified name.\n */\n",
        "file": "Closure_144/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 616,
        "name": "getFunctionType",
        "start_line": 550,
        "span_start": 617,
        "bug_name": "Closure_144",
        "end_line": 647
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets the function type from the function node and its attached\n * {@link JSDocInfo}.\n * @param name the function's name\n * @param rValue the function node. It must be a {@link Token#FUNCTION}.\n * @param info the {@link JSDocInfo} attached to the function definition\n * @param lvalueNode The node where this function is being\n *     assigned. For example, {@code A.prototype.foo = ...} would be used to\n *     determine that this function is a method of A.prototype. May be\n *     null to indicate that this is not being assigned to a qualified name.\n */\n",
        "file": "Closure_144/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 633,
        "name": "getFunctionType",
        "start_line": 550,
        "span_start": 634,
        "bug_name": "Closure_144",
        "end_line": 647
      },
      {
        "member_type": "method",
        "file": "Closure_144/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 517,
        "name": "cloneWithNewReturnType",
        "start_line": 515,
        "span_start": 517,
        "bug_name": "Closure_144",
        "end_line": 521
      }
    ]
  },
  "Closure_147": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Since this pass reports errors only when a global {@code this} keyword\n * is encountered, there is no reason to traverse non global contexts.\n */\n",
        "file": "Closure_147/src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "span_end": 108,
        "name": "shouldTraverse",
        "start_line": 84,
        "span_start": 108,
        "bug_name": "Closure_147",
        "end_line": 143
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Insert checks for the parameters of the function.\n */\n",
        "file": "Closure_147/src/com/google/javascript/jscomp/RuntimeTypeCheck.java",
        "span_end": 246,
        "name": "visitFunction",
        "start_line": 239,
        "span_start": 247,
        "bug_name": "Closure_147",
        "end_line": 279
      }
    ]
  },
  "Closure_148": {
    "bug_count": 13,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * As each segment is visited write out the appropriate line mapping.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 395,
        "name": "visit",
        "start_line": 382,
        "span_start": 373,
        "bug_name": "Closure_148",
        "end_line": 412
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * As each segment is visited write out the appropriate line mapping.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 413,
        "name": "visit",
        "start_line": 389,
        "span_start": 405,
        "bug_name": "Closure_148",
        "end_line": 412
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Begin the entry for a new line.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 432,
        "name": "openLine",
        "start_line": 430,
        "span_start": 426,
        "bug_name": "Closure_148",
        "end_line": 435
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * End the entry for a line.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 458,
        "name": "closeLine",
        "start_line": 440,
        "span_start": 441,
        "bug_name": "Closure_148",
        "end_line": 459
      },
      {
        "member_type": "method",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 543,
        "name": "traverse",
        "start_line": 501,
        "span_start": 496,
        "bug_name": "Closure_148",
        "end_line": 543
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Folds 'typeof(foo)' if foo is a literal, e.g.\n * typeof(\"bar\") --> \"string\"\n * typeof(6) --> \"number\"\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "span_end": 181,
        "name": "tryFoldTypeof",
        "start_line": 156,
        "span_start": 182,
        "bug_name": "Closure_148",
        "end_line": 203
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Appends the mapping to the given buffer.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 116,
        "name": "appendMappingTo",
        "start_line": 101,
        "span_start": 85,
        "bug_name": "Closure_148",
        "end_line": 135
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Add used mappings to the supplied Appendable.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 144,
        "name": "appendMappings",
        "start_line": 140,
        "span_start": 143,
        "bug_name": "Closure_148",
        "end_line": 146
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Escapes the given string for JSON.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 179,
        "name": "escapeString",
        "start_line": 170,
        "span_start": 163,
        "bug_name": "Closure_148",
        "end_line": 172
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Adds a mapping for the given node.  Mappings must be added in order.\n *\n * @param node The node that the new mapping represents.\n * @param startPosition The position on the starting line\n * @param endPosition The position on the ending line.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 202,
        "name": "addMapping",
        "start_line": 181,
        "span_start": 203,
        "bug_name": "Closure_148",
        "end_line": 232
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Appends the source map in LavaBug format to the given buffer.\n *\n * @param out The stream to which the map will be appended.\n * @param name The name of the generated source file that this source map\n *   represents.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 304,
        "name": "appendTo",
        "start_line": 291,
        "span_start": 304,
        "bug_name": "Closure_148",
        "end_line": 346
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Appends the source map in LavaBug format to the given buffer.\n *\n * @param out The stream to which the map will be appended.\n * @param name The name of the generated source file that this source map\n *   represents.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 351,
        "name": "appendTo",
        "start_line": 291,
        "span_start": 326,
        "bug_name": "Closure_148",
        "end_line": 368
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Assigns sequential ids to used mappings, and returns the last line mapped.\n */\n",
        "file": "Closure_148/src/com/google/javascript/jscomp/SourceMap.java",
        "span_end": 364,
        "name": "prepMappings",
        "start_line": 351,
        "span_start": 360,
        "bug_name": "Closure_148",
        "end_line": 368
      }
    ]
  },
  "Closure_149": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Sets options based on the configurations set flags API.\n * Called during the run() run() method.\n * If you want to ignore the flags API, or intepret flags your own way,\n * then you should override this method.\n */\n",
        "file": "Closure_149/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 158,
        "name": "setRunOptions",
        "start_line": 141,
        "span_start": 159,
        "bug_name": "Closure_149",
        "end_line": 180
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Parses command-line arguments and runs the compiler.\n *\n * @return system exit status\n */\n",
        "file": "Closure_149/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 522,
        "name": "doRun",
        "start_line": 505,
        "span_start": 518,
        "bug_name": "Closure_149",
        "end_line": 543
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Query the flag for the output charset.\n *\n * Let the outputCharset be the same as the input charset... except if\n * we're reading in UTF-8 by default.  By tradition, we've always\n * output ASCII to avoid various hiccups with different browsers,\n * proxies and firewalls.\n *\n * @return Name of the charset to use when writing outputs. Guaranteed to\n *    be a supported charset.\n * @throws FlagUsageException if flag is not a valid Charset name.\n */\n",
        "file": "Closure_149/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 692,
        "name": "getOutputCharset",
        "start_line": 689,
        "span_start": 693,
        "bug_name": "Closure_149",
        "end_line": 698
      },
      {
        "member_type": "method",
        "file": "Closure_149/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 471,
        "name": "createOptions",
        "start_line": 454,
        "span_start": 471,
        "bug_name": "Closure_149",
        "end_line": 472
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Generates JavaScript source code for an AST.\n */\n",
        "file": "Closure_149/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 1362,
        "name": "toSource",
        "start_line": 1355,
        "span_start": 1362,
        "bug_name": "Closure_149",
        "end_line": 1367
      }
    ]
  },
  "Closure_151": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_151/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 417,
        "name": "initConfigFromFlags",
        "start_line": 390,
        "span_start": 418,
        "bug_name": "Closure_151",
        "end_line": 469
      }
    ]
  },
  "Closure_153": {
    "bug_count": 10,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Declares a variable.\n *\n * @param n The node corresponding to the variable name.\n * @param declaredType The variable's type, according to JSDoc\n */\n",
        "file": "Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 243,
        "name": "declareVar",
        "start_line": 231,
        "span_start": 234,
        "bug_name": "Closure_153",
        "end_line": 243
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Remove duplicate VAR declarations encountered discovered during\n * scope creation.\n */\n",
        "file": "Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 646,
        "name": "onRedeclaration",
        "start_line": 637,
        "span_start": 638,
        "bug_name": "Closure_153",
        "end_line": 691
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Remove duplicate VAR declarations encountered discovered during\n * scope creation.\n */\n",
        "file": "Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 669,
        "name": "onRedeclaration",
        "start_line": 637,
        "span_start": 669,
        "bug_name": "Closure_153",
        "end_line": 691
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Remove duplicate VAR declarations encountered discovered during\n * scope creation.\n */\n",
        "file": "Closure_153/src/com/google/javascript/jscomp/Normalize.java",
        "span_end": 681,
        "name": "onRedeclaration",
        "start_line": 637,
        "span_start": 681,
        "bug_name": "Closure_153",
        "end_line": 691
      },
      {
        "member_type": "method",
        "file": "Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 94,
        "name": "scanRoot",
        "start_line": 82,
        "span_start": 94,
        "bug_name": "Closure_153",
        "end_line": 112
      },
      {
        "member_type": "method",
        "file": "Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 102,
        "name": "scanRoot",
        "start_line": 82,
        "span_start": 102,
        "bug_name": "Closure_153",
        "end_line": 112
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Scans and gather variables declarations under a Node\n */\n",
        "file": "Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 126,
        "name": "scanVars",
        "start_line": 117,
        "span_start": 124,
        "bug_name": "Closure_153",
        "end_line": 170
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Scans and gather variables declarations under a Node\n */\n",
        "file": "Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 141,
        "name": "scanVars",
        "start_line": 117,
        "span_start": 141,
        "bug_name": "Closure_153",
        "end_line": 170
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Scans and gather variables declarations under a Node\n */\n",
        "file": "Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 153,
        "name": "scanVars",
        "start_line": 117,
        "span_start": 153,
        "bug_name": "Closure_153",
        "end_line": 170
      },
      {
        "member_type": "method",
        "file": "Closure_153/src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "span_end": 189,
        "name": "onRedeclaration",
        "start_line": 184,
        "span_start": 188,
        "bug_name": "Closure_153",
        "end_line": 222
      }
    ]
  },
  "Closure_154": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Given a constructor type and a property name, check that the property has\n * the JSDoc annotation @override iff the property is declared on a\n * superclass. Several checks regarding inheritance correctness are also\n * performed.\n */\n",
        "file": "Closure_154/src/com/google/javascript/jscomp/TypeCheck.java",
        "span_end": 1058,
        "name": "checkDeclaredPropertyInheritance",
        "start_line": 1006,
        "span_start": 1049,
        "bug_name": "Closure_154",
        "end_line": 1080
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Expect that the peroperty in an interface that this type implements is\n * implemented and correctly typed.\n */\n",
        "file": "Closure_154/src/com/google/javascript/jscomp/TypeValidator.java",
        "span_end": 588,
        "name": "expectInterfaceProperty",
        "start_line": 584,
        "span_start": 588,
        "bug_name": "Closure_154",
        "end_line": 615
      }
    ]
  },
  "Closure_155": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * For all variables in this scope, see if they are only used once.\n * If it looks safe to do so, inline them.\n */\n",
        "file": "Closure_155/src/com/google/javascript/jscomp/InlineVariables.java",
        "span_end": 198,
        "name": "doInlinesForScope",
        "start_line": 196,
        "span_start": 199,
        "bug_name": "Closure_155",
        "end_line": 225
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * For all variables in this scope, see if they are only used once.\n * If it looks safe to do so, inline them.\n */\n",
        "file": "Closure_155/src/com/google/javascript/jscomp/InlineVariables.java",
        "span_end": 230,
        "name": "doInlinesForScope",
        "start_line": 196,
        "span_start": 220,
        "bug_name": "Closure_155",
        "end_line": 247
      },
      {
        "member_type": "method",
        "file": "Closure_155/src/com/google/javascript/jscomp/InlineVariables.java",
        "span_end": 275,
        "name": "inlineNonConstants",
        "start_line": 257,
        "span_start": 275,
        "bug_name": "Closure_155",
        "end_line": 326
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * For each node, update the block stack and reference collection\n * as appropriate.\n */\n",
        "file": "Closure_155/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "span_end": 123,
        "name": "visit",
        "start_line": 121,
        "span_start": 123,
        "bug_name": "Closure_155",
        "end_line": 138
      },
      {
        "member_type": "constructor",
        "file": "Closure_155/src/com/google/javascript/jscomp/Scope.java",
        "span_end": 293,
        "name": "Arguments",
        "start_line": 292,
        "span_start": 290,
        "bug_name": "Closure_155",
        "end_line": 305
      }
    ]
  },
  "Closure_156": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Collapses definitions of the collapsible properties of a global name.\n * Recurses on subnames that also represent JavaScript objects with\n * collapsible properties.\n *\n * @param n A node representing a global name\n * @param alias The flattened name for {@code n}\n */\n",
        "file": "Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 456,
        "name": "collapseDeclarationOfNameAndDescendants",
        "start_line": 451,
        "span_start": 455,
        "bug_name": "Closure_156",
        "end_line": 474
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Updates the first initialization (a.k.a \"declaration\") of a global name.\n * This involves flattening the global name (if it's not just a global\n * variable name already), collapsing object literal keys into global\n * variables, declaring stub global variables for properties added later\n * in a local scope.\n *\n * It may seem odd that this function also takes care of declaring stubs\n * for direct children. The ultimate goal of this function is to eliminate\n * the global name entirely (when possible), so that \"middlemen\" namespaces\n * disappear, and to do that we need to make sure that all the direct children\n * will be collapsed as well.\n *\n * @param n An object representing a global name (e.g. \"a\", \"a.b.c\")\n * @param alias The flattened name for {@code n} (e.g. \"a\", \"a$b$c\")\n * @param canCollapseChildNames Whether it's possible to collapse children of\n *     this name. (This is mostly passed for convenience; it's equivalent to\n *     n.canCollapseChildNames()).\n */\n",
        "file": "Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 574,
        "name": "updateObjLitOrFunctionDeclaration",
        "start_line": 574,
        "span_start": 574,
        "bug_name": "Closure_156",
        "end_line": 600
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Updates the first initialization (a.k.a \"declaration\") of a global name.\n * This involves flattening the global name (if it's not just a global\n * variable name already), collapsing object literal keys into global\n * variables, declaring stub global variables for properties added later\n * in a local scope.\n *\n * It may seem odd that this function also takes care of declaring stubs\n * for direct children. The ultimate goal of this function is to eliminate\n * the global name entirely (when possible), so that \"middlemen\" namespaces\n * disappear, and to do that we need to make sure that all the direct children\n * will be collapsed as well.\n *\n * @param n An object representing a global name (e.g. \"a\", \"a.b.c\")\n * @param alias The flattened name for {@code n} (e.g. \"a\", \"a$b$c\")\n * @param canCollapseChildNames Whether it's possible to collapse children of\n *     this name. (This is mostly passed for convenience; it's equivalent to\n *     n.canCollapseChildNames()).\n */\n",
        "file": "Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 595,
        "name": "updateObjLitOrFunctionDeclaration",
        "start_line": 574,
        "span_start": 589,
        "bug_name": "Closure_156",
        "end_line": 600
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Updates the first initialization (a.k.a \"declaration\") of a global name\n * that occurs at an ASSIGN node. See comment for\n * {@link #updateObjLitOrFunctionDeclaration}.\n *\n * @param n An object representing a global name (e.g. \"a\", \"a.b.c\")\n * @param alias The flattened name for {@code n} (e.g. \"a\", \"a$b$c\")\n */\n",
        "file": "Closure_156/src/com/google/javascript/jscomp/CollapseProperties.java",
        "span_end": 659,
        "name": "updateObjLitOrFunctionDeclarationAtAssignNode",
        "start_line": 610,
        "span_start": 653,
        "bug_name": "Closure_156",
        "end_line": 671
      }
    ]
  },
  "Closure_157": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_157/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 350,
        "name": "add",
        "start_line": 82,
        "span_start": 343,
        "bug_name": "Closure_157",
        "end_line": 734
      },
      {
        "member_type": "method",
        "file": "Closure_157/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 666,
        "name": "add",
        "start_line": 82,
        "span_start": 654,
        "bug_name": "Closure_157",
        "end_line": 734
      },
      {
        "member_type": "method",
        "file": "Closure_157/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 724,
        "name": "add",
        "start_line": 82,
        "span_start": 724,
        "bug_name": "Closure_157",
        "end_line": 734
      },
      {
        "member_type": "method",
        "file": "Closure_157/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 257,
        "name": "transformNumberAsString",
        "start_line": 255,
        "span_start": 255,
        "bug_name": "Closure_157",
        "end_line": 263
      },
      {
        "member_type": "method",
        "file": "Closure_157/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "span_end": 354,
        "name": "processGeneric",
        "start_line": 342,
        "span_start": 347,
        "bug_name": "Closure_157",
        "end_line": 349
      },
      {
        "member_type": "method",
        "file": "Closure_157/src/com/google/javascript/jscomp/RenamePrototypes.java",
        "span_end": 336,
        "name": "visit",
        "start_line": 313,
        "span_start": 336,
        "bug_name": "Closure_157",
        "end_line": 343
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Processes the parent of a GETPROP prototype, which can either be\n * another GETPROP (in the case of Foo.prototype.bar), or can be\n * an assignment (in the case of Foo.prototype = ...).\n */\n",
        "file": "Closure_157/src/com/google/javascript/jscomp/RenamePrototypes.java",
        "span_end": 377,
        "name": "processPrototypeParent",
        "start_line": 350,
        "span_start": 377,
        "bug_name": "Closure_157",
        "end_line": 385
      }
    ]
  },
  "Closure_158": {
    "bug_count": 8,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Sets options based on the configurations set flags API.\n * Called during the run() run() method.\n * If you want to ignore the flags API, or intepret flags your own way,\n * then you should override this method.\n */\n",
        "file": "Closure_158/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 202,
        "name": "setRunOptions",
        "start_line": 193,
        "span_start": 197,
        "bug_name": "Closure_158",
        "end_line": 256
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Add warning guards.\n */\n",
        "file": "Closure_158/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 1516,
        "name": "setWarningGuardSpec",
        "start_line": 1501,
        "span_start": 1497,
        "bug_name": "Closure_158",
        "end_line": 1519
      },
      {
        "member_type": "method",
        "file": "Closure_158/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "span_end": 1630,
        "name": "add",
        "start_line": 1628,
        "span_start": 1628,
        "bug_name": "Closure_158",
        "end_line": 1630
      },
      {
        "member_type": "method",
        "file": "Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 395,
        "name": "getDefaultMetaVariable",
        "start_line": 387,
        "span_start": 389,
        "bug_name": "Closure_158",
        "end_line": 390
      },
      {
        "member_type": "constructor",
        "file": "Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 484,
        "name": "CommandLineRunner",
        "start_line": 482,
        "span_start": 485,
        "bug_name": "Closure_158",
        "end_line": 485
      },
      {
        "member_type": "method",
        "file": "Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 499,
        "name": "processArgs",
        "start_line": 487,
        "span_start": 500,
        "bug_name": "Closure_158",
        "end_line": 513
      },
      {
        "member_type": "method",
        "file": "Closure_158/src/com/google/javascript/jscomp/CommandLineRunner.java",
        "span_end": 554,
        "name": "initConfigFromFlags",
        "start_line": 541,
        "span_start": 552,
        "bug_name": "Closure_158",
        "end_line": 608
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Adds warning levels by name.\n */\n",
        "file": "Closure_158/src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "span_end": 190,
        "name": "setWarningLevel",
        "start_line": 185,
        "span_start": 185,
        "bug_name": "Closure_158",
        "end_line": 190
      }
    ]
  },
  "Closure_160": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Initialize the compiler options. Only necessary if you're not doing\n * a normal compile() job.\n */\n",
        "file": "Closure_160/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 267,
        "name": "initOptions",
        "start_line": 226,
        "span_start": 268,
        "bug_name": "Closure_160",
        "end_line": 282
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Initialize the compiler options. Only necessary if you're not doing\n * a normal compile() job.\n */\n",
        "file": "Closure_160/src/com/google/javascript/jscomp/Compiler.java",
        "span_end": 281,
        "name": "initOptions",
        "start_line": 226,
        "span_start": 275,
        "bug_name": "Closure_160",
        "end_line": 282
      }
    ]
  },
  "Closure_162": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 225,
        "name": "enterScope",
        "start_line": 220,
        "span_start": 226,
        "bug_name": "Closure_162",
        "end_line": 228
      },
      {
        "member_type": "method",
        "file": "Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 272,
        "name": "findAliases",
        "start_line": 272,
        "span_start": 271,
        "bug_name": "Closure_162",
        "end_line": 293
      },
      {
        "member_type": "method",
        "file": "Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 328,
        "name": "validateScopeCall",
        "start_line": 295,
        "span_start": 303,
        "bug_name": "Closure_162",
        "end_line": 384
      },
      {
        "member_type": "method",
        "file": "Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 346,
        "name": "visit",
        "start_line": 318,
        "span_start": 342,
        "bug_name": "Closure_162",
        "end_line": 384
      },
      {
        "member_type": "method",
        "file": "Closure_162/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 355,
        "name": "visit",
        "start_line": 318,
        "span_start": 355,
        "bug_name": "Closure_162",
        "end_line": 384
      }
    ]
  },
  "Closure_163": {
    "bug_count": 17,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Processes a NAME node to see if it's a global function declaration.\n * If it is, record it and return true. Otherwise, return false.\n */\n",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 446,
        "name": "processGlobalFunctionDeclaration",
        "start_line": 422,
        "span_start": 441,
        "bug_name": "Closure_163",
        "end_line": 446
      },
      {
        "member_type": "method",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 526,
        "name": "traverseEdge",
        "start_line": 517,
        "span_start": 515,
        "bug_name": "Closure_163",
        "end_line": 529
      },
      {
        "member_type": "method",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 586,
        "name": "getRootVar",
        "start_line": 569,
        "span_start": 575,
        "bug_name": "Closure_163",
        "end_line": 593
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the value of this property.\n */\n",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 634,
        "name": "getValue",
        "start_line": 622,
        "span_start": 622,
        "bug_name": "Closure_163",
        "end_line": 622
      },
      {
        "member_type": "method",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 667,
        "name": "getAssignNode",
        "start_line": 665,
        "span_start": 664,
        "bug_name": "Closure_163",
        "end_line": 667
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Move methods deeper in the module graph when possible.\n */\n",
        "file": "Closure_163/src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "span_end": 140,
        "name": "moveMethods",
        "start_line": 96,
        "span_start": 141,
        "bug_name": "Closure_163",
        "end_line": 199
      },
      {
        "member_type": "method",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 230,
        "name": "enterScope",
        "start_line": 201,
        "span_start": 201,
        "bug_name": "Closure_163",
        "end_line": 230
      },
      {
        "member_type": "method",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 256,
        "name": "shouldTraverse",
        "start_line": 237,
        "span_start": 240,
        "bug_name": "Closure_163",
        "end_line": 331
      },
      {
        "member_type": "method",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 278,
        "name": "visit",
        "start_line": 249,
        "span_start": 277,
        "bug_name": "Closure_163",
        "end_line": 331
      },
      {
        "member_type": "method",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 305,
        "name": "visit",
        "start_line": 249,
        "span_start": 303,
        "bug_name": "Closure_163",
        "end_line": 331
      },
      {
        "member_type": "method",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 328,
        "name": "visit",
        "start_line": 249,
        "span_start": 329,
        "bug_name": "Closure_163",
        "end_line": 331
      },
      {
        "member_type": "method",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 353,
        "name": "addSymbolUse",
        "start_line": 333,
        "span_start": 337,
        "bug_name": "Closure_163",
        "end_line": 357
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines whether {@code n} is the FUNCTION node in a global function\n * declaration.\n */\n",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 373,
        "name": "isGlobalFunctionDeclaration",
        "start_line": 363,
        "span_start": 362,
        "bug_name": "Closure_163",
        "end_line": 374
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns true if this is the r-value of an assignment.\n */\n",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 382,
        "name": "isAssignRValue",
        "start_line": 379,
        "span_start": 381,
        "bug_name": "Closure_163",
        "end_line": 381
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the name of a prototype property being assigned to this r-value.\n *\n * Returns null if this is not the R-value of a prototype property, or if\n * the R-value is used in multiple expressions (i.e., if there's\n * a prototype property assignment in a more complex expression).\n */\n",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 391,
        "name": "getPrototypePropertyNameFromRValue",
        "start_line": 390,
        "span_start": 391,
        "bug_name": "Closure_163",
        "end_line": 416
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the name of a prototype property being assigned to this r-value.\n *\n * Returns null if this is not the R-value of a prototype property, or if\n * the R-value is used in multiple expressions (i.e., if there's\n * a prototype property assignment in a more complex expression).\n */\n",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 412,
        "name": "getPrototypePropertyNameFromRValue",
        "start_line": 390,
        "span_start": 411,
        "bug_name": "Closure_163",
        "end_line": 416
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Processes a NAME node to see if it's a global function declaration.\n * If it is, record it and return true. Otherwise, return false.\n */\n",
        "file": "Closure_163/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "span_end": 427,
        "name": "processGlobalFunctionDeclaration",
        "start_line": 422,
        "span_start": 426,
        "bug_name": "Closure_163",
        "end_line": 446
      }
    ]
  },
  "Closure_164": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_164/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 134,
        "name": "isSubtype",
        "start_line": 79,
        "span_start": 128,
        "bug_name": "Closure_164",
        "end_line": 171
      },
      {
        "member_type": "method",
        "file": "Closure_164/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 151,
        "name": "isSubtype",
        "start_line": 79,
        "span_start": 152,
        "bug_name": "Closure_164",
        "end_line": 171
      }
    ]
  },
  "Closure_165": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns whether the given property can possibly be set on the given type.\n */\n",
        "file": "Closure_165/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "span_end": 697,
        "name": "canPropertyBeDefined",
        "start_line": 690,
        "span_start": 698,
        "bug_name": "Closure_165",
        "end_line": 708
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Creates a record type.\n *\n * @param registry The type registry under which this type lives.\n * @param properties A map of all the properties of this record type.\n * @param declared Whether this is a declared or synthesized type.\n *     A synthesized record type is just used for bookkeeping\n *     in the type system. A declared record type was actually used in the\n *     user's program.\n * @throws IllegalStateException if the {@code RecordProperty} associated\n *         with a property is null.\n */\n",
        "file": "Closure_165/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 94,
        "name": "RecordType",
        "start_line": 87,
        "span_start": 93,
        "bug_name": "Closure_165",
        "end_line": 110
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Creates a record type.\n *\n * @param registry The type registry under which this type lives.\n * @param properties A map of all the properties of this record type.\n * @param declared Whether this is a declared or synthesized type.\n *     A synthesized record type is just used for bookkeeping\n *     in the type system. A declared record type was actually used in the\n *     user's program.\n * @throws IllegalStateException if the {@code RecordProperty} associated\n *         with a property is null.\n */\n",
        "file": "Closure_165/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 101,
        "name": "RecordType",
        "start_line": 87,
        "span_start": 102,
        "bug_name": "Closure_165",
        "end_line": 110
      },
      {
        "member_type": "method",
        "file": "Closure_165/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 151,
        "name": "defineProperty",
        "start_line": 147,
        "span_start": 152,
        "bug_name": "Closure_165",
        "end_line": 160
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Creates a record.\n * @return The record type.\n */\n",
        "file": "Closure_165/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java",
        "span_end": 92,
        "name": "build",
        "start_line": 89,
        "span_start": 92,
        "bug_name": "Closure_165",
        "end_line": 97
      }
    ]
  },
  "Closure_167": {
    "bug_count": 6,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 302,
        "name": "caseEquality",
        "start_line": 272,
        "span_start": 301,
        "bug_name": "Closure_167",
        "end_line": 305
      },
      {
        "member_type": "method",
        "file": "Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 349,
        "name": "caseAndOrNotShortCircuiting",
        "start_line": 307,
        "span_start": 348,
        "bug_name": "Closure_167",
        "end_line": 352
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * If the restrictedType differs from the originalType, then we should\n * branch the current flow scope and create a new flow scope with the name\n * declared with the new type.\n *\n * We try not to create spurious child flow scopes as this makes type\n * inference slower.\n *\n * We also do not want spurious slots around in type inference, because\n * we use these as a signal for \"checked unknown\" types. A \"checked unknown\"\n * type is a symbol that the programmer has already checked and verified that\n * it's defined, even if we don't know what it is.\n *\n * It is OK to pass non-name nodes into this method, as long as you pass\n * in {@code null} for a restricted type.\n */\n",
        "file": "Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 394,
        "name": "maybeRestrictName",
        "start_line": 392,
        "span_start": 394,
        "bug_name": "Closure_167",
        "end_line": 400
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @see maybeRestrictName\n */\n",
        "file": "Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 412,
        "name": "maybeRestrictTwoNames",
        "start_line": 405,
        "span_start": 407,
        "bug_name": "Closure_167",
        "end_line": 424
      },
      {
        "member_type": "method",
        "file": "Closure_167/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "span_end": 434,
        "name": "caseNameOrGetProp",
        "start_line": 426,
        "span_start": 430,
        "bug_name": "Closure_167",
        "end_line": 435
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Computes the restricted type of this type knowing that the\n * {@code ToBoolean} predicate has a specific value. For more information\n * about the {@code ToBoolean} predicate, see\n * {@link #getPossibleToBooleanOutcomes}.\n *\n * @param outcome the value of the {@code ToBoolean} predicate\n *\n * @return the restricted type, or the Any Type if the underlying type could\n *         not have yielded this ToBoolean value\n *\n * TODO(user): Move this method to the SemanticRAI and use the visit\n * method of types to get the restricted type.\n */\n",
        "file": "Closure_167/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 882,
        "name": "getRestrictedTypeGivenToBooleanOutcome",
        "start_line": 882,
        "span_start": 883,
        "bug_name": "Closure_167",
        "end_line": 893
      }
    ]
  },
  "Closure_169": {
    "bug_count": 21,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * An equivalence visitor.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 555,
        "name": "checkEquivalenceHelper",
        "start_line": 520,
        "span_start": 545,
        "bug_name": "Closure_169",
        "end_line": 608
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * An equivalence visitor.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 572,
        "name": "checkEquivalenceHelper",
        "start_line": 520,
        "span_start": 565,
        "bug_name": "Closure_169",
        "end_line": 608
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * An equivalence visitor.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 580,
        "name": "checkEquivalenceHelper",
        "start_line": 520,
        "span_start": 580,
        "bug_name": "Closure_169",
        "end_line": 608
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * An equivalence visitor.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 598,
        "name": "checkEquivalenceHelper",
        "start_line": 520,
        "span_start": 592,
        "bug_name": "Closure_169",
        "end_line": 608
      },
      {
        "member_type": "method",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 118,
        "name": "checkRecordEquivalenceHelper",
        "start_line": 117,
        "span_start": 118,
        "bug_name": "Closure_169",
        "end_line": 131
      },
      {
        "member_type": "method",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 126,
        "name": "checkRecordEquivalenceHelper",
        "start_line": 117,
        "span_start": 126,
        "bug_name": "Closure_169",
        "end_line": 131
      },
      {
        "member_type": "method",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 205,
        "name": "getGreatestSubtypeHelper",
        "start_line": 153,
        "span_start": 204,
        "bug_name": "Closure_169",
        "end_line": 212
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines if typeA is a subtype of typeB\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 268,
        "name": "isSubtype",
        "start_line": 242,
        "span_start": 268,
        "bug_name": "Closure_169",
        "end_line": 283
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines if typeA is a subtype of typeB\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/RecordType.java",
        "span_end": 280,
        "name": "isSubtype",
        "start_line": 242,
        "span_start": 280,
        "bug_name": "Closure_169",
        "end_line": 283
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @return True if our parameter spec is equal to {@code that}'s parameter\n *     spec.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 177,
        "name": "hasEqualParameters",
        "start_line": 177,
        "span_start": 177,
        "bug_name": "Closure_169",
        "end_line": 201
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @return True if our parameter spec is equal to {@code that}'s parameter\n *     spec.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 187,
        "name": "hasEqualParameters",
        "start_line": 177,
        "span_start": 187,
        "bug_name": "Closure_169",
        "end_line": 201
      },
      {
        "member_type": "method",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/ArrowType.java",
        "span_end": 209,
        "name": "checkArrowEquivalenceHelper",
        "start_line": 203,
        "span_start": 204,
        "bug_name": "Closure_169",
        "end_line": 210
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Try to get the sup/inf of two functions by looking at the\n * piecewise components.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 792,
        "name": "tryMergeFunctionPiecewise",
        "start_line": 789,
        "span_start": 792,
        "bug_name": "Closure_169",
        "end_line": 828
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Two function types are equal if their signatures match. Since they don't\n * have signatures, two interfaces are equal if their names match.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 890,
        "name": "checkFunctionEquivalenceHelper",
        "start_line": 889,
        "span_start": 890,
        "bug_name": "Closure_169",
        "end_line": 910
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Two function types are equal if their signatures match. Since they don't\n * have signatures, two interfaces are equal if their names match.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 909,
        "name": "checkFunctionEquivalenceHelper",
        "start_line": 889,
        "span_start": 908,
        "bug_name": "Closure_169",
        "end_line": 910
      },
      {
        "member_type": "method",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/FunctionType.java",
        "span_end": 918,
        "name": "hasEqualCallType",
        "start_line": 917,
        "span_start": 918,
        "bug_name": "Closure_169",
        "end_line": 920
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Checks if two types are equivalent.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 492,
        "name": "isEquivalentTo",
        "start_line": 491,
        "span_start": 492,
        "bug_name": "Closure_169",
        "end_line": 493
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Checks if two types are invariant.\n * @see EquivalenceMethod\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 500,
        "name": "isInvariant",
        "start_line": 499,
        "span_start": 500,
        "bug_name": "Closure_169",
        "end_line": 501
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Whether this type is meaningfully different from {@code that} type for\n * the purposes of data flow analysis.\n *\n * This is a trickier check than pure equality, because it has to properly\n * handle unknown types. See {@code EquivalenceMethod} for more info.\n *\n * @see <a href=\"http://www.youtube.com/watch?v=_RpSv3HjpEw\">Unknown\n *     unknowns</a>\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 520,
        "name": "differsFrom",
        "start_line": 513,
        "span_start": 514,
        "bug_name": "Closure_169",
        "end_line": 608
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Two union types are equal if they have the same number of alternates\n * and all alternates are equal.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/UnionType.java",
        "span_end": 349,
        "name": "checkUnionEquivalenceHelper",
        "start_line": 333,
        "span_start": 334,
        "bug_name": "Closure_169",
        "end_line": 354
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * An equivalence visitor.\n */\n",
        "file": "Closure_169/src/com/google/javascript/rhino/jstype/JSType.java",
        "span_end": 530,
        "name": "checkEquivalenceHelper",
        "start_line": 520,
        "span_start": 528,
        "bug_name": "Closure_169",
        "end_line": 608
      }
    ]
  },
  "Closure_171": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_171/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 736,
        "name": "traverseObjectLiteral",
        "start_line": 719,
        "span_start": 731,
        "bug_name": "Closure_171",
        "end_line": 768
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines whether a qualified name is inferred.\n * NOTE(nicksantos): Determining whether a property is declared or not\n * is really really obnoxious.\n *\n * The problem is that there are two (equally valid) coding styles:\n *\n * (function() {\n *   /* The authoritative definition of goog.bar. /\n *   goog.bar = function() {};\n * })();\n *\n * function f() {\n *   goog.bar();\n *   /* Reset goog.bar to a no-op. /\n *   goog.bar = function() {};\n * }\n *\n * In a dynamic language with first-class functions, it's very difficult\n * to know which one the user intended without looking at lots of\n * contextual information (the second example demonstrates a small case\n * of this, but there are some really pathological cases as well).\n *\n * The current algorithm checks if either the declaration has\n * JsDoc type information, or @const with a known type,\n * or a function literal with a name we haven't seen before.\n */\n",
        "file": "Closure_171/src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "span_end": 1668,
        "name": "isQualifiedNameInferred",
        "start_line": 1661,
        "span_start": 1669,
        "bug_name": "Closure_171",
        "end_line": 1709
      }
    ]
  },
  "Closure_173": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_173/src/com/google/javascript/jscomp/CodeGenerator.java",
        "span_end": 135,
        "name": "add",
        "start_line": 107,
        "span_start": 130,
        "bug_name": "Closure_173",
        "end_line": 763
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Tries apply our various peephole minimizations on the passed in node.\n */\n",
        "file": "Closure_173/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "span_end": 107,
        "name": "optimizeSubtree",
        "start_line": 65,
        "span_start": 102,
        "bug_name": "Closure_173",
        "end_line": 113
      }
    ]
  },
  "Closure_174": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "file": "Closure_174/src/com/google/javascript/jscomp/JsAst.java",
        "span_end": 81,
        "name": "parse",
        "start_line": 81,
        "span_start": 82,
        "bug_name": "Closure_174",
        "end_line": 110
      },
      {
        "member_type": "method",
        "file": "Closure_174/src/com/google/javascript/jscomp/JsAst.java",
        "span_end": 98,
        "name": "parse",
        "start_line": 81,
        "span_start": 95,
        "bug_name": "Closure_174",
        "end_line": 110
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Creates a node representing a qualified name.\n *\n * @param name A qualified name (e.g. \"foo\" or \"foo.bar.baz\")\n * @return A NAME or GETPROP node\n */\n",
        "file": "Closure_174/src/com/google/javascript/jscomp/NodeUtil.java",
        "span_end": 2368,
        "name": "newQualifiedNameNodeDeclaration",
        "start_line": 2360,
        "span_start": 2367,
        "bug_name": "Closure_174",
        "end_line": 2375
      },
      {
        "member_type": "method",
        "file": "Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 357,
        "name": "findAliases",
        "start_line": 351,
        "span_start": 356,
        "bug_name": "Closure_174",
        "end_line": 402
      },
      {
        "member_type": "method",
        "file": "Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 366,
        "name": "findAliases",
        "start_line": 351,
        "span_start": 365,
        "bug_name": "Closure_174",
        "end_line": 402
      },
      {
        "member_type": "method",
        "file": "Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 376,
        "name": "findAliases",
        "start_line": 351,
        "span_start": 377,
        "bug_name": "Closure_174",
        "end_line": 402
      },
      {
        "member_type": "method",
        "file": "Closure_174/src/com/google/javascript/jscomp/ScopedAliases.java",
        "span_end": 385,
        "name": "findAliases",
        "start_line": 351,
        "span_start": 386,
        "bug_name": "Closure_174",
        "end_line": 402
      }
    ]
  },
  "Closure_175": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * @param t  The traversal use to reach the call site.\n * @param callNode The CALL node.\n * @param fnNode The function to evaluate for inlining.\n * @param needAliases A set of function parameter names that can not be\n *     used without aliasing. Returned by getUnsafeParameterNames().\n * @param mode Inlining mode to be used.\n * @param referencesThis Whether fnNode contains references to its this\n *     object.\n * @param containsFunctions Whether fnNode contains inner functions.\n * @return Whether the inlining can occur.\n */\n",
        "file": "Closure_175/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 208,
        "name": "canInlineReferenceToFunction",
        "start_line": 181,
        "span_start": 208,
        "bug_name": "Closure_175",
        "end_line": 221
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Determines whether a function can be inlined at a particular call site.\n * There are several criteria that the function and reference must hold in\n * order for the functions to be inlined:\n * 1) If a call's arguments have side effects,\n * the corresponding argument in the function must only be referenced once.\n * For instance, this will not be inlined:\n * <pre>\n *     function foo(a) { return a + a }\n *     x = foo(i++);\n * </pre>\n */\n",
        "file": "Closure_175/src/com/google/javascript/jscomp/FunctionInjector.java",
        "span_end": 732,
        "name": "canInlineReferenceDirectly",
        "start_line": 697,
        "span_start": 715,
        "bug_name": "Closure_175",
        "end_line": 737
      }
    ]
  },
  "Closure_176": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Updates the scope according to the result of a type change, like\n * an assignment or a type cast.\n */\n",
        "file": "Closure_176/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 530,
        "name": "updateScopeForTypeChange",
        "start_line": 523,
        "span_start": 530,
        "bug_name": "Closure_176",
        "end_line": 589
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Updates the scope according to the result of a type change, like\n * an assignment or a type cast.\n */\n",
        "file": "Closure_176/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 549,
        "name": "updateScopeForTypeChange",
        "start_line": 523,
        "span_start": 548,
        "bug_name": "Closure_176",
        "end_line": 589
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Updates the scope according to the result of a type change, like\n * an assignment or a type cast.\n */\n",
        "file": "Closure_176/src/com/google/javascript/jscomp/TypeInference.java",
        "span_end": 565,
        "name": "updateScopeForTypeChange",
        "start_line": 523,
        "span_start": 562,
        "bug_name": "Closure_176",
        "end_line": 589
      }
    ]
  },
  "Codec_1": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Find the caverphone value of a String.\n *\n * @param txt String to find the caverphone code for\n * @return A caverphone code corresponding to the String supplied\n */\n",
        "file": "Codec_1/src/java/org/apache/commons/codec/language/Caverphone.java",
        "span_end": 59,
        "name": "caverphone",
        "start_line": 50,
        "span_start": 59,
        "bug_name": "Codec_1",
        "end_line": 140
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Find the metaphone value of a String. This is similar to the\n * soundex algorithm, but better at finding similar sounding words.\n * All input is converted to upper case.\n * Limitations: Input format is expected to be a single ASCII word\n * with only characters in the A - Z range, no punctuation or numbers.\n *\n * @param txt String to find the metaphone code for\n * @return A metaphone code corresponding to the String supplied\n */\n",
        "file": "Codec_1/src/java/org/apache/commons/codec/language/Metaphone.java",
        "span_end": 88,
        "name": "metaphone",
        "start_line": 81,
        "span_start": 88,
        "bug_name": "Codec_1",
        "end_line": 313
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Cleans up the input string before Soundex processing by only returning\n * upper case letters.\n *\n * @param str\n *                  The String to clean.\n * @return A clean String.\n */\n",
        "file": "Codec_1/src/java/org/apache/commons/codec/language/SoundexUtils.java",
        "span_end": 53,
        "name": "clean",
        "start_line": 40,
        "span_start": 53,
        "bug_name": "Codec_1",
        "end_line": 56
      }
    ]
  },
  "Codec_6": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n * from this InputStream.\n *\n * @param b\n *            destination byte array\n * @param offset\n *            where to start writing the bytes\n * @param len\n *            maximum number of bytes to read\n *\n * @return number of bytes read\n * @throws IOException\n *             if an I/O error occurs.\n * @throws NullPointerException\n *             if the byte array parameter is null\n * @throws IndexOutOfBoundsException\n *             if offset, len or buffer size are invalid\n */\n",
        "file": "Codec_6/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "span_end": 147,
        "name": "read",
        "start_line": 138,
        "span_start": 148,
        "bug_name": "Codec_6",
        "end_line": 184
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n * from this InputStream.\n *\n * @param b\n *            destination byte array\n * @param offset\n *            where to start writing the bytes\n * @param len\n *            maximum number of bytes to read\n *\n * @return number of bytes read\n * @throws IOException\n *             if an I/O error occurs.\n * @throws NullPointerException\n *             if the byte array parameter is null\n * @throws IndexOutOfBoundsException\n *             if offset, len or buffer size are invalid\n */\n",
        "file": "Codec_6/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "span_end": 163,
        "name": "read",
        "start_line": 138,
        "span_start": 164,
        "bug_name": "Codec_6",
        "end_line": 184
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n * from this InputStream.\n *\n * @param b\n *            destination byte array\n * @param offset\n *            where to start writing the bytes\n * @param len\n *            maximum number of bytes to read\n *\n * @return number of bytes read\n * @throws IOException\n *             if an I/O error occurs.\n * @throws NullPointerException\n *             if the byte array parameter is null\n * @throws IndexOutOfBoundsException\n *             if offset, len or buffer size are invalid\n */\n",
        "file": "Codec_6/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "span_end": 178,
        "name": "read",
        "start_line": 138,
        "span_start": 178,
        "bug_name": "Codec_6",
        "end_line": 184
      }
    ]
  },
  "Codec_8": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n * from this InputStream.\n *\n * @param b\n *            destination byte array\n * @param offset\n *            where to start writing the bytes\n * @param len\n *            maximum number of bytes to read\n *\n * @return number of bytes read\n * @throws IOException\n *             if an I/O error occurs.\n * @throws NullPointerException\n *             if the byte array parameter is null\n * @throws IndexOutOfBoundsException\n *             if offset, len or buffer size are invalid\n */\n",
        "file": "Codec_8/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "span_end": 171,
        "name": "read",
        "start_line": 138,
        "span_start": 169,
        "bug_name": "Codec_8",
        "end_line": 179
      }
    ]
  },
  "Codec_11": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Encodes byte into its quoted-printable representation.\n *\n * @param b\n *            byte to encode\n * @param buffer\n *            the buffer to write to\n * @return The number of bytes written to the <code>buffer</code>\n */\n",
        "file": "Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 119,
        "name": "encodeQuotedPrintable",
        "start_line": 117,
        "span_start": 114,
        "bug_name": "Codec_11",
        "end_line": 124
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n *\n * <p>\n * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)\n * as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.\n * </p>\n *\n * @param printable\n *                  bitset of characters deemed quoted-printable\n * @param bytes\n *                  array of bytes to be encoded\n * @return array of bytes containing quoted-printable data\n */\n",
        "file": "Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 199,
        "name": "encodeQuotedPrintable",
        "start_line": 190,
        "span_start": 175,
        "bug_name": "Codec_11",
        "end_line": 240
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n *\n * <p>\n * This function fully implements the quoted-printable encoding specification (rule #1 through rule #5)\n * as defined in RFC 1521 and is suitable for encoding binary data and unformatted text.\n * </p>\n *\n * @param printable\n *                  bitset of characters deemed quoted-printable\n * @param bytes\n *                  array of bytes to be encoded\n * @return array of bytes containing quoted-printable data\n */\n",
        "file": "Codec_11/src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
        "span_end": 235,
        "name": "encodeQuotedPrintable",
        "start_line": 190,
        "span_start": 229,
        "bug_name": "Codec_11",
        "end_line": 240
      }
    ]
  },
  "Codec_12": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n *\n * @throws IllegalArgumentException if the provided skip length is negative\n */\n",
        "file": "Codec_12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "span_end": 144,
        "name": "skip",
        "start_line": 142,
        "span_start": 142,
        "bug_name": "Codec_12",
        "end_line": 166
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n *\n * @throws IllegalArgumentException if the provided skip length is negative\n */\n",
        "file": "Codec_12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "span_end": 156,
        "name": "skip",
        "start_line": 142,
        "span_start": 153,
        "bug_name": "Codec_12",
        "end_line": 166
      }
    ]
  },
  "Codec_13": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Check if the Double Metaphone values of two <code>String</code> values\n * are equal, optionally using the alternate value.\n *\n * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.\n * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.\n * @param alternate use the alternate value if {@code true}.\n * @return {@code true} if the encoded <code>String</code>s are equal;\n *          {@code false} otherwise.\n */\n",
        "file": "Codec_13/src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
        "span_end": 244,
        "name": "isDoubleMetaphoneEqual",
        "start_line": 244,
        "span_start": 244,
        "bug_name": "Codec_13",
        "end_line": 246
      }
    ]
  },
  "Codec_14": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Applies the final rules to convert from a language-specific phonetic representation to a\n * language-independent representation.\n *\n * @param phonemeBuilder the current phonemes\n * @param finalRules the final rules to apply\n * @return the resulting phonemes\n */\n",
        "file": "Codec_14/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "span_end": 338,
        "name": "applyFinalRules",
        "start_line": 329,
        "span_start": 338,
        "bug_name": "Codec_14",
        "end_line": 374
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Applies the final rules to convert from a language-specific phonetic representation to a\n * language-independent representation.\n *\n * @param phonemeBuilder the current phonemes\n * @param finalRules the final rules to apply\n * @return the resulting phonemes\n */\n",
        "file": "Codec_14/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java",
        "span_end": 364,
        "name": "applyFinalRules",
        "start_line": 329,
        "span_start": 361,
        "bug_name": "Codec_14",
        "end_line": 374
      }
    ]
  },
  "Collections_25": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets an iterator that provides an ordered iteration over the elements\n * contained in a collection of ordered {@link Iterator}s.\n * <p>\n * Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n * the {@link Iterator#next()} method will return the lesser of\n * <code>A.next()</code> and <code>B.next()</code>.\n * <p>\n * The comparator is optional. If null is specified then natural order is used.\n *\n * @param <E>  the element type\n * @param comparator  the comparator to use, may be null for natural order\n * @param iterator1  the first iterators to use, not null\n * @param iterator2  the first iterators to use, not null\n * @return a combination iterator over the iterators\n * @throws NullPointerException if either iterator is null\n */\n",
        "file": "Collections_25/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
        "span_end": 605,
        "name": "collatedIterator",
        "start_line": 602,
        "span_start": 605,
        "bug_name": "Collections_25",
        "end_line": 608
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets an iterator that provides an ordered iteration over the elements\n * contained in an array of {@link Iterator}s.\n * <p>\n * Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n * the {@link Iterator#next()} method will return the lesser of\n * <code>A.next()</code> and <code>B.next()</code> and so on.\n * <p>\n * The comparator is optional. If null is specified then natural order is used.\n *\n * @param <E>  the element type\n * @param comparator  the comparator to use, may be null for natural order\n * @param iterators  the iterators to use, not null or empty or contain nulls\n * @return a combination iterator over the iterators\n * @throws NullPointerException if iterators array is null or contains a null value\n */\n",
        "file": "Collections_25/src/main/java/org/apache/commons/collections4/IteratorUtils.java",
        "span_end": 626,
        "name": "collatedIterator",
        "start_line": 626,
        "span_start": 626,
        "bug_name": "Collections_25",
        "end_line": 631
      }
    ]
  },
  "Compress_2": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the next AR entry in this stream.\n *\n * @return the next AR entry.\n * @throws IOException\n *             if the entry could not be read\n */\n",
        "file": "Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 61,
        "name": "getNextArEntry",
        "start_line": 61,
        "span_start": 60,
        "bug_name": "Compress_2",
        "end_line": 133
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the next AR entry in this stream.\n *\n * @return the next AR entry.\n * @throws IOException\n *             if the entry could not be read\n */\n",
        "file": "Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 85,
        "name": "getNextArEntry",
        "start_line": 61,
        "span_start": 77,
        "bug_name": "Compress_2",
        "end_line": 133
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the next AR entry in this stream.\n *\n * @return the next AR entry.\n * @throws IOException\n *             if the entry could not be read\n */\n",
        "file": "Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 116,
        "name": "getNextArEntry",
        "start_line": 61,
        "span_start": 114,
        "bug_name": "Compress_2",
        "end_line": 133
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the next AR entry in this stream.\n *\n * @return the next AR entry.\n * @throws IOException\n *             if the entry could not be read\n */\n",
        "file": "Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 134,
        "name": "getNextArEntry",
        "start_line": 61,
        "span_start": 129,
        "bug_name": "Compress_2",
        "end_line": 133
      },
      {
        "member_type": "method",
        "file": "Compress_2/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java",
        "span_end": 142,
        "name": "close",
        "start_line": 140,
        "span_start": 143,
        "bug_name": "Compress_2",
        "end_line": 146
      }
    ]
  },
  "Compress_3": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Put an entry on the output stream. This writes the entry's\n * header record and positions the output stream for writing\n * the contents of the entry. Once this method is called, the\n * stream is ready for calls to write() to write the entry's\n * contents. Once the contents are written, closeArchiveEntry()\n * <B>MUST</B> be called to ensure that all buffered data\n * is completely written to the output stream.\n *\n * @param archiveEntry The TarEntry to be written to the archive.\n * @throws IOException on error\n * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry\n */\n",
        "file": "Compress_3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 186,
        "name": "putArchiveEntry",
        "start_line": 157,
        "span_start": 187,
        "bug_name": "Compress_3",
        "end_line": 192
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Close an entry. This method MUST be called for all file\n * entries that contain data. The reason is that we must\n * buffer data written to the stream in order to satisfy\n * the buffer's record based writes. Thus, there may be\n * data fragments still being assembled that must be written\n * to the output stream before this entry is closed and the\n * next entry written.\n * @throws IOException on error\n */\n",
        "file": "Compress_3/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 216,
        "name": "closeArchiveEntry",
        "start_line": 204,
        "span_start": 217,
        "bug_name": "Compress_3",
        "end_line": 223
      }
    ]
  },
  "Compress_4": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Closes the CPIO output stream as well as the stream being filtered.\n *\n * @throws IOException\n *             if an I/O error has occurred or if a CPIO file error has\n *             occurred\n */\n",
        "file": "Compress_4/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "span_end": 336,
        "name": "close",
        "start_line": 334,
        "span_start": 336,
        "bug_name": "Compress_4",
        "end_line": 339
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Closes the underlying OutputStream.\n * @throws IOException on error\n */\n",
        "file": "Compress_4/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 126,
        "name": "close",
        "start_line": 124,
        "span_start": 126,
        "bug_name": "Compress_4",
        "end_line": 130
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Closes this output stream and releases any system resources\n * associated with the stream.\n *\n * @exception  IOException  if an I/O error occurs.\n */\n",
        "file": "Compress_4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 530,
        "name": "close",
        "start_line": 529,
        "span_start": 530,
        "bug_name": "Compress_4",
        "end_line": 536
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Performs all changes collected in this ChangeSet on the input stream and\n * streams the result to the output stream. Perform may be called more than once.\n *\n * This method finishes the stream, no other entries should be added\n * after that.\n *\n * @param in\n *            the InputStream to perform the changes on\n * @param out\n *            the resulting OutputStream with all modifications\n * @throws IOException\n *             if an read/write error occurs\n * @return the results of this operation\n */\n",
        "file": "Compress_4/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java",
        "span_end": 127,
        "name": "perform",
        "start_line": 67,
        "span_start": 128,
        "bug_name": "Compress_4",
        "end_line": 130
      }
    ]
  },
  "Compress_6": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Creates a new zip entry with the specified name.\n * @param name the name of the entry\n */\n",
        "file": "Compress_6/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
        "span_end": 63,
        "name": "ZipArchiveEntry",
        "start_line": 62,
        "span_start": 64,
        "bug_name": "Compress_6",
        "end_line": 65
      },
      {
        "member_type": "method",
        "file": "Compress_6/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
        "span_end": 466,
        "name": "equals",
        "start_line": 455,
        "span_start": 462,
        "bug_name": "Compress_6",
        "end_line": 473
      }
    ]
  },
  "Compress_9": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Compress_9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 108,
        "name": "getCount",
        "start_line": 108,
        "span_start": 108,
        "bug_name": "Compress_9",
        "end_line": 112
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Writes bytes to the current tar archive entry. This method\n * is aware of the current entry and will throw an exception if\n * you attempt to write bytes past the length specified for the\n * current entry. The method is also (painfully) aware of the\n * record buffering required by TarBuffer, and manages buffers\n * that are not a multiple of recordsize in length, including\n * assembling records from small buffers.\n *\n * @param wBuf The buffer to write to the archive.\n * @param wOffset The offset in the buffer from which to get bytes.\n * @param numToWrite The number of bytes to write.\n * @throws IOException on error\n */\n",
        "file": "Compress_9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 330,
        "name": "write",
        "start_line": 275,
        "span_start": 330,
        "bug_name": "Compress_9",
        "end_line": 339
      }
    ]
  },
  "Compress_10": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Walks through all recorded entries and adds the data available\n * from the local file header.\n *\n * <p>Also records the offsets for the data to read from the\n * entries.</p>\n */\n",
        "file": "Compress_10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
        "span_end": 809,
        "name": "resolveLocalFileHeaderData",
        "start_line": 801,
        "span_start": 808,
        "bug_name": "Compress_10",
        "end_line": 847
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Walks through all recorded entries and adds the data available\n * from the local file header.\n *\n * <p>Also records the offsets for the data to read from the\n * entries.</p>\n */\n",
        "file": "Compress_10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
        "span_end": 841,
        "name": "resolveLocalFileHeaderData",
        "start_line": 801,
        "span_start": 842,
        "bug_name": "Compress_10",
        "end_line": 847
      }
    ]
  },
  "Compress_11": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Create an archive input stream from an input stream, autodetecting\n * the archive type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n *\n * @param in the input stream\n * @return the archive input stream\n * @throws ArchiveException if the archiver name is not known\n * @throws IllegalArgumentException if the stream is null or does not support mark\n */\n",
        "file": "Compress_11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "span_end": 239,
        "name": "createArchiveInputStream",
        "start_line": 197,
        "span_start": 240,
        "bug_name": "Compress_11",
        "end_line": 256
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Create an archive input stream from an input stream, autodetecting\n * the archive type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n *\n * @param in the input stream\n * @return the archive input stream\n * @throws ArchiveException if the archiver name is not known\n * @throws IllegalArgumentException if the stream is null or does not support mark\n */\n",
        "file": "Compress_11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "span_end": 248,
        "name": "createArchiveInputStream",
        "start_line": 197,
        "span_start": 249,
        "bug_name": "Compress_11",
        "end_line": 256
      }
    ]
  },
  "Compress_20": {
    "bug_count": 6,
    "entries": [
      {
        "member_type": "method",
        "file": "Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 331,
        "name": "readNewEntry",
        "start_line": 320,
        "span_start": 331,
        "bug_name": "Compress_20",
        "end_line": 353
      },
      {
        "member_type": "method",
        "file": "Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 347,
        "name": "readNewEntry",
        "start_line": 320,
        "span_start": 347,
        "bug_name": "Compress_20",
        "end_line": 353
      },
      {
        "member_type": "method",
        "file": "Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 361,
        "name": "readOldAsciiEntry",
        "start_line": 355,
        "span_start": 361,
        "bug_name": "Compress_20",
        "end_line": 378
      },
      {
        "member_type": "method",
        "file": "Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 373,
        "name": "readOldAsciiEntry",
        "start_line": 355,
        "span_start": 373,
        "bug_name": "Compress_20",
        "end_line": 378
      },
      {
        "member_type": "method",
        "file": "Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 387,
        "name": "readOldBinaryEntry",
        "start_line": 380,
        "span_start": 387,
        "bug_name": "Compress_20",
        "end_line": 405
      },
      {
        "member_type": "method",
        "file": "Compress_20/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 399,
        "name": "readOldBinaryEntry",
        "start_line": 380,
        "span_start": 399,
        "bug_name": "Compress_20",
        "end_line": 405
      }
    ]
  },
  "Compress_22": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 232,
        "name": "read0",
        "start_line": 196,
        "span_start": 199,
        "bug_name": "Compress_22",
        "end_line": 256
      },
      {
        "member_type": "method",
        "file": "Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 853,
        "name": "setupRandPartA",
        "start_line": 830,
        "span_start": 853,
        "bug_name": "Compress_22",
        "end_line": 853
      },
      {
        "member_type": "method",
        "file": "Compress_22/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java",
        "span_end": 871,
        "name": "setupNoRandPartA",
        "start_line": 855,
        "span_start": 871,
        "bug_name": "Compress_22",
        "end_line": 871
      }
    ]
  },
  "Compress_29": {
    "bug_count": 8,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Constructor for TarInputStream.\n * @param os the output stream to use\n * @param blockSize the block size to use\n * @param recordSize the record size to use\n * @param encoding name of the encoding to use for file names\n * @since 1.4\n */\n",
        "file": "Compress_29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
        "span_end": 154,
        "name": "TarArchiveOutputStream",
        "start_line": 153,
        "span_start": 155,
        "bug_name": "Compress_29",
        "end_line": 164
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * @param encoding the encoding to use for file names, use null\n * for the platform's default encoding\n * @param useUnicodeExtraFields whether to use InfoZIP Unicode\n * Extra Fields (if present) to set the file names.\n * @param allowStoredEntriesWithDataDescriptor whether the stream\n * will try to read STORED entries that use a data descriptor\n * @since 1.1\n */\n",
        "file": "Compress_29/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "span_end": 183,
        "name": "ZipArchiveInputStream",
        "start_line": 181,
        "span_start": 184,
        "bug_name": "Compress_29",
        "end_line": 193
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Create an archive output stream from an archiver name and an output stream.\n *\n * @param archiverName the archive name,\n * i.e. {@value #AR}, {@value #ZIP}, {@value #TAR}, {@value #JAR} or {@value #CPIO}\n * @param out the output stream\n * @return the archive output stream\n * @throws ArchiveException if the archiver name is not known\n * @throws StreamingNotSupportedException if the format cannot be\n * written to a stream\n * @throws IllegalArgumentException if the archiver name or stream is null\n */\n",
        "file": "Compress_29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "span_end": 297,
        "name": "createArchiveOutputStream",
        "start_line": 269,
        "span_start": 297,
        "bug_name": "Compress_29",
        "end_line": 314
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Create an archive input stream from an input stream, autodetecting\n * the archive type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n *\n * @param in the input stream\n * @return the archive input stream\n * @throws ArchiveException if the archiver name is not known\n * @throws StreamingNotSupportedException if the format cannot be\n * read from a stream\n * @throws IllegalArgumentException if the stream is null or does not support mark\n */\n",
        "file": "Compress_29/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
        "span_end": 360,
        "name": "createArchiveInputStream",
        "start_line": 328,
        "span_start": 360,
        "bug_name": "Compress_29",
        "end_line": 413
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Construct the cpio input stream with a blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.\n *\n * @param in\n *            The cpio stream\n * @param blockSize\n *            The block size of the archive.\n * @param encoding\n *            The encoding of file names to expect - use null for\n *            the platform's default.\n * @since 1.6\n */\n",
        "file": "Compress_29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java",
        "span_end": 154,
        "name": "CpioArchiveInputStream",
        "start_line": 153,
        "span_start": 155,
        "bug_name": "Compress_29",
        "end_line": 158
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Construct the cpio output stream with a specified format using\n * ASCII as the file name encoding.\n *\n * @param out\n *            The cpio stream\n * @param format\n *            The format of the stream\n * @param blockSize\n *            The block size of the archive.\n * @param encoding\n *            The encoding of file names to write - use null for\n *            the platform's default.\n *\n * @since 1.6\n */\n",
        "file": "Compress_29/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java",
        "span_end": 161,
        "name": "CpioArchiveOutputStream",
        "start_line": 148,
        "span_start": 162,
        "bug_name": "Compress_29",
        "end_line": 165
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Constructor.\n *\n * @param is\n * @param encoding the encoding to use for file names, use null\n * for the platform's default encoding\n * @since 1.6\n */\n",
        "file": "Compress_29/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java",
        "span_end": 103,
        "name": "DumpArchiveInputStream",
        "start_line": 101,
        "span_start": 104,
        "bug_name": "Compress_29",
        "end_line": 148
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Constructor for TarInputStream.\n * @param is the input stream to use\n * @param blockSize the block size to use\n * @param recordSize the record size to use\n * @param encoding name of the encoding to use for file names\n * @since 1.4\n */\n",
        "file": "Compress_29/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
        "span_end": 141,
        "name": "TarArchiveInputStream",
        "start_line": 139,
        "span_start": 142,
        "bug_name": "Compress_29",
        "end_line": 147
      }
    ]
  },
  "Compress_33": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Create an compressor input stream from an input stream, autodetecting\n * the compressor type from the first few bytes of the stream. The InputStream\n * must support marks, like BufferedInputStream.\n *\n * @param in the input stream\n * @return the compressor input stream\n * @throws CompressorException if the compressor name is not known\n * @throws IllegalArgumentException if the stream is null or does not support mark\n * @since 1.1\n */\n",
        "file": "Compress_33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java",
        "span_end": 239,
        "name": "createCompressorInputStream",
        "start_line": 204,
        "span_start": 240,
        "bug_name": "Compress_33",
        "end_line": 259
      }
    ]
  },
  "Compress_34": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Length of the extra field in the central directory data - without\n * Header-ID or length specifier.\n *\n * @return a <code>ZipShort</code> for the length of the data of this extra field\n */\n",
        "file": "Compress_34/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java",
        "span_end": 146,
        "name": "getCentralDirectoryLength",
        "start_line": 146,
        "span_start": 146,
        "bug_name": "Compress_34",
        "end_line": 148
      }
    ]
  },
  "Compress_35": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n * <blockquote>\n * The checksum is calculated by taking the sum of the unsigned byte values\n * of the header block with the eight checksum bytes taken to be ascii\n * spaces (decimal value 32). It is stored as a six digit octal number with\n * leading zeroes followed by a NUL and then a space. Various\n * implementations do not adhere to this format. For better compatibility,\n * ignore leading and trailing whitespace, and get the first six digits. In\n * addition, some historic tar implementations treated bytes as signed.\n * Implementations typically calculate the checksum both ways, and treat it\n * as good if either the signed or unsigned sum matches the included\n * checksum.\n * </blockquote>\n * <p>\n * The return value of this method should be treated as a best-effort\n * heuristic rather than an absolute and final truth. The checksum\n * verification logic may well evolve over time as more special cases\n * are encountered.\n *\n * @param header tar header\n * @return whether the checksum is reasonably good\n * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n * @since 1.5\n */\n",
        "file": "Compress_35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
        "span_end": 594,
        "name": "verifyCheckSum",
        "start_line": 593,
        "span_start": 594,
        "bug_name": "Compress_35",
        "end_line": 608
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n * <blockquote>\n * The checksum is calculated by taking the sum of the unsigned byte values\n * of the header block with the eight checksum bytes taken to be ascii\n * spaces (decimal value 32). It is stored as a six digit octal number with\n * leading zeroes followed by a NUL and then a space. Various\n * implementations do not adhere to this format. For better compatibility,\n * ignore leading and trailing whitespace, and get the first six digits. In\n * addition, some historic tar implementations treated bytes as signed.\n * Implementations typically calculate the checksum both ways, and treat it\n * as good if either the signed or unsigned sum matches the included\n * checksum.\n * </blockquote>\n * <p>\n * The return value of this method should be treated as a best-effort\n * heuristic rather than an absolute and final truth. The checksum\n * verification logic may well evolve over time as more special cases\n * are encountered.\n *\n * @param header tar header\n * @return whether the checksum is reasonably good\n * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n * @since 1.5\n */\n",
        "file": "Compress_35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
        "span_end": 606,
        "name": "verifyCheckSum",
        "start_line": 593,
        "span_start": 602,
        "bug_name": "Compress_35",
        "end_line": 608
      }
    ]
  },
  "Compress_39": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns a \"sanitized\" version of the string given as arguments,\n * where sanitized means non-printable characters have been\n * replaced with a question mark and the outcome is not longer\n * than 255 chars.\n *\n * <p>This method is used to clean up file names when they are\n * used in exception messages as they may end up in log files or\n * as console output and may have been read from a corrupted\n * input.</p>\n *\n * @param s the string to sanitize\n * @return a sanitized version of the argument\n * @since Compress 1.12\n */\n",
        "file": "Compress_39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java",
        "span_end": 273,
        "name": "sanitize",
        "start_line": 273,
        "span_start": 273,
        "bug_name": "Compress_39",
        "end_line": 295
      }
    ]
  },
  "Compress_40": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\n",
        "file": "Compress_40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
        "span_end": 85,
        "name": "readBits",
        "start_line": 81,
        "span_start": 85,
        "bug_name": "Compress_40",
        "end_line": 136
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\n",
        "file": "Compress_40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
        "span_end": 100,
        "name": "readBits",
        "start_line": 81,
        "span_start": 98,
        "bug_name": "Compress_40",
        "end_line": 136
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns at most 63 bits read from the underlying stream.\n *\n * @param count the number of bits to read, must be a positive\n * number not bigger than 63.\n * @return the bits concatenated as a long using the stream's byte order.\n *         -1 if the end of the underlying stream has been reached before reading\n *         the requested number of bits\n * @throws IOException on error\n */\n",
        "file": "Compress_40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
        "span_end": 107,
        "name": "readBits",
        "start_line": 81,
        "span_start": 108,
        "bug_name": "Compress_40",
        "end_line": 136
      }
    ]
  },
  "Compress_42": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns true if this entry represents a unix symlink,\n * in which case the entry's content contains the target path\n * for the symlink.\n *\n * @since 1.5\n * @return true if the entry represents a unix symlink, false otherwise.\n */\n",
        "file": "Compress_42/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java",
        "span_end": 297,
        "name": "isUnixSymlink",
        "start_line": 296,
        "span_start": 297,
        "bug_name": "Compress_42",
        "end_line": 298
      }
    ]
  },
  "Compress_43": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "file": "Compress_43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 1034,
        "name": "writeLocalFileHeader",
        "start_line": 1024,
        "span_start": 1034,
        "bug_name": "Compress_43",
        "end_line": 1038
      },
      {
        "member_type": "method",
        "file": "Compress_43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 1075,
        "name": "createLocalFileHeader",
        "start_line": 1041,
        "span_start": 1075,
        "bug_name": "Compress_43",
        "end_line": 1127
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Writes the data descriptor entry.\n * @param ze the entry to write\n * @throws IOException on error\n */\n",
        "file": "Compress_43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 1171,
        "name": "writeDataDescriptor",
        "start_line": 1170,
        "span_start": 1171,
        "bug_name": "Compress_43",
        "end_line": 1183
      },
      {
        "member_type": "method",
        "file": "Compress_43/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java",
        "span_end": 1493,
        "name": "usesDataDescriptor",
        "start_line": 1492,
        "span_start": 1492,
        "bug_name": "Compress_43",
        "end_line": 1494
      }
    ]
  },
  "Compress_47": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Whether this class is able to read the given entry.\n *\n * <p>May return false if it is set up to use encryption or a\n * compression method that hasn't been implemented yet.</p>\n * @since 1.1\n */\n",
        "file": "Compress_47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "span_end": 415,
        "name": "canReadEntryData",
        "start_line": 410,
        "span_start": 415,
        "bug_name": "Compress_47",
        "end_line": 419
      },
      {
        "member_type": "method",
        "file": "Compress_47/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
        "span_end": 439,
        "name": "read",
        "start_line": 421,
        "span_start": 440,
        "bug_name": "Compress_47",
        "end_line": 466
      }
    ]
  },
  "Csv_7": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Initializes the name to index mapping if the format defines a header.\n *\n * @return null if the format has no header.\n */\n",
        "file": "Csv_7/src/main/java/org/apache/commons/csv/CSVParser.java",
        "span_end": 370,
        "name": "initializeHeader",
        "start_line": 349,
        "span_start": 371,
        "bug_name": "Csv_7",
        "end_line": 380
      }
    ]
  },
  "Csv_8": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Creates a customized CSV format.\n *\n * @param delimiter\n *            the char used for value separation, must not be a line break character\n * @param quoteChar\n *            the Character used as value encapsulation marker, may be {@code null} to disable\n * @param quotePolicy\n *            the quote policy\n * @param commentStart\n *            the Character used for comment identification, may be {@code null} to disable\n * @param escape\n *            the Character used to escape special characters in values, may be {@code null} to disable\n * @param ignoreSurroundingSpaces\n *            <tt>true</tt> when whitespaces enclosing values should be ignored\n * @param ignoreEmptyLines\n *            <tt>true</tt> when the parser should skip empty lines\n * @param recordSeparator\n *            the line separator to use for output\n * @param nullString\n *            the line separator to use for output\n * @param header\n *            the header\n * @param skipHeaderRecord TODO\n * @throws IllegalArgumentException if the delimiter is a line break character\n */\n",
        "file": "Csv_8/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "span_end": 315,
        "name": "CSVFormat",
        "start_line": 296,
        "span_start": 316,
        "bug_name": "Csv_8",
        "end_line": 325
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Verifies the consistency of the parameters and throws an IllegalStateException if necessary.\n *\n * @throws IllegalStateException\n */\n",
        "file": "Csv_8/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "span_end": 671,
        "name": "validate",
        "start_line": 641,
        "span_start": 665,
        "bug_name": "Csv_8",
        "end_line": 671
      }
    ]
  },
  "Csv_13": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Csv_13/src/main/java/org/apache/commons/csv/CSVPrinter.java",
        "span_end": 139,
        "name": "print",
        "start_line": 134,
        "span_start": 139,
        "bug_name": "Csv_13",
        "end_line": 150
      }
    ]
  },
  "Csv_16": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Customized CSV parser using the given {@link CSVFormat}\n *\n * <p>\n * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,\n * unless you close the {@code reader}.\n * </p>\n *\n * @param reader\n *            a Reader containing CSV-formatted input. Must not be null.\n * @param format\n *            the CSVFormat used for CSV parsing. Must not be null.\n * @param characterOffset\n *            Lexer offset when the parser does not start parsing at the beginning of the source.\n * @param recordNumber\n *            The next record number to assign\n * @throws IllegalArgumentException\n *             If the parameters of the format are inconsistent or if either reader or format are null.\n * @throws IOException\n *             If there is a problem reading the header or skipping the first record\n * @since 1.1\n */\n",
        "file": "Csv_16/src/main/java/org/apache/commons/csv/CSVParser.java",
        "span_end": 356,
        "name": "CSVParser",
        "start_line": 350,
        "span_start": 357,
        "bug_name": "Csv_16",
        "end_line": 362
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns an iterator on the records.\n *\n * <p>\n * An {@link IOException} caught during the iteration are re-thrown as an\n * {@link IllegalStateException}.\n * </p>\n * <p>\n * If the parser is closed a call to {@link Iterator#next()} will throw a\n * {@link NoSuchElementException}.\n * </p>\n */\n",
        "file": "Csv_16/src/main/java/org/apache/commons/csv/CSVParser.java",
        "span_end": 523,
        "name": "iterator",
        "start_line": 523,
        "span_start": 523,
        "bug_name": "Csv_16",
        "end_line": 526
      },
      {
        "member_type": "method",
        "file": "Csv_16/src/main/java/org/apache/commons/csv/CSVParser.java",
        "span_end": 571,
        "name": "remove",
        "start_line": 571,
        "span_start": 571,
        "bug_name": "Csv_16",
        "end_line": 574
      }
    ]
  },
  "Gson_1": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Gson_1/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "span_end": 94,
        "name": "getActualType",
        "start_line": 58,
        "span_start": 93,
        "bug_name": "Gson_1",
        "end_line": 115
      },
      {
        "member_type": "method",
        "file": "Gson_1/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "span_end": 113,
        "name": "getActualType",
        "start_line": 58,
        "span_start": 109,
        "bug_name": "Gson_1",
        "end_line": 115
      }
    ]
  },
  "Gson_3": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Constructors for common interface types like Map and List and their\n * subtypes.\n */\n",
        "file": "Gson_3/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
        "span_end": 175,
        "name": "newDefaultImplementationConstructor",
        "start_line": 131,
        "span_start": 175,
        "bug_name": "Gson_3",
        "end_line": 214
      }
    ]
  },
  "Gson_4": {
    "bug_count": 12,
    "entries": [
      {
        "member_type": "method",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "span_end": 576,
        "name": "doPeek",
        "start_line": 465,
        "span_start": 574,
        "bug_name": "Gson_4",
        "end_line": 599
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Inserts any necessary separators and whitespace before a literal value,\n * inline array, or inline object. Also adjusts the stack to expect either a\n * closing bracket or another element.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 625,
        "name": "beforeValue",
        "start_line": 612,
        "span_start": 622,
        "bug_name": "Gson_4",
        "end_line": 643
      },
      {
        "member_type": "method",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "span_end": 587,
        "name": "doPeek",
        "start_line": 465,
        "span_start": 585,
        "bug_name": "Gson_4",
        "end_line": 599
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Enters a new scope by appending any necessary whitespace and the given\n * bracket.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 325,
        "name": "open",
        "start_line": 324,
        "span_start": 325,
        "bug_name": "Gson_4",
        "end_line": 329
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Encodes {@code value}.\n *\n * @param value the literal string value, or null to encode a null literal.\n * @return this writer.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 418,
        "name": "value",
        "start_line": 413,
        "span_start": 418,
        "bug_name": "Gson_4",
        "end_line": 421
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Writes {@code value} directly to the writer without quoting or\n * escaping.\n *\n * @param value the literal string value, or null to encode a null literal.\n * @return this writer.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 435,
        "name": "jsonValue",
        "start_line": 430,
        "span_start": 435,
        "bug_name": "Gson_4",
        "end_line": 438
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Encodes {@code null}.\n *\n * @return this writer.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 454,
        "name": "nullValue",
        "start_line": 445,
        "span_start": 454,
        "bug_name": "Gson_4",
        "end_line": 457
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Encodes {@code value}.\n *\n * @return this writer.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 466,
        "name": "value",
        "start_line": 464,
        "span_start": 466,
        "bug_name": "Gson_4",
        "end_line": 469
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Encodes {@code value}.\n *\n * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n *     {@link Double#isInfinite() infinities}.\n * @return this writer.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 483,
        "name": "value",
        "start_line": 478,
        "span_start": 483,
        "bug_name": "Gson_4",
        "end_line": 486
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Encodes {@code value}.\n *\n * @return this writer.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 495,
        "name": "value",
        "start_line": 493,
        "span_start": 495,
        "bug_name": "Gson_4",
        "end_line": 498
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Encodes {@code value}.\n *\n * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n *     {@link Double#isInfinite() infinities}.\n * @return this writer.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 518,
        "name": "value",
        "start_line": 507,
        "span_start": 518,
        "bug_name": "Gson_4",
        "end_line": 521
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Inserts any necessary separators and whitespace before a literal value,\n * inline array, or inline object. Also adjusts the stack to expect either a\n * closing bracket or another element.\n */\n",
        "file": "Gson_4/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
        "span_end": 613,
        "name": "beforeValue",
        "start_line": 612,
        "span_start": 613,
        "bug_name": "Gson_4",
        "end_line": 643
      }
    ]
  },
  "Gson_7": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,\n * consuming it. If the next token is a string, this method will attempt to\n * parse it as a long. If the next token's numeric value cannot be exactly\n * represented by a Java {@code long}, this method throws.\n *\n * @throws IllegalStateException if the next token is not a literal value.\n * @throws NumberFormatException if the next literal value cannot be parsed\n *     as a number, or exactly represented as a long.\n */\n",
        "file": "Gson_7/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "span_end": 955,
        "name": "nextLong",
        "start_line": 939,
        "span_start": 954,
        "bug_name": "Gson_7",
        "end_line": 984
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,\n * consuming it. If the next token is a string, this method will attempt to\n * parse it as an int. If the next token's numeric value cannot be exactly\n * represented by a Java {@code int}, this method throws.\n *\n * @throws IllegalStateException if the next token is not a literal value.\n * @throws NumberFormatException if the next literal value cannot be parsed\n *     as a number, or exactly represented as an int.\n */\n",
        "file": "Gson_7/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "span_end": 1183,
        "name": "nextInt",
        "start_line": 1165,
        "span_start": 1182,
        "bug_name": "Gson_7",
        "end_line": 1216
      }
    ]
  },
  "Gson_8": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Gson_8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
        "span_end": 47,
        "name": "create",
        "start_line": 34,
        "span_start": 48,
        "bug_name": "Gson_8",
        "end_line": 107
      },
      {
        "member_type": "method",
        "file": "Gson_8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
        "span_end": 70,
        "name": "create",
        "start_line": 34,
        "span_start": 71,
        "bug_name": "Gson_8",
        "end_line": 107
      },
      {
        "member_type": "method",
        "file": "Gson_8/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
        "span_end": 89,
        "name": "create",
        "start_line": 34,
        "span_start": 90,
        "bug_name": "Gson_8",
        "end_line": 107
      }
    ]
  },
  "Gson_9": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Gson_9/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
        "span_end": 168,
        "name": "write",
        "start_line": 163,
        "span_start": 165,
        "bug_name": "Gson_9",
        "end_line": 166
      }
    ]
  },
  "Gson_14": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns a type that represents an unknown type that extends {@code bound}.\n * For example, if {@code bound} is {@code CharSequence.class}, this returns\n * {@code ? extends CharSequence}. If {@code bound} is {@code Object.class},\n * this returns {@code ?}, which is shorthand for {@code ? extends Object}.\n */\n",
        "file": "Gson_14/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "span_end": 79,
        "name": "subtypeOf",
        "start_line": 77,
        "span_start": 79,
        "bug_name": "Gson_14",
        "end_line": 85
      }
    ]
  },
  "JacksonCore_1": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonCore_1/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java",
        "span_end": 295,
        "name": "parseBigDecimal",
        "start_line": 293,
        "span_start": 295,
        "bug_name": "JacksonCore_1",
        "end_line": 300
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Convenience method for converting contents of the buffer\n * into a {@link BigDecimal}.\n */\n",
        "file": "JacksonCore_1/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java",
        "span_end": 394,
        "name": "contentsAsDecimal",
        "start_line": 382,
        "span_start": 390,
        "bug_name": "JacksonCore_1",
        "end_line": 399
      }
    ]
  },
  "JacksonCore_2": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n *  Initial parsing method for number values. It needs to be able\n *  to parse enough input to be able to determine whether the\n *  value is to be considered a simple integer value, or a more\n *  generic decimal value: latter of which needs to be expressed\n *  as a floating point number. The basic rule is that if the number\n *  has no fractional or exponential part, it is an integer; otherwise\n *  a floating point number.\n * <p>\n *  Because much of input has to be processed in any case, no partial\n *  parsing is done: all input text will be stored for further\n *  processing. However, actual numeric value conversion will be\n *  deferred, since it is usually the most complicated and costliest\n *  part of processing.\n */\n",
        "file": "JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 951,
        "name": "_parseNumber",
        "start_line": 846,
        "span_start": 952,
        "bug_name": "JacksonCore_2",
        "end_line": 962
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to parse a number, when the primary parse\n * method has failed to parse it, due to it being split on\n * buffer boundary. As a result code is very similar, except\n * that it has to explicitly copy contents to the text buffer\n * instead of just sharing the main input buffer.\n */\n",
        "file": "JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 1080,
        "name": "_parseNumber2",
        "start_line": 971,
        "span_start": 1081,
        "bug_name": "JacksonCore_2",
        "end_line": 1091
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *  Initial parsing method for number values. It needs to be able\n *  to parse enough input to be able to determine whether the\n *  value is to be considered a simple integer value, or a more\n *  generic decimal value: latter of which needs to be expressed\n *  as a floating point number. The basic rule is that if the number\n *  has no fractional or exponential part, it is an integer; otherwise\n *  a floating point number.\n * <p>\n *  Because much of input has to be processed in any case, no partial\n *  parsing is done: all input text will be stored for further\n *  processing. However, actual numeric value conversion will be\n *  deferred, since it is usually the most complicated and costliest\n *  part of processing.\n */\n",
        "file": "JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1243,
        "name": "_parseNumber",
        "start_line": 1184,
        "span_start": 1244,
        "bug_name": "JacksonCore_2",
        "end_line": 1250
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to handle parsing when input is split across buffer boundary\n * (or output is longer than segment used to store it)\n */\n",
        "file": "JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1279,
        "name": "_parserNumber2",
        "start_line": 1256,
        "span_start": 1280,
        "bug_name": "JacksonCore_2",
        "end_line": 1290
      },
      {
        "member_type": "method",
        "file": "JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1406,
        "name": "_parseFloat",
        "start_line": 1329,
        "span_start": 1407,
        "bug_name": "JacksonCore_2",
        "end_line": 1421
      },
      {
        "member_type": "method",
        "file": "JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1422,
        "name": "_parseFloat",
        "start_line": 1329,
        "span_start": 1421,
        "bug_name": "JacksonCore_2",
        "end_line": 1421
      },
      {
        "member_type": "method",
        "file": "JacksonCore_2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 2577,
        "name": "_skipWSOrEnd",
        "start_line": 2566,
        "span_start": 2575,
        "bug_name": "JacksonCore_2",
        "end_line": 2607
      }
    ]
  },
  "JacksonCore_9": {
    "bug_count": 6,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonCore_9/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
        "span_end": 391,
        "name": "getValueAsString",
        "start_line": 387,
        "span_start": 392,
        "bug_name": "JacksonCore_9",
        "end_line": 396
      },
      {
        "member_type": "method",
        "file": "JacksonCore_9/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
        "span_end": 399,
        "name": "getValueAsString",
        "start_line": 398,
        "span_start": 400,
        "bug_name": "JacksonCore_9",
        "end_line": 410
      },
      {
        "member_type": "method",
        "file": "JacksonCore_9/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 252,
        "name": "getValueAsString",
        "start_line": 243,
        "span_start": 253,
        "bug_name": "JacksonCore_9",
        "end_line": 257
      },
      {
        "member_type": "method",
        "file": "JacksonCore_9/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 265,
        "name": "getValueAsString",
        "start_line": 260,
        "span_start": 266,
        "bug_name": "JacksonCore_9",
        "end_line": 273
      },
      {
        "member_type": "method",
        "file": "JacksonCore_9/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 304,
        "name": "getValueAsString",
        "start_line": 295,
        "span_start": 305,
        "bug_name": "JacksonCore_9",
        "end_line": 309
      },
      {
        "member_type": "method",
        "file": "JacksonCore_9/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 318,
        "name": "getValueAsString",
        "start_line": 312,
        "span_start": 319,
        "bug_name": "JacksonCore_9",
        "end_line": 326
      }
    ]
  },
  "JacksonCore_10": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to find the location within hash table to add a new symbol in.\n */\n",
        "file": "JacksonCore_10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "span_end": 925,
        "name": "_findOffsetForAdd",
        "start_line": 887,
        "span_start": 925,
        "bug_name": "JacksonCore_10",
        "end_line": 935
      },
      {
        "member_type": "method",
        "file": "JacksonCore_10/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java",
        "span_end": 984,
        "name": "calcHash",
        "start_line": 976,
        "span_start": 984,
        "bug_name": "JacksonCore_10",
        "end_line": 988
      }
    ]
  },
  "JacksonCore_12": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * @return Next token from the stream, if any found, or null\n *   to indicate end-of-input\n */\n",
        "file": "JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 622,
        "name": "nextToken",
        "start_line": 573,
        "span_start": 622,
        "bug_name": "JacksonCore_12",
        "end_line": 706
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @return Next token from the stream, if any found, or null\n *   to indicate end-of-input\n */\n",
        "file": "JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 634,
        "name": "nextToken",
        "start_line": 573,
        "span_start": 630,
        "bug_name": "JacksonCore_12",
        "end_line": 706
      },
      {
        "member_type": "method",
        "file": "JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 779,
        "name": "nextFieldName",
        "start_line": 732,
        "span_start": 773,
        "bug_name": "JacksonCore_12",
        "end_line": 810
      },
      {
        "member_type": "method",
        "file": "JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 861,
        "name": "nextFieldName",
        "start_line": 812,
        "span_start": 851,
        "bug_name": "JacksonCore_12",
        "end_line": 916
      },
      {
        "member_type": "method",
        "file": "JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 966,
        "name": "_isNextTokenNameMaybe",
        "start_line": 965,
        "span_start": 967,
        "bug_name": "JacksonCore_12",
        "end_line": 1020
      },
      {
        "member_type": "method",
        "file": "JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 2673,
        "name": "getTokenLocation",
        "start_line": 2673,
        "span_start": 2671,
        "bug_name": "JacksonCore_12",
        "end_line": 2684
      },
      {
        "member_type": "method",
        "file": "JacksonCore_12/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 3622,
        "name": "getTokenLocation",
        "start_line": 3613,
        "span_start": 3622,
        "bug_name": "JacksonCore_12",
        "end_line": 3624
      }
    ]
  },
  "JacksonCore_16": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "file": "JacksonCore_16/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
        "span_end": 44,
        "name": "JsonParserSequence",
        "start_line": 43,
        "span_start": 45,
        "bug_name": "JacksonCore_16",
        "end_line": 49
      },
      {
        "member_type": "method",
        "file": "JacksonCore_16/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
        "span_end": 112,
        "name": "nextToken",
        "start_line": 105,
        "span_start": 104,
        "bug_name": "JacksonCore_16",
        "end_line": 121
      }
    ]
  },
  "JacksonCore_17": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonCore_17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
        "span_end": 538,
        "name": "writeRaw",
        "start_line": 522,
        "span_start": 528,
        "bug_name": "JacksonCore_17",
        "end_line": 558
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method called when it is possible that output of raw section\n * to output may cross buffer boundary\n */\n",
        "file": "JacksonCore_17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
        "span_end": 671,
        "name": "_writeSegmentedRaw",
        "start_line": 643,
        "span_start": 672,
        "bug_name": "JacksonCore_17",
        "end_line": 677
      },
      {
        "member_type": "method",
        "file": "JacksonCore_17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
        "span_end": 1887,
        "name": "_readMore",
        "start_line": 1881,
        "span_start": 1887,
        "bug_name": "JacksonCore_17",
        "end_line": 1906
      }
    ]
  },
  "JacksonCore_18": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method used to serialize a {@link java.math.BigDecimal} as a String,\n * for serialization, taking into account configuration settings\n *\n * @since 2.7.7\n */\n",
        "file": "JacksonCore_18/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java",
        "span_end": 434,
        "name": "_asString",
        "start_line": 434,
        "span_start": 434,
        "bug_name": "JacksonCore_18",
        "end_line": 446
      },
      {
        "member_type": "method",
        "file": "JacksonCore_18/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java",
        "span_end": 913,
        "name": "writeNumber",
        "start_line": 902,
        "span_start": 910,
        "bug_name": "JacksonCore_18",
        "end_line": 914
      },
      {
        "member_type": "method",
        "file": "JacksonCore_18/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java",
        "span_end": 690,
        "name": "writeNumber",
        "start_line": 679,
        "span_start": 687,
        "bug_name": "JacksonCore_18",
        "end_line": 691
      }
    ]
  },
  "JacksonCore_19": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to parse a number, when the primary parse\n * method has failed to parse it, due to it being split on\n * buffer boundary. As a result code is very similar, except\n * that it has to explicitly copy contents to the text buffer\n * instead of just sharing the main input buffer.\n */\n",
        "file": "JacksonCore_19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "span_end": 1417,
        "name": "_parseNumber2",
        "start_line": 1374,
        "span_start": 1418,
        "bug_name": "JacksonCore_19",
        "end_line": 1499
      },
      {
        "member_type": "method",
        "file": "JacksonCore_19/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
        "span_end": 1543,
        "name": "_parseFloat",
        "start_line": 1536,
        "span_start": 1544,
        "bug_name": "JacksonCore_19",
        "end_line": 1631
      }
    ]
  },
  "JacksonCore_21": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonCore_21/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 237,
        "name": "nextToken",
        "start_line": 226,
        "span_start": 238,
        "bug_name": "JacksonCore_21",
        "end_line": 456
      },
      {
        "member_type": "method",
        "file": "JacksonCore_21/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 247,
        "name": "nextToken",
        "start_line": 226,
        "span_start": 248,
        "bug_name": "JacksonCore_21",
        "end_line": 456
      }
    ]
  },
  "JacksonCore_22": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 417,
        "name": "nextToken",
        "start_line": 226,
        "span_start": 417,
        "bug_name": "JacksonCore_22",
        "end_line": 451
      },
      {
        "member_type": "method",
        "file": "JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 440,
        "name": "nextToken",
        "start_line": 226,
        "span_start": 440,
        "bug_name": "JacksonCore_22",
        "end_line": 451
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Offlined handling for cases where there was no buffered token to\n * return, and the token read next could not be returned as-is,\n * at least not yet, but where we have not yet established that\n * buffering is needed.\n */\n",
        "file": "JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 575,
        "name": "_nextToken2",
        "start_line": 459,
        "span_start": 575,
        "bug_name": "JacksonCore_22",
        "end_line": 611
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Offlined handling for cases where there was no buffered token to\n * return, and the token read next could not be returned as-is,\n * at least not yet, but where we have not yet established that\n * buffering is needed.\n */\n",
        "file": "JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 600,
        "name": "_nextToken2",
        "start_line": 459,
        "span_start": 600,
        "bug_name": "JacksonCore_22",
        "end_line": 611
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called when a new potentially included context is found.\n */\n",
        "file": "JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 717,
        "name": "_nextTokenWithBuffering",
        "start_line": 616,
        "span_start": 717,
        "bug_name": "JacksonCore_22",
        "end_line": 745
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called when a new potentially included context is found.\n */\n",
        "file": "JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 732,
        "name": "_nextTokenWithBuffering",
        "start_line": 616,
        "span_start": 732,
        "bug_name": "JacksonCore_22",
        "end_line": 745
      },
      {
        "member_type": "method",
        "file": "JacksonCore_22/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "span_end": 770,
        "name": "_nextBuffered",
        "start_line": 747,
        "span_start": 771,
        "bug_name": "JacksonCore_22",
        "end_line": 775
      }
    ]
  },
  "JacksonCore_24": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonCore_24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java",
        "span_end": 871,
        "name": "_reportTooLongIntegral",
        "start_line": 867,
        "span_start": 869,
        "bug_name": "JacksonCore_24",
        "end_line": 874
      },
      {
        "member_type": "method",
        "file": "JacksonCore_24/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java",
        "span_end": 887,
        "name": "convertNumberToInt",
        "start_line": 882,
        "span_start": 887,
        "bug_name": "JacksonCore_24",
        "end_line": 914
      },
      {
        "member_type": "method",
        "file": "JacksonCore_24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
        "span_end": 569,
        "name": "reportOverflowInt",
        "start_line": 564,
        "span_start": 565,
        "bug_name": "JacksonCore_24",
        "end_line": 573
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to throw an exception for integral (not floating point) input\n * token with value outside of Java signed 64-bit range when requested as {@link long}.\n * Result will be {@link InputCoercionException} being thrown.\n */\n",
        "file": "JacksonCore_24/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java",
        "span_end": 586,
        "name": "reportOverflowLong",
        "start_line": 580,
        "span_start": 582,
        "bug_name": "JacksonCore_24",
        "end_line": 587
      }
    ]
  },
  "JacksonDatabind_3": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_3/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 66,
        "name": "deserialize",
        "start_line": 43,
        "span_start": 66,
        "bug_name": "JacksonDatabind_3",
        "end_line": 79
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Offlined version used when we do not use the default deserialization method.\n */\n",
        "file": "JacksonDatabind_3/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 95,
        "name": "_deserializeCustom",
        "start_line": 84,
        "span_start": 95,
        "bug_name": "JacksonDatabind_3",
        "end_line": 105
      }
    ]
  },
  "JacksonDatabind_4": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_4/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 58,
        "name": "deserialize",
        "start_line": 42,
        "span_start": 59,
        "bug_name": "JacksonDatabind_4",
        "end_line": 83
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_4/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 75,
        "name": "deserialize",
        "start_line": 42,
        "span_start": 75,
        "bug_name": "JacksonDatabind_4",
        "end_line": 83
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Offlined version used when we do not use the default deserialization method.\n */\n",
        "file": "JacksonDatabind_4/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 92,
        "name": "_deserializeCustom",
        "start_line": 88,
        "span_start": 93,
        "bug_name": "JacksonDatabind_4",
        "end_line": 114
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Offlined version used when we do not use the default deserialization method.\n */\n",
        "file": "JacksonDatabind_4/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
        "span_end": 102,
        "name": "_deserializeCustom",
        "start_line": 88,
        "span_start": 102,
        "bug_name": "JacksonDatabind_4",
        "end_line": 114
      }
    ]
  },
  "JacksonDatabind_6": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_6/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 409,
        "name": "parseAsISO8601",
        "start_line": 359,
        "span_start": 406,
        "bug_name": "JacksonDatabind_6",
        "end_line": 457
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_6/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 422,
        "name": "parseAsISO8601",
        "start_line": 359,
        "span_start": 421,
        "bug_name": "JacksonDatabind_6",
        "end_line": 457
      }
    ]
  },
  "JacksonDatabind_8": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_8/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 282,
        "name": "verifyNonDup",
        "start_line": 276,
        "span_start": 283,
        "bug_name": "JacksonDatabind_8",
        "end_line": 319
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_8/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 300,
        "name": "verifyNonDup",
        "start_line": 276,
        "span_start": 290,
        "bug_name": "JacksonDatabind_8",
        "end_line": 319
      }
    ]
  },
  "JacksonDatabind_10": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "constructor",
        "file": "JacksonDatabind_10/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
        "span_end": 33,
        "name": "AnyGetterWriter",
        "start_line": 28,
        "span_start": 24,
        "bug_name": "JacksonDatabind_10",
        "end_line": 38
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_10/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
        "span_end": 51,
        "name": "getAndSerialize",
        "start_line": 40,
        "span_start": 52,
        "bug_name": "JacksonDatabind_10",
        "end_line": 57
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @since 2.3\n */\n",
        "file": "JacksonDatabind_10/src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
        "span_end": 74,
        "name": "getAndFilter",
        "start_line": 62,
        "span_start": 75,
        "bug_name": "JacksonDatabind_10",
        "end_line": 81
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to construct serializer for serializing specified bean type.\n *\n * @since 2.1\n */\n",
        "file": "JacksonDatabind_10/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "span_end": 396,
        "name": "constructBeanSerializer",
        "start_line": 334,
        "span_start": 395,
        "bug_name": "JacksonDatabind_10",
        "end_line": 428
      }
    ]
  },
  "JacksonDatabind_13": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_13/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
        "span_end": 86,
        "name": "findObjectId",
        "start_line": 81,
        "span_start": 87,
        "bug_name": "JacksonDatabind_13",
        "end_line": 134
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_13/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
        "span_end": 91,
        "name": "deserializeSetAndReturn",
        "start_line": 80,
        "span_start": 92,
        "bug_name": "JacksonDatabind_13",
        "end_line": 104
      }
    ]
  },
  "JacksonDatabind_14": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_14/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
        "span_end": 1476,
        "name": "_bindAsTree",
        "start_line": 1468,
        "span_start": 1476,
        "bug_name": "JacksonDatabind_14",
        "end_line": 1486
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @since 2.6\n */\n",
        "file": "JacksonDatabind_14/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
        "span_end": 1577,
        "name": "_findTreeDeserializer",
        "start_line": 1577,
        "span_start": 1577,
        "bug_name": "JacksonDatabind_14",
        "end_line": 1590
      }
    ]
  },
  "JacksonDatabind_15": {
    "bug_count": 8,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n *  Main serializer constructor method. We will have to be careful\n *  with respect to ordering of various method calls: essentially\n *  we want to reliably figure out which classes are standard types,\n *  and which are beans. The problem is that some bean Classes may\n *  implement standard interfaces (say, {@link java.lang.Iterable}.\n * <p>\n *  Note: sub-classes may choose to complete replace implementation,\n *  if they want to alter priority of serializer lookups.\n */\n",
        "file": "JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "span_end": 163,
        "name": "createSerializer",
        "start_line": 125,
        "span_start": 163,
        "bug_name": "JacksonDatabind_15",
        "end_line": 167
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method that can be used to see if specified property is annotated\n * to indicate use of a converter for property value (in case of container types,\n * it is container type itself, not key or content type).\n *\n * @since 2.2\n */\n",
        "file": "JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
        "span_end": 370,
        "name": "findConvertingSerializer",
        "start_line": 357,
        "span_start": 370,
        "bug_name": "JacksonDatabind_15",
        "end_line": 377
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 127,
        "name": "createContextual",
        "start_line": 106,
        "span_start": 121,
        "bug_name": "JacksonDatabind_15",
        "end_line": 132
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 161,
        "name": "serialize",
        "start_line": 155,
        "span_start": 161,
        "bug_name": "JacksonDatabind_15",
        "end_line": 170
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 172,
        "name": "serializeWithType",
        "start_line": 172,
        "span_start": 172,
        "bug_name": "JacksonDatabind_15",
        "end_line": 185
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 179,
        "name": "serializeWithType",
        "start_line": 172,
        "span_start": 180,
        "bug_name": "JacksonDatabind_15",
        "end_line": 185
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
        "span_end": 224,
        "name": "getSchema",
        "start_line": 224,
        "span_start": 224,
        "bug_name": "JacksonDatabind_15",
        "end_line": 232
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method that can be used to see if specified property has annotation\n * indicating that a converter is to be used for contained values (contents\n * of structured types; array/List/Map values)\n *\n * @param existingSerializer (optional) configured content\n *    serializer if one already exists.\n *\n * @since 2.2\n */\n",
        "file": "JacksonDatabind_15/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
        "span_end": 262,
        "name": "findConvertingContentSerializer",
        "start_line": 245,
        "span_start": 262,
        "bug_name": "JacksonDatabind_15",
        "end_line": 270
      }
    ]
  },
  "JacksonDatabind_18": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * @param managedParser Whether we \"own\" the {@link JsonParser} passed or not:\n *   if true, it was created by {@link ObjectReader} and code here needs to\n *   close it; if false, it was passed by calling code and should not be\n *   closed by iterator.\n */\n",
        "file": "JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 143,
        "name": "MappingIterator",
        "start_line": 117,
        "span_start": 138,
        "bug_name": "JacksonDatabind_18",
        "end_line": 163
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 191,
        "name": "next",
        "start_line": 188,
        "span_start": 189,
        "bug_name": "JacksonDatabind_18",
        "end_line": 198
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 228,
        "name": "close",
        "start_line": 205,
        "span_start": 210,
        "bug_name": "JacksonDatabind_18",
        "end_line": 213
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Equivalent of {@link #next} but one that may throw checked\n * exceptions from Jackson due to invalid input.\n */\n",
        "file": "JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 245,
        "name": "hasNextValue",
        "start_line": 229,
        "span_start": 236,
        "bug_name": "JacksonDatabind_18",
        "end_line": 256
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Equivalent of {@link #next} but one that may throw checked\n * exceptions from Jackson due to invalid input.\n */\n",
        "file": "JacksonDatabind_18/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java",
        "span_end": 255,
        "name": "hasNextValue",
        "start_line": 229,
        "span_start": 254,
        "bug_name": "JacksonDatabind_18",
        "end_line": 256
      }
    ]
  },
  "JacksonDatabind_21": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Since 2.6, we have supported use of {@link JsonProperty} for specifying\n * explicit serialized name\n */\n",
        "file": "JacksonDatabind_21/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 68,
        "name": "findEnumValue",
        "start_line": 65,
        "span_start": 64,
        "bug_name": "JacksonDatabind_21",
        "end_line": 85
      }
    ]
  },
  "JacksonDatabind_22": {
    "bug_count": 11,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * @since 2.1\n */\n",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 603,
        "name": "buildContainerSerializer",
        "start_line": 544,
        "span_start": 580,
        "bug_name": "JacksonDatabind_22",
        "end_line": 638
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "span_end": 211,
        "name": "_createSerializer2",
        "start_line": 170,
        "span_start": 212,
        "bug_name": "JacksonDatabind_22",
        "end_line": 248
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @since 2.1\n */\n",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 624,
        "name": "buildContainerSerializer",
        "start_line": 544,
        "span_start": 612,
        "bug_name": "JacksonDatabind_22",
        "end_line": 638
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @since 2.1\n */\n",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 640,
        "name": "buildContainerSerializer",
        "start_line": 544,
        "span_start": 636,
        "bug_name": "JacksonDatabind_22",
        "end_line": 638
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method that handles configuration details when constructing serializers for\n * {@link java.util.List} types that support efficient by-index access\n *\n * @since 2.1\n */\n",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 654,
        "name": "buildCollectionSerializer",
        "start_line": 646,
        "span_start": 655,
        "bug_name": "JacksonDatabind_22",
        "end_line": 715
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method that handles configuration details when constructing serializers for\n * {@link java.util.List} types that support efficient by-index access\n *\n * @since 2.1\n */\n",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 690,
        "name": "buildCollectionSerializer",
        "start_line": 646,
        "span_start": 691,
        "bug_name": "JacksonDatabind_22",
        "end_line": 715
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 742,
        "name": "buildEnumSetSerializer",
        "start_line": 737,
        "span_start": 737,
        "bug_name": "JacksonDatabind_22",
        "end_line": 739
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method that handles configuration details when constructing serializers for\n * {@link java.util.Map} types.\n */\n",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 755,
        "name": "buildMapSerializer",
        "start_line": 751,
        "span_start": 756,
        "bug_name": "JacksonDatabind_22",
        "end_line": 809
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method that handles configuration details when constructing serializers for\n * {@link java.util.Map} types.\n */\n",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 783,
        "name": "buildMapSerializer",
        "start_line": 751,
        "span_start": 784,
        "bug_name": "JacksonDatabind_22",
        "end_line": 809
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>\n *  NOTE: although return type is left opaque, it really needs to be\n *  <code>JsonInclude.Include</code> for things to work as expected.\n *\n *  @since 2.5\n */\n",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
        "span_end": 831,
        "name": "findSuppressableContentValue",
        "start_line": 818,
        "span_start": 831,
        "bug_name": "JacksonDatabind_22",
        "end_line": 837
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_22/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
        "span_end": 177,
        "name": "_createSerializer2",
        "start_line": 170,
        "span_start": 174,
        "bug_name": "JacksonDatabind_22",
        "end_line": 248
      }
    ]
  },
  "JacksonDatabind_23": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 158,
        "name": "serializeWithType",
        "start_line": 158,
        "span_start": 159,
        "bug_name": "JacksonDatabind_23",
        "end_line": 163
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 189,
        "name": "isEmpty",
        "start_line": 185,
        "span_start": 185,
        "bug_name": "JacksonDatabind_23",
        "end_line": 188
      },
      {
        "member_type": "constructor",
        "file": "JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 204,
        "name": "LongSerializer",
        "start_line": 203,
        "span_start": 200,
        "bug_name": "JacksonDatabind_23",
        "end_line": 203
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_23/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 226,
        "name": "isEmpty",
        "start_line": 223,
        "span_start": 222,
        "bug_name": "JacksonDatabind_23",
        "end_line": 228
      }
    ]
  },
  "JacksonDatabind_25": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to see if given method has annotations that indicate\n * a more specific type than what the argument specifies.\n * If annotations are present, they must specify compatible Class;\n * instance of which can be assigned using the method. This means\n * that the Class has to be raw class of type, or its sub-class\n * (or, implementing class if original Class instance is an interface).\n *\n * @param a Method or field that the type is associated with\n * @param type Type of field, or the setter argument\n *\n * @return Original type if no annotations are present; or a more\n *   specific type derived from it if type annotation(s) was found\n *\n * @throws JsonMappingException if invalid annotation is found\n */\n",
        "file": "JacksonDatabind_25/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "span_end": 1757,
        "name": "modifyTypeByAnnotation",
        "start_line": 1747,
        "span_start": 1757,
        "bug_name": "JacksonDatabind_25",
        "end_line": 1811
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to see if given method has annotations that indicate\n * a more specific type than what the argument specifies.\n * If annotations are present, they must specify compatible Class;\n * instance of which can be assigned using the method. This means\n * that the Class has to be raw class of type, or its sub-class\n * (or, implementing class if original Class instance is an interface).\n *\n * @param a Method or field that the type is associated with\n * @param type Type derived from the setter argument\n *\n * @return Original type if no annotations are present; or a more\n *   specific type derived from it if type annotation(s) was found\n *\n * @throws JsonMappingException if invalid annotation is found\n */\n",
        "file": "JacksonDatabind_25/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "span_end": 477,
        "name": "modifyTypeByAnnotation",
        "start_line": 468,
        "span_start": 477,
        "bug_name": "JacksonDatabind_25",
        "end_line": 543
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_25/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
        "span_end": 177,
        "name": "_findDeserializer",
        "start_line": 144,
        "span_start": 177,
        "bug_name": "JacksonDatabind_25",
        "end_line": 184
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_25/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java",
        "span_end": 80,
        "name": "findTypeMapping",
        "start_line": 70,
        "span_start": 80,
        "bug_name": "JacksonDatabind_25",
        "end_line": 81
      }
    ]
  },
  "JacksonDatabind_29": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_29/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
        "span_end": 227,
        "name": "_deserialize",
        "start_line": 221,
        "span_start": 228,
        "bug_name": "JacksonDatabind_29",
        "end_line": 242
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_29/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
        "span_end": 250,
        "name": "_deserializeAndSet",
        "start_line": 244,
        "span_start": 251,
        "bug_name": "JacksonDatabind_29",
        "end_line": 268
      }
    ]
  },
  "JacksonDatabind_30": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n *  Reverse of {@link #treeToValue}; given a value (usually bean), will\n *  construct equivalent JSON Tree representation. Functionally similar\n *  to serializing value into JSON and parsing JSON as tree, but\n *  more efficient.\n * <p>\n *  NOTE: while results are usually identical to that of serialization followed\n *  by deserialization, this is not always the case. In some cases serialization\n *  into intermediate representation will retain encapsulation of things like\n *  raw value ({@link com.fasterxml.jackson.databind.util.RawValue}) or basic\n *  node identity ({@link JsonNode}). If so, result is a valid tree, but values\n *  are not re-constructed through actual JSON representation. So if transformation\n *  requires actual materialization of JSON (or other data format that this mapper\n *  produces), it will be necessary to do actual serialization.\n *\n *  @param <T> Actual node type; usually either basic {@link JsonNode} or\n *   {@link com.fasterxml.jackson.databind.node.ObjectNode}\n *  @param fromValue Bean value to convert\n *  @return Root node of the resulting JSON tree\n */\n",
        "file": "JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "span_end": 2509,
        "name": "valueToTree",
        "start_line": 2504,
        "span_start": 2510,
        "bug_name": "JacksonDatabind_30",
        "end_line": 2523
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Actual conversion implementation: instead of using existing read\n * and write methods, much of code is inlined. Reason for this is\n * that we must avoid root value wrapping/unwrapping both for efficiency and\n * for correctness. If root value wrapping/unwrapping is actually desired,\n * caller must use explicit <code>writeValue</code> and\n * <code>readValue</code> methods.\n */\n",
        "file": "JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "span_end": 3425,
        "name": "_convert",
        "start_line": 3411,
        "span_start": 3426,
        "bug_name": "JacksonDatabind_30",
        "end_line": 3461
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * @since 2.7\n */\n",
        "file": "JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 192,
        "name": "TokenBuffer",
        "start_line": 178,
        "span_start": 188,
        "bug_name": "JacksonDatabind_30",
        "end_line": 191
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 963,
        "name": "copyCurrentEvent",
        "start_line": 924,
        "span_start": 959,
        "bug_name": "JacksonDatabind_30",
        "end_line": 1001
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_30/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 972,
        "name": "copyCurrentEvent",
        "start_line": 924,
        "span_start": 973,
        "bug_name": "JacksonDatabind_30",
        "end_line": 1001
      }
    ]
  },
  "JacksonDatabind_31": {
    "bug_count": 12,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Similar to {@link #_append(JsonToken)} but also updates context with\n * knowledge that a scalar value was written\n *\n * @since 2.6.4\n */\n",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 1097,
        "name": "_appendValue",
        "start_line": 1091,
        "span_start": 1098,
        "bug_name": "JacksonDatabind_31",
        "end_line": 1103
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 672,
        "name": "writeString",
        "start_line": 667,
        "span_start": 672,
        "bug_name": "JacksonDatabind_31",
        "end_line": 674
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 686,
        "name": "writeString",
        "start_line": 681,
        "span_start": 686,
        "bug_name": "JacksonDatabind_31",
        "end_line": 688
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 731,
        "name": "writeRawValue",
        "start_line": 729,
        "span_start": 731,
        "bug_name": "JacksonDatabind_31",
        "end_line": 732
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 744,
        "name": "writeRawValue",
        "start_line": 734,
        "span_start": 739,
        "bug_name": "JacksonDatabind_31",
        "end_line": 745
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 775,
        "name": "writeNumber",
        "start_line": 753,
        "span_start": 755,
        "bug_name": "JacksonDatabind_31",
        "end_line": 776
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 783,
        "name": "writeNumber",
        "start_line": 778,
        "span_start": 783,
        "bug_name": "JacksonDatabind_31",
        "end_line": 785
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 792,
        "name": "writeNumber",
        "start_line": 787,
        "span_start": 792,
        "bug_name": "JacksonDatabind_31",
        "end_line": 794
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 811,
        "name": "writeNumber",
        "start_line": 796,
        "span_start": 801,
        "bug_name": "JacksonDatabind_31",
        "end_line": 812
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 829,
        "name": "writeObject",
        "start_line": 820,
        "span_start": 829,
        "bug_name": "JacksonDatabind_31",
        "end_line": 841
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 837,
        "name": "writeObject",
        "start_line": 820,
        "span_start": 837,
        "bug_name": "JacksonDatabind_31",
        "end_line": 841
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_31/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
        "span_end": 853,
        "name": "writeTree",
        "start_line": 843,
        "span_start": 853,
        "bug_name": "JacksonDatabind_31",
        "end_line": 857
      }
    ]
  },
  "JacksonDatabind_32": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_32/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "span_end": 220,
        "name": "deserialize",
        "start_line": 213,
        "span_start": 221,
        "bug_name": "JacksonDatabind_32",
        "end_line": 278
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_32/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
        "span_end": 536,
        "name": "deserialize",
        "start_line": 484,
        "span_start": 535,
        "bug_name": "JacksonDatabind_32",
        "end_line": 545
      }
    ]
  },
  "JacksonDatabind_36": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Need to override since we need to keep track of leniency locally,\n * and not via underlying {@link Calendar} instance like base class\n * does.\n */\n",
        "file": "JacksonDatabind_36/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 250,
        "name": "setLenient",
        "start_line": 250,
        "span_start": 250,
        "bug_name": "JacksonDatabind_36",
        "end_line": 258
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_36/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 556,
        "name": "_cloneFormat",
        "start_line": 553,
        "span_start": 557,
        "bug_name": "JacksonDatabind_36",
        "end_line": 569
      }
    ]
  },
  "JacksonDatabind_38": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * @deprecated Since 2.7, remove from 2.8\n */\n",
        "file": "JacksonDatabind_38/src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java",
        "span_end": 50,
        "name": "construct",
        "start_line": 47,
        "span_start": 50,
        "bug_name": "JacksonDatabind_38",
        "end_line": 62
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_38/src/main/java/com/fasterxml/jackson/databind/type/MapType.java",
        "span_end": 48,
        "name": "construct",
        "start_line": 43,
        "span_start": 47,
        "bug_name": "JacksonDatabind_38",
        "end_line": 58
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *  Method that should NOT to be used by application code:\n *  it does NOT properly handle inspection of super-types, so neither parent\n *  Classes nor implemented Interfaces are accessible with resulting type\n *  instance. Instead, please use {@link TypeFactory}'s <code>constructType</code>\n *  methods which handle introspection appropriately.\n * <p>\n *  Note that prior to 2.7, method usage was not limited and would typically\n *  have worked acceptably: the problem comes from inability to resolve super-type\n *  information, for which {@link TypeFactory} is needed.\n *\n *  @deprecated Since 2.7\n */\n",
        "file": "JacksonDatabind_38/src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
        "span_end": 117,
        "name": "construct",
        "start_line": 100,
        "span_start": 116,
        "bug_name": "JacksonDatabind_38",
        "end_line": 119
      }
    ]
  },
  "JacksonDatabind_41": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * @deprecated Since 2.7 (accidentally removed in 2.7.0; added back in 2.7.1)\n */\n",
        "file": "JacksonDatabind_41/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 602,
        "name": "constructType",
        "start_line": 600,
        "span_start": 602,
        "bug_name": "JacksonDatabind_41",
        "end_line": 605
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @deprecated Since 2.7 (accidentally removed in 2.7.0; added back in 2.7.1)\n */\n",
        "file": "JacksonDatabind_41/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 610,
        "name": "constructType",
        "start_line": 610,
        "span_start": 610,
        "bug_name": "JacksonDatabind_41",
        "end_line": 615
      }
    ]
  },
  "JacksonDatabind_43": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_43/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
        "span_end": 87,
        "name": "deserializeSetAndReturn",
        "start_line": 75,
        "span_start": 78,
        "bug_name": "JacksonDatabind_43",
        "end_line": 97
      }
    ]
  },
  "JacksonDatabind_48": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_48/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java",
        "span_end": 779,
        "name": "getDefaultVisibilityChecker",
        "start_line": 770,
        "span_start": 780,
        "bug_name": "JacksonDatabind_48",
        "end_line": 790
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_48/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java",
        "span_end": 864,
        "name": "getDefaultVisibilityChecker",
        "start_line": 860,
        "span_start": 865,
        "bug_name": "JacksonDatabind_48",
        "end_line": 881
      }
    ]
  },
  "JacksonDatabind_50": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to deserialize bean using \"property-based creator\":\n * this means that a non-default constructor or factory method is\n * called, and then possibly other setters. The trick is that\n * values for creator method need to be buffered, first; and\n * due to non-guaranteed ordering possibly some other properties\n * as well.\n */\n",
        "file": "JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 386,
        "name": "_deserializeUsingPropertyBased",
        "start_line": 377,
        "span_start": 387,
        "bug_name": "JacksonDatabind_50",
        "end_line": 489
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to deserialize bean using \"property-based creator\":\n * this means that a non-default constructor or factory method is\n * called, and then possibly other setters. The trick is that\n * values for creator method need to be buffered, first; and\n * due to non-guaranteed ordering possibly some other properties\n * as well.\n */\n",
        "file": "JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 432,
        "name": "_deserializeUsingPropertyBased",
        "start_line": 377,
        "span_start": 429,
        "bug_name": "JacksonDatabind_50",
        "end_line": 489
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to deserialize bean using \"property-based creator\":\n * this means that a non-default constructor or factory method is\n * called, and then possibly other setters. The trick is that\n * values for creator method need to be buffered, first; and\n * due to non-guaranteed ordering possibly some other properties\n * as well.\n */\n",
        "file": "JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 464,
        "name": "_deserializeUsingPropertyBased",
        "start_line": 377,
        "span_start": 465,
        "bug_name": "JacksonDatabind_50",
        "end_line": 489
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to deserialize bean using \"property-based creator\":\n * this means that a non-default constructor or factory method is\n * called, and then possibly other setters. The trick is that\n * values for creator method need to be buffered, first; and\n * due to non-guaranteed ordering possibly some other properties\n * as well.\n */\n",
        "file": "JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 478,
        "name": "_deserializeUsingPropertyBased",
        "start_line": 377,
        "span_start": 479,
        "bug_name": "JacksonDatabind_50",
        "end_line": 489
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_50/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "span_end": 933,
        "name": "deserializeUsingPropertyBasedWithExternalTypeId",
        "start_line": 858,
        "span_start": 933,
        "bug_name": "JacksonDatabind_50",
        "end_line": 940
      }
    ]
  },
  "JacksonDatabind_52": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to finalize setup of this deserializer,\n * after deserializer itself has been registered.\n * This is needed to handle recursive and transitive dependencies.\n */\n",
        "file": "JacksonDatabind_52/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 612,
        "name": "resolve",
        "start_line": 456,
        "span_start": 612,
        "bug_name": "JacksonDatabind_52",
        "end_line": 624
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called after all external properties have been assigned, to further\n * link property with polymorphic value with possible property for type id\n * itself. This is needed to support type ids as Creator properties.\n *\n * @since 2.8\n */\n",
        "file": "JacksonDatabind_52/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
        "span_end": 310,
        "name": "build",
        "start_line": 310,
        "span_start": 310,
        "bug_name": "JacksonDatabind_52",
        "end_line": 324
      }
    ]
  },
  "JacksonDatabind_53": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Factory method that will create an object that can be used as a key for\n * caching purposes by {@link TypeFactory}\n *\n * @since 2.8\n */\n",
        "file": "JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java",
        "span_end": 303,
        "name": "asKey",
        "start_line": 302,
        "span_start": 302,
        "bug_name": "JacksonDatabind_53",
        "end_line": 306
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Factory method for creating a subtype of given base type, as defined\n * by specified subclass; but retaining generic type information if any.\n * Can be used, for example, to get equivalent of \"HashMap&lt;String,Integer&gt;\"\n * from \"Map&lt;String,Integer&gt;\" by giving <code>HashMap.class</code>\n * as subclass.\n */\n",
        "file": "JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 402,
        "name": "constructSpecializedType",
        "start_line": 312,
        "span_start": 385,
        "bug_name": "JacksonDatabind_53",
        "end_line": 445
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 458,
        "name": "_bindingsForSubtype",
        "start_line": 447,
        "span_start": 456,
        "bug_name": "JacksonDatabind_53",
        "end_line": 468
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param bindings Mapping of formal parameter declarations (for generic\n *   types) into actual types\n */\n",
        "file": "JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 1165,
        "name": "_fromClass",
        "start_line": 1162,
        "span_start": 1160,
        "bug_name": "JacksonDatabind_53",
        "end_line": 1241
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param bindings Mapping of formal parameter declarations (for generic\n *   types) into actual types\n */\n",
        "file": "JacksonDatabind_53/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 1227,
        "name": "_fromClass",
        "start_line": 1162,
        "span_start": 1225,
        "bug_name": "JacksonDatabind_53",
        "end_line": 1241
      }
    ]
  },
  "JacksonDatabind_54": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * @param contentTypeSer Optional explicit type information serializer\n *    to use for contained values (only used for properties that are\n *    of container type)\n */\n",
        "file": "JacksonDatabind_54/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
        "span_end": 134,
        "name": "buildWriter",
        "start_line": 67,
        "span_start": 134,
        "bug_name": "JacksonDatabind_54",
        "end_line": 171
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param contentTypeSer Optional explicit type information serializer\n *    to use for contained values (only used for properties that are\n *    of container type)\n */\n",
        "file": "JacksonDatabind_54/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
        "span_end": 150,
        "name": "buildWriter",
        "start_line": 67,
        "span_start": 150,
        "bug_name": "JacksonDatabind_54",
        "end_line": 171
      }
    ]
  },
  "JacksonDatabind_55": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called if no specified key serializer was located; will return a\n * \"default\" key serializer.\n *\n * @since 2.7\n */\n",
        "file": "JacksonDatabind_55/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java",
        "span_end": 82,
        "name": "getFallbackKeySerializer",
        "start_line": 68,
        "span_start": 82,
        "bug_name": "JacksonDatabind_55",
        "end_line": 88
      }
    ]
  },
  "JacksonDatabind_56": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_56/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
        "span_end": 237,
        "name": "_deserialize",
        "start_line": 205,
        "span_start": 231,
        "bug_name": "JacksonDatabind_56",
        "end_line": 276
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_56/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
        "span_end": 292,
        "name": "_firstHyphenOrUnderscore",
        "start_line": 292,
        "span_start": 292,
        "bug_name": "JacksonDatabind_56",
        "end_line": 301
      }
    ]
  },
  "JacksonDatabind_59": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_59/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType.java",
        "span_end": 148,
        "name": "withHandlersFrom",
        "start_line": 148,
        "span_start": 148,
        "bug_name": "JacksonDatabind_59",
        "end_line": 169
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Factory method for creating a subtype of given base type, as defined\n * by specified subclass; but retaining generic type information if any.\n * Can be used, for example, to get equivalent of \"HashMap&lt;String,Integer&gt;\"\n * from \"Map&lt;String,Integer&gt;\" by giving <code>HashMap.class</code>\n * as subclass.\n */\n",
        "file": "JacksonDatabind_59/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 427,
        "name": "constructSpecializedType",
        "start_line": 342,
        "span_start": 428,
        "bug_name": "JacksonDatabind_59",
        "end_line": 475
      }
    ]
  },
  "JacksonDatabind_60": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_60/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
        "span_end": 226,
        "name": "serializeWithType",
        "start_line": 197,
        "span_start": 226,
        "bug_name": "JacksonDatabind_60",
        "end_line": 245
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_60/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java",
        "span_end": 380,
        "name": "forProperty",
        "start_line": 372,
        "span_start": 363,
        "bug_name": "JacksonDatabind_60",
        "end_line": 380
      }
    ]
  },
  "JacksonDatabind_61": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to check if the default type handler should be\n * used for given type.\n * Note: \"natural types\" (String, Boolean, Integer, Double) will never\n * use typing; that is both due to them being concrete and final,\n * and since actual serializers and deserializers will also ignore any\n * attempts to enforce typing.\n */\n",
        "file": "JacksonDatabind_61/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
        "span_end": 231,
        "name": "useForType",
        "start_line": 228,
        "span_start": 232,
        "bug_name": "JacksonDatabind_61",
        "end_line": 266
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_61/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "span_end": 73,
        "name": "buildTypeSerializer",
        "start_line": 67,
        "span_start": 74,
        "bug_name": "JacksonDatabind_61",
        "end_line": 92
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_61/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
        "span_end": 103,
        "name": "buildTypeDeserializer",
        "start_line": 100,
        "span_start": 104,
        "bug_name": "JacksonDatabind_61",
        "end_line": 150
      }
    ]
  },
  "JacksonDatabind_65": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_65/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "span_end": 128,
        "name": "deserializeKey",
        "start_line": 115,
        "span_start": 128,
        "bug_name": "JacksonDatabind_65",
        "end_line": 135
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_65/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "span_end": 525,
        "name": "findFactoryMethod",
        "start_line": 519,
        "span_start": 525,
        "bug_name": "JacksonDatabind_65",
        "end_line": 537
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_65/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "span_end": 558,
        "name": "isFactoryMethod",
        "start_line": 539,
        "span_start": 558,
        "bug_name": "JacksonDatabind_65",
        "end_line": 572
      }
    ]
  },
  "JacksonDatabind_66": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_66/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "span_end": 316,
        "name": "deserializeKey",
        "start_line": 308,
        "span_start": 314,
        "bug_name": "JacksonDatabind_66",
        "end_line": 330
      }
    ]
  },
  "JacksonDatabind_68": {
    "bug_count": 9,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1194,
        "name": "deserializeFromObjectUsingNonDefault",
        "start_line": 1189,
        "span_start": 1192,
        "bug_name": "JacksonDatabind_68",
        "end_line": 1207
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1225,
        "name": "deserializeFromNumber",
        "start_line": 1213,
        "span_start": 1220,
        "bug_name": "JacksonDatabind_68",
        "end_line": 1260
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1238,
        "name": "deserializeFromNumber",
        "start_line": 1213,
        "span_start": 1235,
        "bug_name": "JacksonDatabind_68",
        "end_line": 1260
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1250,
        "name": "deserializeFromNumber",
        "start_line": 1213,
        "span_start": 1248,
        "bug_name": "JacksonDatabind_68",
        "end_line": 1260
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1273,
        "name": "deserializeFromString",
        "start_line": 1262,
        "span_start": 1270,
        "bug_name": "JacksonDatabind_68",
        "end_line": 1283
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to deserialize POJO value from a JSON floating-point\n * number.\n */\n",
        "file": "JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1295,
        "name": "deserializeFromDouble",
        "start_line": 1289,
        "span_start": 1292,
        "bug_name": "JacksonDatabind_68",
        "end_line": 1316
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to deserialize POJO value from a JSON floating-point\n * number.\n */\n",
        "file": "JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1307,
        "name": "deserializeFromDouble",
        "start_line": 1289,
        "span_start": 1305,
        "bug_name": "JacksonDatabind_68",
        "end_line": 1316
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to deserialize POJO value from a JSON boolean value (true, false)\n */\n",
        "file": "JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1322,
        "name": "deserializeFromBoolean",
        "start_line": 1321,
        "span_start": 1319,
        "bug_name": "JacksonDatabind_68",
        "end_line": 1336
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to deserialize POJO value from a JSON boolean value (true, false)\n */\n",
        "file": "JacksonDatabind_68/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "span_end": 1359,
        "name": "deserializeFromBoolean",
        "start_line": 1321,
        "span_start": 1336,
        "bug_name": "JacksonDatabind_68",
        "end_line": 1371
      }
    ]
  },
  "JacksonDatabind_69": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 176,
        "name": "addDelegatingCreator",
        "start_line": 161,
        "span_start": 165,
        "bug_name": "JacksonDatabind_69",
        "end_line": 198
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 194,
        "name": "addPropertyCreator",
        "start_line": 175,
        "span_start": 195,
        "bug_name": "JacksonDatabind_69",
        "end_line": 198
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @return True if specified Creator is to be used\n */\n",
        "file": "JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 310,
        "name": "verifyNonDup",
        "start_line": 302,
        "span_start": 310,
        "bug_name": "JacksonDatabind_69",
        "end_line": 345
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @return True if specified Creator is to be used\n */\n",
        "file": "JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 332,
        "name": "verifyNonDup",
        "start_line": 302,
        "span_start": 332,
        "bug_name": "JacksonDatabind_69",
        "end_line": 345
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @return True if specified Creator is to be used\n */\n",
        "file": "JacksonDatabind_69/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
        "span_end": 340,
        "name": "verifyNonDup",
        "start_line": 302,
        "span_start": 341,
        "bug_name": "JacksonDatabind_69",
        "end_line": 345
      }
    ]
  },
  "JacksonDatabind_72": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_72/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java",
        "span_end": 167,
        "name": "writeReplace",
        "start_line": 162,
        "span_start": 167,
        "bug_name": "JacksonDatabind_72",
        "end_line": 168
      }
    ]
  },
  "JacksonDatabind_73": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method called to further get rid of unwanted individual accessors,\n * based on read/write settings and rules for \"pulling in\" accessors\n * (or not).\n */\n",
        "file": "JacksonDatabind_73/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
        "span_end": 731,
        "name": "_removeUnwantedAccessor",
        "start_line": 724,
        "span_start": 731,
        "bug_name": "JacksonDatabind_73",
        "end_line": 737
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param inferMutators Whether mutators can be \"pulled in\" by visible\n *    accessors or not.\n */\n",
        "file": "JacksonDatabind_73/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "span_end": 644,
        "name": "removeNonVisible",
        "start_line": 644,
        "span_start": 644,
        "bug_name": "JacksonDatabind_73",
        "end_line": 684
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param inferMutators Whether mutators can be \"pulled in\" by visible\n *    accessors or not.\n */\n",
        "file": "JacksonDatabind_73/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
        "span_end": 682,
        "name": "removeNonVisible",
        "start_line": 644,
        "span_start": 683,
        "bug_name": "JacksonDatabind_73",
        "end_line": 684
      }
    ]
  },
  "JacksonDatabind_75": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Factory method used by {@link com.fasterxml.jackson.databind.ser.BasicSerializerFactory}\n * for constructing serializer instance of Enum types.\n *\n * @since 2.1\n */\n",
        "file": "JacksonDatabind_75/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
        "span_end": 86,
        "name": "construct",
        "start_line": 77,
        "span_start": 86,
        "bug_name": "JacksonDatabind_75",
        "end_line": 88
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * To support some level of per-property configuration, we will need\n * to make things contextual. We are limited to \"textual vs index\"\n * choice here, however.\n */\n",
        "file": "JacksonDatabind_75/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
        "span_end": 104,
        "name": "createContextual",
        "start_line": 95,
        "span_start": 104,
        "bug_name": "JacksonDatabind_75",
        "end_line": 111
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method called to check whether serialization should be done using\n * index (number) or not.\n */\n",
        "file": "JacksonDatabind_75/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java",
        "span_end": 225,
        "name": "_isShapeWrittenUsingIndex",
        "start_line": 216,
        "span_start": 217,
        "bug_name": "JacksonDatabind_75",
        "end_line": 240
      }
    ]
  },
  "JacksonDatabind_77": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method that {@link DeserializerCache}s call to create a new\n * deserializer for types other than Collections, Maps, arrays and\n * enums.\n */\n",
        "file": "JacksonDatabind_77/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 142,
        "name": "createBeanDeserializer",
        "start_line": 96,
        "span_start": 143,
        "bug_name": "JacksonDatabind_77",
        "end_line": 146
      }
    ]
  },
  "JacksonDatabind_78": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method that {@link DeserializerCache}s call to create a new\n * deserializer for types other than Collections, Maps, arrays and\n * enums.\n */\n",
        "file": "JacksonDatabind_78/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 155,
        "name": "createBeanDeserializer",
        "start_line": 124,
        "span_start": 156,
        "bug_name": "JacksonDatabind_78",
        "end_line": 173
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Helper method that will check whether given raw type is marked as always ignorable\n * (for purpose of ignoring properties with type)\n */\n",
        "file": "JacksonDatabind_78/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 878,
        "name": "isIgnorableType",
        "start_line": 866,
        "span_start": 878,
        "bug_name": "JacksonDatabind_78",
        "end_line": 888
      }
    ]
  },
  "JacksonDatabind_79": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_79/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 582,
        "name": "findObjectReferenceInfo",
        "start_line": 576,
        "span_start": 579,
        "bug_name": "JacksonDatabind_79",
        "end_line": 586
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_79/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
        "span_end": 434,
        "name": "createContextual",
        "start_line": 383,
        "span_start": 432,
        "bug_name": "JacksonDatabind_79",
        "end_line": 517
      }
    ]
  },
  "JacksonDatabind_80": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_80/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "span_end": 78,
        "name": "collectAndResolveSubtypesByClass",
        "start_line": 57,
        "span_start": 79,
        "bug_name": "JacksonDatabind_80",
        "end_line": 97
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_80/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "span_end": 85,
        "name": "collectAndResolveSubtypesByClass",
        "start_line": 57,
        "span_start": 86,
        "bug_name": "JacksonDatabind_80",
        "end_line": 97
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_80/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
        "span_end": 150,
        "name": "collectAndResolveSubtypesByTypeId",
        "start_line": 129,
        "span_start": 145,
        "bug_name": "JacksonDatabind_80",
        "end_line": 168
      }
    ]
  },
  "JacksonDatabind_81": {
    "bug_count": 6,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 764,
        "name": "refineSerializationType",
        "start_line": 738,
        "span_start": 764,
        "bug_name": "JacksonDatabind_81",
        "end_line": 854
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 797,
        "name": "refineSerializationType",
        "start_line": 738,
        "span_start": 797,
        "bug_name": "JacksonDatabind_81",
        "end_line": 854
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 831,
        "name": "refineSerializationType",
        "start_line": 738,
        "span_start": 831,
        "bug_name": "JacksonDatabind_81",
        "end_line": 854
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 1119,
        "name": "refineDeserializationType",
        "start_line": 1114,
        "span_start": 1119,
        "bug_name": "JacksonDatabind_81",
        "end_line": 1173
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 1135,
        "name": "refineDeserializationType",
        "start_line": 1114,
        "span_start": 1135,
        "bug_name": "JacksonDatabind_81",
        "end_line": 1173
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_81/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
        "span_end": 1151,
        "name": "refineDeserializationType",
        "start_line": 1114,
        "span_start": 1151,
        "bug_name": "JacksonDatabind_81",
        "end_line": 1173
      }
    ]
  },
  "JacksonDatabind_87": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 517,
        "name": "parseAsISO8601",
        "start_line": 434,
        "span_start": 514,
        "bug_name": "JacksonDatabind_87",
        "end_line": 554
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_87/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 536,
        "name": "parseAsISO8601",
        "start_line": 434,
        "span_start": 526,
        "bug_name": "JacksonDatabind_87",
        "end_line": 554
      }
    ]
  },
  "JacksonDatabind_90": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Method that will return true if any of <code>canCreateXxx</code> method\n * returns true: that is, if there is any way that an instance could\n * be created.\n */\n",
        "file": "JacksonDatabind_90/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
        "span_end": 72,
        "name": "canInstantiate",
        "start_line": 70,
        "span_start": 72,
        "bug_name": "JacksonDatabind_90",
        "end_line": 76
      }
    ]
  },
  "JacksonDatabind_94": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_94/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
        "span_end": 103,
        "name": "validateSubType",
        "start_line": 72,
        "span_start": 98,
        "bug_name": "JacksonDatabind_94",
        "end_line": 116
      }
    ]
  },
  "JacksonDatabind_95": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Factory method for creating a subtype of given base type, as defined\n * by specified subclass; but retaining generic type information if any.\n * Can be used, for example, to get equivalent of \"HashMap&lt;String,Integer&gt;\"\n * from \"Map&lt;String,Integer&gt;\" by giving <code>HashMap.class</code>\n * as subclass.\n */\n",
        "file": "JacksonDatabind_95/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 355,
        "name": "constructSpecializedType",
        "start_line": 342,
        "span_start": 355,
        "bug_name": "JacksonDatabind_95",
        "end_line": 412
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Factory method for creating a subtype of given base type, as defined\n * by specified subclass; but retaining generic type information if any.\n * Can be used, for example, to get equivalent of \"HashMap&lt;String,Integer&gt;\"\n * from \"Map&lt;String,Integer&gt;\" by giving <code>HashMap.class</code>\n * as subclass.\n */\n",
        "file": "JacksonDatabind_95/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 366,
        "name": "constructSpecializedType",
        "start_line": 342,
        "span_start": 366,
        "bug_name": "JacksonDatabind_95",
        "end_line": 412
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *  Factory method for constructing {@link JavaType} that\n *  represents a parameterized type. For example, to represent\n *  type <code>List&lt;Set&lt;Integer>></code>, you could\n *  call\n * <pre>\n *   JavaType inner = TypeFactory.constructParametrizedType(Set.class, Set.class, Integer.class);\n *   return TypeFactory.constructParametrizedType(ArrayList.class, List.class, inner);\n * </pre>\n * <p>\n *  The reason for first two arguments to be separate is that parameterization may\n *  apply to a super-type. For example, if generic type was instead to be\n *  constructed for <code>ArrayList&lt;Integer></code>, the usual call would be:\n * <pre>\n *   TypeFactory.constructParametrizedType(ArrayList.class, List.class, Integer.class);\n * </pre>\n *  since parameterization is applied to {@link java.util.List}.\n *  In most cases distinction does not matter, but there are types where it does;\n *  one such example is parameterization of types that implement {@link java.util.Iterator}.\n * <p>\n *  NOTE: type modifiers are NOT called on constructed type.\n *\n *  @param parametrized Actual full type\n *  @param parameterClasses Type parameters to apply\n *\n *  @since 2.5 NOTE: was briefly deprecated for 2.6\n */\n",
        "file": "JacksonDatabind_95/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
        "span_end": 896,
        "name": "constructParametricType",
        "start_line": 892,
        "span_start": 896,
        "bug_name": "JacksonDatabind_95",
        "end_line": 899
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_95/src/main/java/com/fasterxml/jackson/databind/type/TypeParser.java",
        "span_end": 59,
        "name": "parseType",
        "start_line": 40,
        "span_start": 59,
        "bug_name": "JacksonDatabind_95",
        "end_line": 60
      }
    ]
  },
  "JacksonDatabind_103": {
    "bug_count": 23,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "span_end": 505,
        "name": "_wrapAsIOE",
        "start_line": 501,
        "span_start": 505,
        "bug_name": "JacksonDatabind_103",
        "end_line": 510
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param contentTypeSer Optional explicit type information serializer\n *    to use for contained values (only used for properties that are\n *    of container type)\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
        "span_end": 105,
        "name": "buildWriter",
        "start_line": 91,
        "span_start": 103,
        "bug_name": "JacksonDatabind_103",
        "end_line": 244
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method for constructing a bean deserializer that uses specified\n * intermediate Builder for binding data, and construction of the\n * value instance.\n * Note that implementation is mostly copied from the regular\n * BeanDeserializer build method.\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 281,
        "name": "buildBuilderBasedDeserializer",
        "start_line": 265,
        "span_start": 281,
        "bug_name": "JacksonDatabind_103",
        "end_line": 323
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method that handles actual construction (via factory) and caching (both\n * intermediate and eventual)\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
        "span_end": 268,
        "name": "_createAndCache2",
        "start_line": 258,
        "span_start": 268,
        "bug_name": "JacksonDatabind_103",
        "end_line": 300
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param e Exception to re-throw or wrap\n * @param propName Name of property (from Json input) to set\n * @param value Value of the property\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java",
        "span_end": 202,
        "name": "_throwAsIOE",
        "start_line": 194,
        "span_start": 202,
        "bug_name": "JacksonDatabind_103",
        "end_line": 215
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param e Exception to re-throw or wrap\n * @param propName Name of property (from Json input) to set\n * @param value Value of the property\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java",
        "span_end": 214,
        "name": "_throwAsIOE",
        "start_line": 194,
        "span_start": 214,
        "bug_name": "JacksonDatabind_103",
        "end_line": 215
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method that takes in exception of any type, and casts or wraps it\n * to an IOException or its subclass.\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "span_end": 590,
        "name": "_throwAsIOE",
        "start_line": 580,
        "span_start": 590,
        "bug_name": "JacksonDatabind_103",
        "end_line": 600
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @since 2.7\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
        "span_end": 611,
        "name": "_throwAsIOE",
        "start_line": 605,
        "span_start": 611,
        "bug_name": "JacksonDatabind_103",
        "end_line": 612
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @since 2.8\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
        "span_end": 526,
        "name": "_parseDate",
        "start_line": 514,
        "span_start": 526,
        "bug_name": "JacksonDatabind_103",
        "end_line": 528
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "span_end": 135,
        "name": "deserializeKey",
        "start_line": 120,
        "span_start": 135,
        "bug_name": "JacksonDatabind_103",
        "end_line": 141
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
        "span_end": 262,
        "name": "_weirdKey",
        "start_line": 260,
        "span_start": 262,
        "bug_name": "JacksonDatabind_103",
        "end_line": 263
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @deprecated Since 2.7 call either {@link #unwrapAndWrapException} or\n *  {@link #wrapAsJsonMappingException}\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
        "span_end": 456,
        "name": "wrapException",
        "start_line": 445,
        "span_start": 456,
        "bug_name": "JacksonDatabind_103",
        "end_line": 457
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Lookup method called when code needs to resolve class name from input;\n * usually simple lookup\n *\n * @since 2.9\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java",
        "span_end": 195,
        "name": "resolveSubType",
        "start_line": 170,
        "span_start": 195,
        "bug_name": "JacksonDatabind_103",
        "end_line": 202
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *  Convenience method for parsing a Date from given String, using\n *  currently configured date format (accessed using\n *  {@link DeserializationConfig#getDateFormat()}).\n * <p>\n *  Implementation will handle thread-safety issues related to\n *  date formats such that first time this method is called,\n *  date format is cloned, and cloned instance will be retained\n *  for use during this deserialization round.\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
        "span_end": 714,
        "name": "parseDate",
        "start_line": 706,
        "span_start": 714,
        "bug_name": "JacksonDatabind_103",
        "end_line": 716
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *  Helper method for constructing instantiation exception for specified type,\n *  to indicate problem with physically constructing instance of\n *  specified class (missing constructor, exception from constructor)\n * <p>\n *  Note that most of the time this method should NOT be called directly; instead,\n *  {@link #handleInstantiationProblem} should be called which will call this method\n *  if necessary.\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
        "span_end": 1603,
        "name": "instantiationException",
        "start_line": 1597,
        "span_start": 1603,
        "bug_name": "JacksonDatabind_103",
        "end_line": 1611
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *  Factory method used when \"upgrading\" an {@link IOException} into\n *  {@link JsonMappingException}: usually only needed to comply with\n *  a signature.\n * <p>\n *  NOTE: since 2.9 should usually NOT be used on input-side (deserialization)\n *     exceptions; instead use method(s) of <code>InputMismatchException</code>\n *\n *  @since 2.1\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
        "span_end": 339,
        "name": "fromUnexpectedIOE",
        "start_line": 336,
        "span_start": 339,
        "bug_name": "JacksonDatabind_103",
        "end_line": 341
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method that can be called to either create a new JsonMappingException\n * (if underlying exception is not a JsonMappingException), or augment\n * given exception with given path/reference information.\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
        "span_end": 380,
        "name": "wrapWithPath",
        "start_line": 373,
        "span_start": 380,
        "bug_name": "JacksonDatabind_103",
        "end_line": 398
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method that will try to construct a value serializer; and if\n * one is successfully created, cache it for reuse.\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "span_end": 1341,
        "name": "_createAndCacheUntypedSerializer",
        "start_line": 1330,
        "span_start": 1341,
        "bug_name": "JacksonDatabind_103",
        "end_line": 1349
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "span_end": 1361,
        "name": "_createAndCacheUntypedSerializer",
        "start_line": 1351,
        "span_start": 1361,
        "bug_name": "JacksonDatabind_103",
        "end_line": 1369
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "span_end": 1589,
        "name": "findTypeDeserializer",
        "start_line": 1554,
        "span_start": 1589,
        "bug_name": "JacksonDatabind_103",
        "end_line": 1593
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Method that is to actually build a bean deserializer instance.\n * All basic sanity checks have been done to know that what we have\n * may be a valid bean type, and that there are no default simple\n * deserializers.\n */\n",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "span_end": 222,
        "name": "buildBeanDeserializer",
        "start_line": 201,
        "span_start": 222,
        "bug_name": "JacksonDatabind_103",
        "end_line": 256
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
        "span_end": 364,
        "name": "instantiateBean",
        "start_line": 344,
        "span_start": 364,
        "bug_name": "JacksonDatabind_103",
        "end_line": 366
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_103/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "span_end": 171,
        "name": "includeFilterSuppressNulls",
        "start_line": 158,
        "span_start": 171,
        "bug_name": "JacksonDatabind_103",
        "end_line": 175
      }
    ]
  },
  "JacksonDatabind_104": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_104/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 446,
        "name": "_format",
        "start_line": 432,
        "span_start": 441,
        "bug_name": "JacksonDatabind_104",
        "end_line": 488
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_104/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 487,
        "name": "_format",
        "start_line": 432,
        "span_start": 483,
        "bug_name": "JacksonDatabind_104",
        "end_line": 488
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_104/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
        "span_end": 516,
        "name": "pad3",
        "start_line": 516,
        "span_start": 516,
        "bug_name": "JacksonDatabind_104",
        "end_line": 525
      }
    ]
  },
  "JacksonDatabind_105": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_105/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
        "span_end": 47,
        "name": "find",
        "start_line": 29,
        "span_start": 48,
        "bug_name": "JacksonDatabind_105",
        "end_line": 54
      }
    ]
  },
  "JacksonDatabind_108": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n *  Convenience method that binds content read using given parser, using\n *  configuration of this reader, except that content is bound as\n *  JSON tree instead of configured root value type.\n *  Returns {@link JsonNode} that represents the root of the resulting tree, if there\n *  was content to read, or {@code null} if no more content is accessible\n *  via passed {@link JsonParser}.\n * <p>\n *  NOTE! Behavior with end-of-input (no more content) differs between this\n *  {@code readTree} method, and all other methods that take input source: latter\n *  will return \"missing node\", NOT {@code null}\n * <p>\n *  Note: if an object was specified with {@link #withValueToUpdate}, it\n *  will be ignored.\n * <p>\n *  NOTE: this method never tries to auto-detect format, since actual\n *  (data-format specific) parser is given.\n */\n",
        "file": "JacksonDatabind_108/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
        "span_end": 1169,
        "name": "readTree",
        "start_line": 1166,
        "span_start": 1169,
        "bug_name": "JacksonDatabind_108",
        "end_line": 1170
      }
    ]
  },
  "JacksonDatabind_109": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_109/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "span_end": 57,
        "name": "createContextual",
        "start_line": 50,
        "span_start": 58,
        "bug_name": "JacksonDatabind_109",
        "end_line": 67
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @since 2.10\n */\n",
        "file": "JacksonDatabind_109/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
        "span_end": 120,
        "name": "bigDecimalAsStringSerializer",
        "start_line": 117,
        "span_start": 113,
        "bug_name": "JacksonDatabind_109",
        "end_line": 119
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_109/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
        "span_end": 99,
        "name": "createContextual",
        "start_line": 93,
        "span_start": 100,
        "bug_name": "JacksonDatabind_109",
        "end_line": 109
      }
    ]
  },
  "JacksonDatabind_110": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_110/src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
        "span_end": 78,
        "name": "findForCollection",
        "start_line": 66,
        "span_start": 78,
        "bug_name": "JacksonDatabind_110",
        "end_line": 88
      }
    ]
  },
  "JacksonDatabind_111": {
    "bug_count": 9,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java",
        "span_end": 135,
        "name": "withValueDeserializer",
        "start_line": 129,
        "span_start": 135,
        "bug_name": "JacksonDatabind_111",
        "end_line": 137
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
        "span_end": 93,
        "name": "withValueDeserializer",
        "start_line": 87,
        "span_start": 93,
        "bug_name": "JacksonDatabind_111",
        "end_line": 95
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
        "span_end": 217,
        "name": "readResolve",
        "start_line": 215,
        "span_start": 217,
        "bug_name": "JacksonDatabind_111",
        "end_line": 217
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
        "span_end": 84,
        "name": "withValueDeserializer",
        "start_line": 78,
        "span_start": 84,
        "bug_name": "JacksonDatabind_111",
        "end_line": 86
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java",
        "span_end": 54,
        "name": "withValueDeserializer",
        "start_line": 48,
        "span_start": 54,
        "bug_name": "JacksonDatabind_111",
        "end_line": 56
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
        "span_end": 55,
        "name": "withValueDeserializer",
        "start_line": 49,
        "span_start": 55,
        "bug_name": "JacksonDatabind_111",
        "end_line": 57
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java",
        "span_end": 68,
        "name": "withValueDeserializer",
        "start_line": 62,
        "span_start": 68,
        "bug_name": "JacksonDatabind_111",
        "end_line": 70
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java",
        "span_end": 156,
        "name": "setAndReturn",
        "start_line": 151,
        "span_start": 156,
        "bug_name": "JacksonDatabind_111",
        "end_line": 156
      },
      {
        "member_type": "method",
        "file": "JacksonDatabind_111/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java",
        "span_end": 43,
        "name": "getNullValue",
        "start_line": 41,
        "span_start": 43,
        "bug_name": "JacksonDatabind_111",
        "end_line": 44
      }
    ]
  },
  "JacksonXml_1": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonXml_1/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
        "span_end": 513,
        "name": "nextToken",
        "start_line": 444,
        "span_start": 512,
        "bug_name": "JacksonXml_1",
        "end_line": 582
      },
      {
        "member_type": "method",
        "file": "JacksonXml_1/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
        "span_end": 553,
        "name": "nextToken",
        "start_line": 444,
        "span_start": 550,
        "bug_name": "JacksonXml_1",
        "end_line": 582
      }
    ]
  },
  "JacksonXml_2": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonXml_2/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java",
        "span_end": 332,
        "name": "_next",
        "start_line": 310,
        "span_start": 324,
        "bug_name": "JacksonXml_2",
        "end_line": 370
      },
      {
        "member_type": "method",
        "file": "JacksonXml_2/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java",
        "span_end": 339,
        "name": "_next",
        "start_line": 310,
        "span_start": 340,
        "bug_name": "JacksonXml_2",
        "end_line": 370
      },
      {
        "member_type": "method",
        "file": "JacksonXml_2/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java",
        "span_end": 505,
        "name": "_handleEndElement",
        "start_line": 490,
        "span_start": 506,
        "bug_name": "JacksonXml_2",
        "end_line": 506
      }
    ]
  },
  "JacksonXml_6": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JacksonXml_6/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
        "span_end": 850,
        "name": "writeBinary",
        "start_line": 843,
        "span_start": 843,
        "bug_name": "JacksonXml_6",
        "end_line": 879
      },
      {
        "member_type": "method",
        "file": "JacksonXml_6/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
        "span_end": 866,
        "name": "writeBinary",
        "start_line": 843,
        "span_start": 866,
        "bug_name": "JacksonXml_6",
        "end_line": 879
      }
    ]
  },
  "Jsoup_3": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_3/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 379,
        "name": "setAncestor",
        "start_line": 376,
        "span_start": 379,
        "bug_name": "Jsoup_3",
        "end_line": 386
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n * @param html HTML to add inside this element, after the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
        "file": "Jsoup_3/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 270,
        "name": "append",
        "start_line": 267,
        "span_start": 270,
        "bug_name": "Jsoup_3",
        "end_line": 276
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n * @param html HTML to add inside this element, before the existing HTML\n * @return this element\n * @see #html(String)\n */\n",
        "file": "Jsoup_3/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 287,
        "name": "prepend",
        "start_line": 284,
        "span_start": 287,
        "bug_name": "Jsoup_3",
        "end_line": 295
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *     Wrap the supplied HTML around this element.\n *     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n *     @return this element, for chaining.\n */\n",
        "file": "Jsoup_3/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 314,
        "name": "wrap",
        "start_line": 311,
        "span_start": 314,
        "bug_name": "Jsoup_3",
        "end_line": 333
      },
      {
        "member_type": "method",
        "file": "Jsoup_3/src/main/java/org/jsoup/parser/Parser.java",
        "span_end": 258,
        "name": "addChildToParent",
        "start_line": 225,
        "span_start": 253,
        "bug_name": "Jsoup_3",
        "end_line": 271
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *     Test if this tag, the prospective parent, can accept the proposed child.\n *     @param child potential child tag.\n *     @return true if this can contain child.\n */\n",
        "file": "Jsoup_3/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 98,
        "name": "canContain",
        "start_line": 68,
        "span_start": 99,
        "bug_name": "Jsoup_3",
        "end_line": 104
      },
      {
        "member_type": "method",
        "file": "Jsoup_3/src/main/java/org/jsoup/parser/Tag.java",
        "span_end": 157,
        "name": "getImplicitParent",
        "start_line": 154,
        "span_start": 155,
        "bug_name": "Jsoup_3",
        "end_line": 156
      }
    ]
  },
  "Jsoup_4": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_4/src/main/java/org/jsoup/nodes/Entities.java",
        "span_end": 64,
        "name": "unescape",
        "start_line": 47,
        "span_start": 64,
        "bug_name": "Jsoup_4",
        "end_line": 78
      }
    ]
  },
  "Jsoup_7": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n *     Normalise the document. This happens after the parse phase so generally does not need to be called.\n *     Moves any text content that is not in the body element into the body.\n *     @return this document after normalisation\n */\n",
        "file": "Jsoup_7/src/main/java/org/jsoup/nodes/Document.java",
        "span_end": 112,
        "name": "normalise",
        "start_line": 99,
        "span_start": 113,
        "bug_name": "Jsoup_7",
        "end_line": 118
      },
      {
        "member_type": "method",
        "file": "Jsoup_7/src/main/java/org/jsoup/nodes/Document.java",
        "span_end": 137,
        "name": "normaliseTextNodes",
        "start_line": 121,
        "span_start": 137,
        "bug_name": "Jsoup_7",
        "end_line": 137
      }
    ]
  },
  "Jsoup_11": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_11/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 109,
        "name": "select",
        "start_line": 104,
        "span_start": 110,
        "bug_name": "Jsoup_11",
        "end_line": 135
      },
      {
        "member_type": "method",
        "file": "Jsoup_11/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 180,
        "name": "findElements",
        "start_line": 156,
        "span_start": 181,
        "bug_name": "Jsoup_11",
        "end_line": 188
      },
      {
        "member_type": "method",
        "file": "Jsoup_11/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 305,
        "name": "matches",
        "start_line": 300,
        "span_start": 305,
        "bug_name": "Jsoup_11",
        "end_line": 306
      },
      {
        "member_type": "method",
        "file": "Jsoup_11/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 398,
        "name": "filterForSelf",
        "start_line": 395,
        "span_start": 399,
        "bug_name": "Jsoup_11",
        "end_line": 406
      }
    ]
  },
  "Jsoup_12": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_12/src/main/java/org/jsoup/select/Selector.java",
        "span_end": 139,
        "name": "combinator",
        "start_line": 137,
        "span_start": 139,
        "bug_name": "Jsoup_12",
        "end_line": 154
      }
    ]
  },
  "Jsoup_14": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_14/src/main/java/org/jsoup/parser/TokeniserState.java",
        "span_end": 219,
        "name": "read",
        "start_line": 214,
        "span_start": 218,
        "bug_name": "Jsoup_14",
        "end_line": 229
      }
    ]
  },
  "Jsoup_16": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Create a new doctype element.\n * @param name the doctype's name\n * @param publicId the doctype's public ID\n * @param systemId the doctype's system ID\n * @param baseUri the doctype's base URI\n */\n",
        "file": "Jsoup_16/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 20,
        "name": "DocumentType",
        "start_line": 19,
        "span_start": 21,
        "bug_name": "Jsoup_16",
        "end_line": 26
      },
      {
        "member_type": "method",
        "file": "Jsoup_16/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 37,
        "name": "outerHtmlHead",
        "start_line": 33,
        "span_start": 33,
        "bug_name": "Jsoup_16",
        "end_line": 41
      }
    ]
  },
  "Jsoup_18": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "file": "Jsoup_18/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 17,
        "name": "CharacterReader",
        "start_line": 16,
        "span_start": 18,
        "bug_name": "Jsoup_18",
        "end_line": 22
      },
      {
        "member_type": "method",
        "file": "Jsoup_18/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 99,
        "name": "consumeToEnd",
        "start_line": 99,
        "span_start": 99,
        "bug_name": "Jsoup_18",
        "end_line": 103
      }
    ]
  },
  "Jsoup_21": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Parse the query\n * @return Evaluator\n */\n",
        "file": "Jsoup_21/src/main/java/org/jsoup/select/QueryParser.java",
        "span_end": 66,
        "name": "parse",
        "start_line": 44,
        "span_start": 58,
        "bug_name": "Jsoup_21",
        "end_line": 71
      },
      {
        "member_type": "method",
        "file": "Jsoup_21/src/main/java/org/jsoup/select/QueryParser.java",
        "span_end": 100,
        "name": "combinator",
        "start_line": 73,
        "span_start": 101,
        "bug_name": "Jsoup_21",
        "end_line": 107
      }
    ]
  },
  "Jsoup_22": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling\n * of itself, so will not be included in the returned list.\n * @return sibling elements\n */\n",
        "file": "Jsoup_22/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 435,
        "name": "siblingElements",
        "start_line": 433,
        "span_start": 434,
        "bug_name": "Jsoup_22",
        "end_line": 443
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s,\n * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n * <p/>\n * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n * @return the next element, or null if there is no next element\n * @see #previousElementSibling()\n */\n",
        "file": "Jsoup_22/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 461,
        "name": "nextElementSibling",
        "start_line": 453,
        "span_start": 462,
        "bug_name": "Jsoup_22",
        "end_line": 462
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *     Retrieves this node's sibling nodes. Similar to {@link #childNodes()  node.parent.childNodes()}, but does not\n *     include this node (a node is not a sibling of itself).\n *     @return node siblings. If the node has no parent, returns an empty list.\n */\n",
        "file": "Jsoup_22/src/main/java/org/jsoup/nodes/Node.java",
        "span_end": 445,
        "name": "siblingNodes",
        "start_line": 443,
        "span_start": 444,
        "bug_name": "Jsoup_22",
        "end_line": 453
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *     Get this node's next sibling.\n *     @return next sibling, or null if this is the last sibling\n */\n",
        "file": "Jsoup_22/src/main/java/org/jsoup/nodes/Node.java",
        "span_end": 469,
        "name": "nextSibling",
        "start_line": 459,
        "span_start": 470,
        "bug_name": "Jsoup_22",
        "end_line": 470
      }
    ]
  },
  "Jsoup_23": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_23/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 118,
        "name": "consumeLetterThenDigitSequence",
        "start_line": 118,
        "span_start": 118,
        "bug_name": "Jsoup_23",
        "end_line": 136
      },
      {
        "member_type": "method",
        "file": "Jsoup_23/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 135,
        "name": "consumeCharacterReference",
        "start_line": 100,
        "span_start": 135,
        "bug_name": "Jsoup_23",
        "end_line": 162
      }
    ]
  },
  "Jsoup_28": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Unescape the input string.\n * @param string\n * @param strict if \"strict\" (that is, requires trailing ';' char, otherwise that's optional)\n * @return\n */\n",
        "file": "Jsoup_28/src/main/java/org/jsoup/nodes/Entities.java",
        "span_end": 129,
        "name": "unescape",
        "start_line": 106,
        "span_start": 103,
        "bug_name": "Jsoup_28",
        "end_line": 108
      },
      {
        "member_type": "method",
        "file": "Jsoup_28/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 152,
        "name": "consumeCharacterReference",
        "start_line": 100,
        "span_start": 136,
        "bug_name": "Jsoup_28",
        "end_line": 155
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Utility method to consume reader and unescape entities found within.\n * @param inAttribute\n * @return unescaped string from reader\n */\n",
        "file": "Jsoup_28/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 238,
        "name": "unescapeEntities",
        "start_line": 229,
        "span_start": 238,
        "bug_name": "Jsoup_28",
        "end_line": 243
      }
    ]
  },
  "Jsoup_29": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n *     Get the string contents of the document's {@code title} element.\n *     @return Trimmed title, or empty string if none set.\n */\n",
        "file": "Jsoup_29/src/main/java/org/jsoup/nodes/Document.java",
        "span_end": 69,
        "name": "title",
        "start_line": 67,
        "span_start": 69,
        "bug_name": "Jsoup_29",
        "end_line": 71
      }
    ]
  },
  "Jsoup_30": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_30/src/main/java/org/jsoup/safety/Cleaner.java",
        "span_end": 98,
        "name": "head",
        "start_line": 82,
        "span_start": 85,
        "bug_name": "Jsoup_30",
        "end_line": 103
      }
    ]
  },
  "Jsoup_31": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_31/src/main/java/org/jsoup/parser/TokeniserState.java",
        "span_end": 1093,
        "name": "read",
        "start_line": 1089,
        "span_start": 1094,
        "bug_name": "Jsoup_31",
        "end_line": 1099
      },
      {
        "member_type": "method",
        "file": "Jsoup_31/src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "span_end": 66,
        "name": "insert",
        "start_line": 64,
        "span_start": 67,
        "bug_name": "Jsoup_31",
        "end_line": 75
      }
    ]
  },
  "Jsoup_36": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_36/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 91,
        "name": "parseByteData",
        "start_line": 75,
        "span_start": 87,
        "bug_name": "Jsoup_36",
        "end_line": 124
      }
    ]
  },
  "Jsoup_42": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n * list will not be reflected in the DOM.\n * @return a list of key vals\n */\n",
        "file": "Jsoup_42/src/main/java/org/jsoup/nodes/FormElement.java",
        "span_end": 79,
        "name": "formData",
        "start_line": 74,
        "span_start": 80,
        "bug_name": "Jsoup_42",
        "end_line": 108
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n * list will not be reflected in the DOM.\n * @return a list of key vals\n */\n",
        "file": "Jsoup_42/src/main/java/org/jsoup/nodes/FormElement.java",
        "span_end": 99,
        "name": "formData",
        "start_line": 74,
        "span_start": 99,
        "bug_name": "Jsoup_42",
        "end_line": 108
      }
    ]
  },
  "Jsoup_50": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_50/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 92,
        "name": "parseByteData",
        "start_line": 88,
        "span_start": 93,
        "bug_name": "Jsoup_50",
        "end_line": 145
      },
      {
        "member_type": "method",
        "file": "Jsoup_50/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 132,
        "name": "parseByteData",
        "start_line": 88,
        "span_start": 126,
        "bug_name": "Jsoup_50",
        "end_line": 145
      }
    ]
  },
  "Jsoup_52": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_52/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 118,
        "name": "parseByteData",
        "start_line": 94,
        "span_start": 112,
        "bug_name": "Jsoup_52",
        "end_line": 140
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *     Get the unencoded XML declaration.\n *     @return XML declaration\n */\n",
        "file": "Jsoup_52/src/main/java/org/jsoup/nodes/XmlDeclaration.java",
        "span_end": 68,
        "name": "getWholeDeclaration",
        "start_line": 45,
        "span_start": 46,
        "bug_name": "Jsoup_52",
        "end_line": 65
      },
      {
        "member_type": "method",
        "file": "Jsoup_52/src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "span_end": 77,
        "name": "insert",
        "start_line": 70,
        "span_start": 76,
        "bug_name": "Jsoup_52",
        "end_line": 84
      }
    ]
  },
  "Jsoup_56": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Create a new doctype element.\n * @param name the doctype's name\n * @param publicId the doctype's public ID\n * @param systemId the doctype's system ID\n * @param baseUri the doctype's base URI\n */\n",
        "file": "Jsoup_56/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 28,
        "name": "DocumentType",
        "start_line": 27,
        "span_start": 29,
        "bug_name": "Jsoup_56",
        "end_line": 36
      },
      {
        "member_type": "method",
        "file": "Jsoup_56/src/main/java/org/jsoup/nodes/DocumentType.java",
        "span_end": 57,
        "name": "nodeName",
        "start_line": 56,
        "span_start": 56,
        "bug_name": "Jsoup_56",
        "end_line": 59
      },
      {
        "member_type": "method",
        "file": "Jsoup_56/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 23,
        "name": "process",
        "start_line": 13,
        "span_start": 23,
        "bug_name": "Jsoup_56",
        "end_line": 34
      },
      {
        "member_type": "method",
        "file": "Jsoup_56/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 45,
        "name": "reset",
        "start_line": 44,
        "span_start": 46,
        "bug_name": "Jsoup_56",
        "end_line": 52
      },
      {
        "member_type": "method",
        "file": "Jsoup_56/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 55,
        "name": "getName",
        "start_line": 54,
        "span_start": 56,
        "bug_name": "Jsoup_56",
        "end_line": 56
      },
      {
        "member_type": "method",
        "file": "Jsoup_56/src/main/java/org/jsoup/parser/TokeniserState.java",
        "span_end": 1196,
        "name": "read",
        "start_line": 1181,
        "span_start": 1195,
        "bug_name": "Jsoup_56",
        "end_line": 1206
      },
      {
        "member_type": "method",
        "file": "Jsoup_56/src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "span_end": 100,
        "name": "insert",
        "start_line": 99,
        "span_start": 100,
        "bug_name": "Jsoup_56",
        "end_line": 102
      }
    ]
  },
  "Jsoup_58": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n *     Test if the input body HTML has only tags and attributes allowed by the Whitelist. Useful for form validation.\n *     <p>The input HTML should still be run through the cleaner to set up enforced attributes, and to tidy the output.\n *     <p>Assumes the HTML is a body fragment (i.e. will be used in an existing HTML document body.)\n *     @param bodyHtml HTML to test\n *     @param whitelist whitelist to test against\n *     @return true if no tags or attributes were removed; false otherwise\n *     @see #clean(String, org.jsoup.safety.Whitelist)\n */\n",
        "file": "Jsoup_58/src/main/java/org/jsoup/Jsoup.java",
        "span_end": 250,
        "name": "isValid",
        "start_line": 249,
        "span_start": 250,
        "bug_name": "Jsoup_58",
        "end_line": 251
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *     Determines if the input document <b>body</b>is valid, against the whitelist. It is considered valid if all the tags and attributes\n *     in the input HTML are allowed by the whitelist, and that there is no content in the <code>head</code>.\n *     <p>\n *     This method can be used as a validator for user input. An invalid document will still be cleaned successfully\n *     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document\n *     to ensure enforced attributes are set correctly, and that the output is tidied.\n *     </p>\n *     @param dirtyDocument document to test\n *     @return true if no tags or attributes need to be removed; false if they do\n */\n",
        "file": "Jsoup_58/src/main/java/org/jsoup/safety/Cleaner.java",
        "span_end": 80,
        "name": "isValid",
        "start_line": 74,
        "span_start": 78,
        "bug_name": "Jsoup_58",
        "end_line": 81
      }
    ]
  },
  "Jsoup_59": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_59/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 106,
        "name": "newAttribute",
        "start_line": 100,
        "span_start": 107,
        "bug_name": "Jsoup_59",
        "end_line": 124
      },
      {
        "member_type": "method",
        "file": "Jsoup_59/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 115,
        "name": "newAttribute",
        "start_line": 100,
        "span_start": 116,
        "bug_name": "Jsoup_59",
        "end_line": 124
      }
    ]
  },
  "Jsoup_60": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\n * and leave \" four\" on the queue. Unbalanced openers and closers can quoted (with ' or \") or escaped (with \\). Those escapes will be left\n * in the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\n * contains text strings; use unescape for that.\n * @param open opener\n * @param close closer\n * @return data matched from the queue\n */\n",
        "file": "Jsoup_60/src/main/java/org/jsoup/parser/TokenQueue.java",
        "span_end": 288,
        "name": "chompBalanced",
        "start_line": 260,
        "span_start": 289,
        "bug_name": "Jsoup_60",
        "end_line": 293
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Parse a CSS query into an Evaluator.\n * @param query CSS query\n * @return Evaluator\n */\n",
        "file": "Jsoup_60/src/main/java/org/jsoup/select/QueryParser.java",
        "span_end": 39,
        "name": "parse",
        "start_line": 37,
        "span_start": 38,
        "bug_name": "Jsoup_60",
        "end_line": 44
      }
    ]
  },
  "Jsoup_63": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_63/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 232,
        "name": "insertEmpty",
        "start_line": 221,
        "span_start": 227,
        "bug_name": "Jsoup_63",
        "end_line": 234
      },
      {
        "member_type": "method",
        "file": "Jsoup_63/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 47,
        "name": "read",
        "start_line": 42,
        "span_start": 44,
        "bug_name": "Jsoup_63",
        "end_line": 60
      },
      {
        "member_type": "method",
        "file": "Jsoup_63/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 77,
        "name": "emit",
        "start_line": 62,
        "span_start": 76,
        "bug_name": "Jsoup_63",
        "end_line": 76
      },
      {
        "member_type": "method",
        "file": "Jsoup_63/src/main/java/org/jsoup/parser/Tokeniser.java",
        "span_end": 126,
        "name": "consumeCharacterReference",
        "start_line": 119,
        "span_start": 124,
        "bug_name": "Jsoup_63",
        "end_line": 186
      }
    ]
  },
  "Jsoup_65": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_65/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 364,
        "name": "clearStackToTableBodyContext",
        "start_line": 359,
        "span_start": 360,
        "bug_name": "Jsoup_65",
        "end_line": 365
      },
      {
        "member_type": "method",
        "file": "Jsoup_65/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1036,
        "name": "process",
        "start_line": 1031,
        "span_start": 1036,
        "bug_name": "Jsoup_65",
        "end_line": 1075
      },
      {
        "member_type": "method",
        "file": "Jsoup_65/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1096,
        "name": "process",
        "start_line": 1093,
        "span_start": 1096,
        "bug_name": "Jsoup_65",
        "end_line": 1141
      }
    ]
  },
  "Jsoup_66": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_66/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 89,
        "name": "ensureChildNodes",
        "start_line": 87,
        "span_start": 89,
        "bug_name": "Jsoup_66",
        "end_line": 92
      },
      {
        "member_type": "method",
        "file": "Jsoup_66/src/main/java/org/jsoup/nodes/Element.java",
        "span_end": 1414,
        "name": "doClone",
        "start_line": 1397,
        "span_start": 1402,
        "bug_name": "Jsoup_66",
        "end_line": 1414
      }
    ]
  },
  "Jsoup_67": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_67/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 467,
        "name": "inSpecificScope",
        "start_line": 467,
        "span_start": 468,
        "bug_name": "Jsoup_67",
        "end_line": 484
      }
    ]
  },
  "Jsoup_71": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_71/src/main/java/org/jsoup/select/QueryParser.java",
        "span_end": 202,
        "name": "findElements",
        "start_line": 148,
        "span_start": 203,
        "bug_name": "Jsoup_71",
        "end_line": 208
      }
    ]
  },
  "Jsoup_73": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_73/src/main/java/org/jsoup/helper/W3CDom.java",
        "span_end": 85,
        "name": "head",
        "start_line": 77,
        "span_start": 73,
        "bug_name": "Jsoup_73",
        "end_line": 113
      },
      {
        "member_type": "method",
        "file": "Jsoup_73/src/main/java/org/jsoup/helper/W3CDom.java",
        "span_end": 115,
        "name": "tail",
        "start_line": 115,
        "span_start": 116,
        "bug_name": "Jsoup_73",
        "end_line": 120
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Finds any namespaces defined in this element. Returns any tag prefix.\n */\n",
        "file": "Jsoup_73/src/main/java/org/jsoup/helper/W3CDom.java",
        "span_end": 144,
        "name": "updateNamespaces",
        "start_line": 134,
        "span_start": 144,
        "bug_name": "Jsoup_73",
        "end_line": 154
      }
    ]
  },
  "Jsoup_74": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_74/src/main/java/org/jsoup/helper/StringUtil.java",
        "span_end": 131,
        "name": "isInvisibleChar",
        "start_line": 131,
        "span_start": 131,
        "bug_name": "Jsoup_74",
        "end_line": 134
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * After normalizing the whitespace within a string, appends it to a string builder.\n * @param accum builder to append to\n * @param string string to normalize whitespace within\n * @param stripLeading set to true if you wish to remove any leading whitespace\n */\n",
        "file": "Jsoup_74/src/main/java/org/jsoup/helper/StringUtil.java",
        "span_end": 165,
        "name": "appendNormalisedWhitespace",
        "start_line": 154,
        "span_start": 165,
        "bug_name": "Jsoup_74",
        "end_line": 174
      }
    ]
  },
  "Jsoup_78": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_78/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 152,
        "name": "parseInputStream",
        "start_line": 94,
        "span_start": 151,
        "bug_name": "Jsoup_78",
        "end_line": 162
      }
    ]
  },
  "Jsoup_81": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_81/src/main/java/org/jsoup/helper/DataUtil.java",
        "span_end": 135,
        "name": "parseInputStream",
        "start_line": 96,
        "span_start": 136,
        "bug_name": "Jsoup_81",
        "end_line": 174
      }
    ]
  },
  "Jsoup_83": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_83/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 254,
        "name": "consumeTagName",
        "start_line": 244,
        "span_start": 254,
        "bug_name": "Jsoup_83",
        "end_line": 260
      },
      {
        "member_type": "method",
        "file": "Jsoup_83/src/main/java/org/jsoup/parser/TokeniserState.java",
        "span_end": 160,
        "name": "read",
        "start_line": 143,
        "span_start": 161,
        "bug_name": "Jsoup_83",
        "end_line": 179
      },
      {
        "member_type": "method",
        "file": "Jsoup_83/src/main/java/org/jsoup/parser/TokeniserState.java",
        "span_end": 563,
        "name": "read",
        "start_line": 555,
        "span_start": 564,
        "bug_name": "Jsoup_83",
        "end_line": 598
      },
      {
        "member_type": "method",
        "file": "Jsoup_83/src/main/java/org/jsoup/parser/TokeniserState.java",
        "span_end": 581,
        "name": "read",
        "start_line": 555,
        "span_start": 581,
        "bug_name": "Jsoup_83",
        "end_line": 598
      }
    ]
  },
  "Jsoup_87": {
    "bug_count": 42,
    "entries": [
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 633,
        "name": "process",
        "start_line": 252,
        "span_start": 633,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 662,
        "name": "process",
        "start_line": 252,
        "span_start": 662,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 675,
        "name": "process",
        "start_line": 252,
        "span_start": 675,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 699,
        "name": "process",
        "start_line": 252,
        "span_start": 699,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 711,
        "name": "process",
        "start_line": 252,
        "span_start": 711,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 721,
        "name": "process",
        "start_line": 252,
        "span_start": 721,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 731,
        "name": "process",
        "start_line": 252,
        "span_start": 731,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 745,
        "name": "process",
        "start_line": 252,
        "span_start": 745,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 774,
        "name": "anyOtherEndTag",
        "start_line": 767,
        "span_start": 768,
        "bug_name": "Jsoup_87",
        "end_line": 786
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 887,
        "name": "process",
        "start_line": 808,
        "span_start": 887,
        "bug_name": "Jsoup_87",
        "end_line": 892
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 581,
        "name": "isSpecial",
        "start_line": 578,
        "span_start": 581,
        "bug_name": "Jsoup_87",
        "end_line": 583
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 897,
        "name": "anythingElse",
        "start_line": 894,
        "span_start": 897,
        "bug_name": "Jsoup_87",
        "end_line": 905
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 618,
        "name": "isSameFormattingElement",
        "start_line": 616,
        "span_start": 618,
        "bug_name": "Jsoup_87",
        "end_line": 622
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 926,
        "name": "process",
        "start_line": 908,
        "span_start": 926,
        "bug_name": "Jsoup_87",
        "end_line": 942
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 649,
        "name": "reconstructFormattingElements",
        "start_line": 624,
        "span_start": 649,
        "bug_name": "Jsoup_87",
        "end_line": 660
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 954,
        "name": "process",
        "start_line": 945,
        "span_start": 954,
        "bug_name": "Jsoup_87",
        "end_line": 977
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 689,
        "name": "getActiveFormattingElement",
        "start_line": 684,
        "span_start": 689,
        "bug_name": "Jsoup_87",
        "end_line": 693
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1007,
        "name": "process",
        "start_line": 980,
        "span_start": 1007,
        "bug_name": "Jsoup_87",
        "end_line": 1026
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 319,
        "name": "process",
        "start_line": 252,
        "span_start": 315,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1018,
        "name": "process",
        "start_line": 980,
        "span_start": 1018,
        "bug_name": "Jsoup_87",
        "end_line": 1026
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 339,
        "name": "process",
        "start_line": 252,
        "span_start": 339,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1089,
        "name": "exitTableBody",
        "start_line": 1082,
        "span_start": 1089,
        "bug_name": "Jsoup_87",
        "end_line": 1091
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 353,
        "name": "process",
        "start_line": 252,
        "span_start": 353,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1173,
        "name": "process",
        "start_line": 1161,
        "span_start": 1173,
        "bug_name": "Jsoup_87",
        "end_line": 1203
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 372,
        "name": "process",
        "start_line": 252,
        "span_start": 372,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1246,
        "name": "process",
        "start_line": 1217,
        "span_start": 1240,
        "bug_name": "Jsoup_87",
        "end_line": 1303
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 402,
        "name": "process",
        "start_line": 252,
        "span_start": 398,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 538,
        "name": "process",
        "start_line": 252,
        "span_start": 531,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 315,
        "name": "getFromStack",
        "start_line": 312,
        "span_start": 315,
        "bug_name": "Jsoup_87",
        "end_line": 320
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 337,
        "name": "popStackToClose",
        "start_line": 333,
        "span_start": 337,
        "bug_name": "Jsoup_87",
        "end_line": 340
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 347,
        "name": "popStackToClose",
        "start_line": 343,
        "span_start": 347,
        "bug_name": "Jsoup_87",
        "end_line": 350
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 355,
        "name": "popStackToBefore",
        "start_line": 352,
        "span_start": 355,
        "bug_name": "Jsoup_87",
        "end_line": 361
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 378,
        "name": "clearStackToContext",
        "start_line": 375,
        "span_start": 378,
        "bug_name": "Jsoup_87",
        "end_line": 383
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 420,
        "name": "resetInsertionMode",
        "start_line": 412,
        "span_start": 420,
        "bug_name": "Jsoup_87",
        "end_line": 459
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 476,
        "name": "inSpecificScope",
        "start_line": 469,
        "span_start": 476,
        "bug_name": "Jsoup_87",
        "end_line": 486
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 517,
        "name": "inSelectScope",
        "start_line": 514,
        "span_start": 517,
        "bug_name": "Jsoup_87",
        "end_line": 525
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *     11.2.5.2 Closing elements that have implied end tags<p/>\n *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a\n *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,\n *     the UA must pop the current node off the stack of open elements.\n *\n *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the\n *     process, then the UA must perform the above steps as if that element was not in the above list.\n */\n",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 570,
        "name": "generateImpliedEndTags",
        "start_line": 568,
        "span_start": 569,
        "bug_name": "Jsoup_87",
        "end_line": 572
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1277,
        "name": "process",
        "start_line": 1217,
        "span_start": 1269,
        "bug_name": "Jsoup_87",
        "end_line": 1303
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1296,
        "name": "process",
        "start_line": 1217,
        "span_start": 1296,
        "bug_name": "Jsoup_87",
        "end_line": 1303
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 574,
        "name": "process",
        "start_line": 252,
        "span_start": 574,
        "bug_name": "Jsoup_87",
        "end_line": 765
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 1393,
        "name": "process",
        "start_line": 1357,
        "span_start": 1383,
        "bug_name": "Jsoup_87",
        "end_line": 1402
      },
      {
        "member_type": "method",
        "file": "Jsoup_87/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
        "span_end": 598,
        "name": "process",
        "start_line": 252,
        "span_start": 598,
        "bug_name": "Jsoup_87",
        "end_line": 765
      }
    ]
  },
  "Jsoup_91": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "file": "Jsoup_91/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 36,
        "name": "CharacterReader",
        "start_line": 30,
        "span_start": 37,
        "bug_name": "Jsoup_91",
        "end_line": 40
      },
      {
        "member_type": "method",
        "file": "Jsoup_91/src/main/java/org/jsoup/parser/CharacterReader.java",
        "span_end": 458,
        "name": "containsIgnoreCase",
        "start_line": 448,
        "span_start": 452,
        "bug_name": "Jsoup_91",
        "end_line": 453
      }
    ]
  },
  "Jsoup_92": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Adds a new attribute. Will produce duplicates if the key already exists.\n * @see Attributes#put(String, String)\n */\n",
        "file": "Jsoup_92/src/main/java/org/jsoup/nodes/Attributes.java",
        "span_end": 122,
        "name": "add",
        "start_line": 119,
        "span_start": 118,
        "bug_name": "Jsoup_92",
        "end_line": 125
      },
      {
        "member_type": "method",
        "file": "Jsoup_92/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "span_end": 198,
        "name": "insert",
        "start_line": 197,
        "span_start": 199,
        "bug_name": "Jsoup_92",
        "end_line": 219
      },
      {
        "member_type": "method",
        "file": "Jsoup_92/src/main/java/org/jsoup/parser/Token.java",
        "span_end": 116,
        "name": "newAttribute",
        "start_line": 100,
        "span_start": 116,
        "bug_name": "Jsoup_92",
        "end_line": 124
      },
      {
        "member_type": "method",
        "file": "Jsoup_92/src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
        "span_end": 77,
        "name": "insert",
        "start_line": 75,
        "span_start": 78,
        "bug_name": "Jsoup_92",
        "end_line": 89
      }
    ]
  },
  "JxPath_1": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JxPath_1/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 116,
        "name": "testNode",
        "start_line": 87,
        "span_start": 116,
        "bug_name": "JxPath_1",
        "end_line": 136
      },
      {
        "member_type": "method",
        "file": "JxPath_1/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 376,
        "name": "testNode",
        "start_line": 343,
        "span_start": 376,
        "bug_name": "JxPath_1",
        "end_line": 395
      }
    ]
  },
  "JxPath_2": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JxPath_2/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
        "span_end": 76,
        "name": "iterate",
        "start_line": 73,
        "span_start": 77,
        "bug_name": "JxPath_2",
        "end_line": 82
      },
      {
        "member_type": "method",
        "file": "JxPath_2/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
        "span_end": 87,
        "name": "iteratePointers",
        "start_line": 84,
        "span_start": 88,
        "bug_name": "JxPath_2",
        "end_line": 100
      },
      {
        "member_type": "method",
        "file": "JxPath_2/src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
        "span_end": 145,
        "name": "next",
        "start_line": 142,
        "span_start": 145,
        "bug_name": "JxPath_2",
        "end_line": 148
      }
    ]
  },
  "JxPath_3": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JxPath_3/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
        "span_end": 108,
        "name": "createPath",
        "start_line": 105,
        "span_start": 109,
        "bug_name": "JxPath_3",
        "end_line": 133
      },
      {
        "member_type": "method",
        "file": "JxPath_3/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
        "span_end": 137,
        "name": "createPath",
        "start_line": 135,
        "span_start": 138,
        "bug_name": "JxPath_3",
        "end_line": 152
      },
      {
        "member_type": "method",
        "file": "JxPath_3/src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
        "span_end": 224,
        "name": "escape",
        "start_line": 213,
        "span_start": 224,
        "bug_name": "JxPath_3",
        "end_line": 231
      }
    ]
  },
  "JxPath_4": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "file": "JxPath_4/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 301,
        "name": "findEnclosingAttribute",
        "start_line": 296,
        "span_start": 296,
        "bug_name": "JxPath_4",
        "end_line": 308
      },
      {
        "member_type": "method",
        "file": "JxPath_4/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 310,
        "name": "getLanguage",
        "start_line": 310,
        "span_start": 311,
        "bug_name": "JxPath_4",
        "end_line": 312
      },
      {
        "member_type": "method",
        "file": "JxPath_4/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 660,
        "name": "getValue",
        "start_line": 633,
        "span_start": 632,
        "bug_name": "JxPath_4",
        "end_line": 662
      },
      {
        "member_type": "method",
        "file": "JxPath_4/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 240,
        "name": "getValue",
        "start_line": 238,
        "span_start": 240,
        "bug_name": "JxPath_4",
        "end_line": 265
      },
      {
        "member_type": "method",
        "file": "JxPath_4/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 262,
        "name": "getValue",
        "start_line": 238,
        "span_start": 249,
        "bug_name": "JxPath_4",
        "end_line": 265
      },
      {
        "member_type": "method",
        "file": "JxPath_4/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 441,
        "name": "getLanguage",
        "start_line": 437,
        "span_start": 436,
        "bug_name": "JxPath_4",
        "end_line": 453
      },
      {
        "member_type": "method",
        "file": "JxPath_4/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 756,
        "name": "getAbstractFactory",
        "start_line": 750,
        "span_start": 756,
        "bug_name": "JxPath_4",
        "end_line": 758
      }
    ]
  },
  "JxPath_7": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "file": "JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java",
        "span_end": 34,
        "name": "evaluateCompare",
        "start_line": 31,
        "span_start": 31,
        "bug_name": "JxPath_7",
        "end_line": 33
      },
      {
        "member_type": "method",
        "file": "JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java",
        "span_end": 35,
        "name": "evaluateCompare",
        "start_line": 32,
        "span_start": 32,
        "bug_name": "JxPath_7",
        "end_line": 34
      },
      {
        "member_type": "method",
        "file": "JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java",
        "span_end": 34,
        "name": "evaluateCompare",
        "start_line": 31,
        "span_start": 31,
        "bug_name": "JxPath_7",
        "end_line": 33
      },
      {
        "member_type": "method",
        "file": "JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java",
        "span_end": 35,
        "name": "evaluateCompare",
        "start_line": 32,
        "span_start": 32,
        "bug_name": "JxPath_7",
        "end_line": 34
      },
      {
        "member_type": "method",
        "file": "JxPath_7/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
        "span_end": 46,
        "name": "computeValue",
        "start_line": 40,
        "span_start": 42,
        "bug_name": "JxPath_7",
        "end_line": 47
      }
    ]
  },
  "JxPath_9": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "constructor",
        "file": "JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
        "span_end": 42,
        "name": "CoreOperationCompare",
        "start_line": 39,
        "span_start": 37,
        "bug_name": "JxPath_9",
        "end_line": 41
      },
      {
        "member_type": "method",
        "file": "JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
        "span_end": 127,
        "name": "findMatch",
        "start_line": 117,
        "span_start": 123,
        "bug_name": "JxPath_9",
        "end_line": 128
      },
      {
        "member_type": "method",
        "file": "JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
        "span_end": 150,
        "name": "equal",
        "start_line": 130,
        "span_start": 136,
        "bug_name": "JxPath_9",
        "end_line": 161
      },
      {
        "member_type": "method",
        "file": "JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java",
        "span_end": 33,
        "name": "getSymbol",
        "start_line": 31,
        "span_start": 31,
        "bug_name": "JxPath_9",
        "end_line": 33
      },
      {
        "member_type": "method",
        "file": "JxPath_9/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java",
        "span_end": 33,
        "name": "getSymbol",
        "start_line": 27,
        "span_start": 28,
        "bug_name": "JxPath_9",
        "end_line": 33
      }
    ]
  },
  "JxPath_11": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JxPath_11/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
        "span_end": 111,
        "name": "getAttribute",
        "start_line": 107,
        "span_start": 111,
        "bug_name": "JxPath_11",
        "end_line": 136
      },
      {
        "member_type": "constructor",
        "file": "JxPath_11/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "span_end": 57,
        "name": "JDOMAttributeIterator",
        "start_line": 42,
        "span_start": 52,
        "bug_name": "JxPath_11",
        "end_line": 95
      },
      {
        "member_type": "method",
        "file": "JxPath_11/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "span_end": 114,
        "name": "getPosition",
        "start_line": 113,
        "span_start": 114,
        "bug_name": "JxPath_11",
        "end_line": 115
      }
    ]
  },
  "JxPath_13": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Given a prefix, returns an externally registered namespace URI.\n *\n * @param prefix The namespace prefix to look up\n * @return namespace URI or null if the prefix is undefined.\n * @since JXPath 1.3\n */\n",
        "file": "JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 151,
        "name": "getExternallyRegisteredNamespaceURI",
        "start_line": 138,
        "span_start": 139,
        "bug_name": "JxPath_13",
        "end_line": 154
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Get the nearest prefix found that matches an externally-registered namespace.\n * @param namespaceURI\n * @return String prefix if found.\n * @since JXPath 1.3\n */\n",
        "file": "JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 162,
        "name": "getExternallyRegisteredPrefix",
        "start_line": 162,
        "span_start": 159,
        "bug_name": "JxPath_13",
        "end_line": 174
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n * @see java.lang.Object#clone()\n */\n",
        "file": "JxPath_13/src/java/org/apache/commons/jxpath/ri/NamespaceResolver.java",
        "span_end": 200,
        "name": "clone",
        "start_line": 198,
        "span_start": 200,
        "bug_name": "JxPath_13",
        "end_line": 209
      },
      {
        "member_type": "method",
        "file": "JxPath_13/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 415,
        "name": "createChild",
        "start_line": 409,
        "span_start": 415,
        "bug_name": "JxPath_13",
        "end_line": 415
      }
    ]
  },
  "JxPath_15": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "JxPath_15/src/java/org/apache/commons/jxpath/ri/axes/UnionContext.java",
        "span_end": 62,
        "name": "setPosition",
        "start_line": 47,
        "span_start": 56,
        "bug_name": "JxPath_15",
        "end_line": 70
      }
    ]
  },
  "JxPath_16": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Test a Node.\n * @param node to test\n * @param test to execute\n * @return true if node passes test\n */\n",
        "file": "JxPath_16/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 148,
        "name": "testNode",
        "start_line": 117,
        "span_start": 147,
        "bug_name": "JxPath_16",
        "end_line": 166
      },
      {
        "member_type": "method",
        "file": "JxPath_16/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 391,
        "name": "testNode",
        "start_line": 358,
        "span_start": 391,
        "bug_name": "JxPath_16",
        "end_line": 407
      }
    ]
  },
  "JxPath_17": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "JxPath_17/src/java/org/apache/commons/jxpath/ri/model/dom/DOMAttributeIterator.java",
        "span_end": 95,
        "name": "testAttr",
        "start_line": 68,
        "span_start": 84,
        "bug_name": "JxPath_17",
        "end_line": 94
      },
      {
        "member_type": "constructor",
        "file": "JxPath_17/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "span_end": 74,
        "name": "JDOMAttributeIterator",
        "start_line": 41,
        "span_start": 70,
        "bug_name": "JxPath_17",
        "end_line": 87
      },
      {
        "member_type": "constructor",
        "file": "JxPath_17/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMAttributeIterator.java",
        "span_end": 82,
        "name": "JDOMAttributeIterator",
        "start_line": 41,
        "span_start": 82,
        "bug_name": "JxPath_17",
        "end_line": 87
      }
    ]
  },
  "JxPath_18": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "JxPath_18/src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java",
        "span_end": 80,
        "name": "nextNode",
        "start_line": 74,
        "span_start": 75,
        "bug_name": "JxPath_18",
        "end_line": 101
      },
      {
        "member_type": "method",
        "file": "JxPath_18/src/java/org/apache/commons/jxpath/ri/axes/AttributeContext.java",
        "span_end": 91,
        "name": "nextNode",
        "start_line": 74,
        "span_start": 91,
        "bug_name": "JxPath_18",
        "end_line": 101
      }
    ]
  },
  "JxPath_19": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Get relative position of this among like-named siblings.\n * @return 1..n\n */\n",
        "file": "JxPath_19/src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
        "span_end": 570,
        "name": "getRelativePositionByQName",
        "start_line": 556,
        "span_start": 560,
        "bug_name": "JxPath_19",
        "end_line": 574
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Get relative position of this among like-named siblings.\n * @return 1..n\n */\n",
        "file": "JxPath_19/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 697,
        "name": "getRelativePositionByQName",
        "start_line": 684,
        "span_start": 696,
        "bug_name": "JxPath_19",
        "end_line": 706
      },
      {
        "member_type": "method",
        "file": "JxPath_19/src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
        "span_end": 708,
        "name": "matchesQName",
        "start_line": 708,
        "span_start": 709,
        "bug_name": "JxPath_19",
        "end_line": 716
      }
    ]
  },
  "JxPath_20": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Compare left to right.\n * @param left left operand\n * @param right right operand\n * @return operation success/failure\n */\n",
        "file": "JxPath_20/src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
        "span_end": 88,
        "name": "compute",
        "start_line": 71,
        "span_start": 88,
        "bug_name": "JxPath_20",
        "end_line": 99
      }
    ]
  },
  "Lang_4": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Define the lookup table to be used in translation\n *\n * Note that, as of Lang 3.1, the key to the lookup table is converted to a\n * java.lang.String, while the value remains as a java.lang.CharSequence.\n * This is because we need the key to support hashCode and equals(Object),\n * allowing it to be the key for a HashMap. See LANG-882.\n *\n * @param lookup CharSequence[][] table of size [*][2]\n */\n",
        "file": "Lang_4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "span_end": 51,
        "name": "LookupTranslator",
        "start_line": 45,
        "span_start": 46,
        "bug_name": "Lang_4",
        "end_line": 63
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Lang_4/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "span_end": 77,
        "name": "translate",
        "start_line": 68,
        "span_start": 77,
        "bug_name": "Lang_4",
        "end_line": 84
      }
    ]
  },
  "Lang_5": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Converts a String to a Locale.</p>\n *\n * <p>This method takes the string format of a locale and creates the\n * locale object from it.</p>\n *\n * <pre>\n *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n * </pre>\n *\n * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n * Thus, the result from getVariant() may vary depending on your JDK.</p>\n *\n * <p>This method validates the input strictly.\n * The language code must be lowercase.\n * The country code must be uppercase.\n * The separator must be an underscore.\n * The length must be correct.\n * </p>\n *\n * @param str  the locale String to convert, null returns null\n * @return a Locale, null if null input\n * @throws IllegalArgumentException if the string is an invalid format\n */\n",
        "file": "Lang_5/src/main/java/org/apache/commons/lang3/LocaleUtils.java",
        "span_end": 96,
        "name": "toLocale",
        "start_line": 88,
        "span_start": 97,
        "bug_name": "Lang_5",
        "end_line": 149
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Converts a String to a Locale.</p>\n *\n * <p>This method takes the string format of a locale and creates the\n * locale object from it.</p>\n *\n * <pre>\n *   LocaleUtils.toLocale(\"en\")         = new Locale(\"en\", \"\")\n *   LocaleUtils.toLocale(\"en_GB\")      = new Locale(\"en\", \"GB\")\n *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")   (#)\n * </pre>\n *\n * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.\n * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.\n * Thus, the result from getVariant() may vary depending on your JDK.</p>\n *\n * <p>This method validates the input strictly.\n * The language code must be lowercase.\n * The country code must be uppercase.\n * The separator must be an underscore.\n * The length must be correct.\n * </p>\n *\n * @param str  the locale String to convert, null returns null\n * @return a Locale, null if null input\n * @throws IllegalArgumentException if the string is an invalid format\n */\n",
        "file": "Lang_5/src/main/java/org/apache/commons/lang3/LocaleUtils.java",
        "span_end": 127,
        "name": "toLocale",
        "start_line": 88,
        "span_start": 128,
        "bug_name": "Lang_5",
        "end_line": 149
      }
    ]
  },
  "Lang_7": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Turns a string value into a java.lang.Number.</p>\n *\n * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n * will be interpreted as a hexadecimal integer - or long, if the number of digits after the 0x\n * prefix is more than 8.\n * Values with leading <code>0</code>'s will not be interpreted as octal.</p>\n *\n * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts\n * trying to create successively larger types from the type specified\n * until one is found that can represent the value.</p>\n *\n * <p>If a type specifier is not found, it will check for a decimal point\n * and then try successively larger types from <code>Integer</code> to\n * <code>BigInteger</code> and from <code>Float</code> to\n * <code>BigDecimal</code>.</p>\n *\n * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n *\n * <p>This method does not trim the input string, i.e., strings with leading\n * or trailing spaces will generate NumberFormatExceptions.</p>\n *\n * @param str  String containing a number, may be null\n * @return Number created from the string (or null if the input is null)\n * @throws NumberFormatException if the value cannot be converted\n */\n",
        "file": "Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 454,
        "name": "createNumber",
        "start_line": 445,
        "span_start": 452,
        "bug_name": "Lang_7",
        "end_line": 595
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>\n *\n * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n *\n * @param str  a <code>String</code> to convert, may be null\n * @return converted <code>BigDecimal</code> (or null if the input is null)\n * @throws NumberFormatException if the value cannot be converted\n */\n",
        "file": "Lang_7/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 724,
        "name": "createBigDecimal",
        "start_line": 710,
        "span_start": 721,
        "bug_name": "Lang_7",
        "end_line": 726
      }
    ]
  },
  "Lang_8": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Constructs an instance of {@code TimeZoneNameRule} with the specified properties.\n *\n * @param timeZone the time zone\n * @param locale the locale\n * @param style the style\n */\n",
        "file": "Lang_8/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "span_end": 1112,
        "name": "TimeZoneNameRule",
        "start_line": 1108,
        "span_start": 1112,
        "bug_name": "Lang_8",
        "end_line": 1114
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Lang_8/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "span_end": 1133,
        "name": "appendTo",
        "start_line": 1130,
        "span_start": 1134,
        "bug_name": "Lang_8",
        "end_line": 1139
      }
    ]
  },
  "Lang_13": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Constructor.\n * @param in The <code>InputStream</code>.\n * @param classLoader classloader to use\n * @throws IOException if an I/O error occurs while reading stream header.\n * @see java.io.ObjectInputStream\n */\n",
        "file": "Lang_13/src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "span_end": 251,
        "name": "ClassLoaderAwareObjectInputStream",
        "start_line": 250,
        "span_start": 252,
        "bug_name": "Lang_13",
        "end_line": 263
      }
    ]
  },
  "Lang_15": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p> Checks if the subject type may be implicitly cast to the target\n * parameterized type following the Java generics rules. </p>\n *\n * @param type the subject type to be assigned to the target type\n * @param toParameterizedType the target parameterized type\n * @param typeVarAssigns a map with type variables\n * @return true if <code>type</code> is assignable to <code>toType</code>.\n */\n",
        "file": "Lang_15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "span_end": 221,
        "name": "isAssignable",
        "start_line": 179,
        "span_start": 219,
        "bug_name": "Lang_15",
        "end_line": 235
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p> Return a map of the type arguments of a class in the context of <code>toClass</code>. </p>\n *\n * @param cls the class in question\n * @param toClass the context class\n * @param subtypeVarAssigns a map with type variables\n * @return the map with type arguments\n */\n",
        "file": "Lang_15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "span_end": 675,
        "name": "getTypeArguments",
        "start_line": 650,
        "span_start": 675,
        "bug_name": "Lang_15",
        "end_line": 681
      }
    ]
  },
  "Lang_19": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Lang_19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "span_end": 40,
        "name": "translate",
        "start_line": 36,
        "span_start": 40,
        "bug_name": "Lang_19",
        "end_line": 89
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Lang_19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "span_end": 54,
        "name": "translate",
        "start_line": 36,
        "span_start": 50,
        "bug_name": "Lang_19",
        "end_line": 89
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Lang_19/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "span_end": 80,
        "name": "translate",
        "start_line": 36,
        "span_start": 79,
        "bug_name": "Lang_19",
        "end_line": 89
      }
    ]
  },
  "Lang_20": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Joins the elements of the provided array into a single String\n * containing the provided list of elements.</p>\n *\n * <p>No delimiter is added before or after the list.\n * Null objects or empty strings within the array are represented by\n * empty strings.</p>\n *\n * <pre>\n * StringUtils.join(null, *)               = null\n * StringUtils.join([], *)                 = \"\"\n * StringUtils.join([null], *)             = \"\"\n * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n * </pre>\n *\n * @param array  the array of values to join together, may be null\n * @param separator  the separator character to use\n * @param startIndex the first index to start joining from.  It is\n * an error to pass in an end index past the end of the array\n * @param endIndex the index to stop joining from (exclusive). It is\n * an error to pass in an end index past the end of the array\n * @return the joined String, {@code null} if null array input\n * @since 2.0\n */\n",
        "file": "Lang_20/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 3298,
        "name": "join",
        "start_line": 3289,
        "span_start": 3298,
        "bug_name": "Lang_20",
        "end_line": 3309
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Joins the elements of the provided array into a single String\n * containing the provided list of elements.</p>\n *\n * <p>No delimiter is added before or after the list.\n * A {@code null} separator is the same as an empty String (\"\").\n * Null objects or empty strings within the array are represented by\n * empty strings.</p>\n *\n * <pre>\n * StringUtils.join(null, *)                = null\n * StringUtils.join([], *)                  = \"\"\n * StringUtils.join([null], *)              = \"\"\n * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n * </pre>\n *\n * @param array  the array of values to join together, may be null\n * @param separator  the separator character to use, null treated as \"\"\n * @param startIndex the first index to start joining from.  It is\n * an error to pass in an end index past the end of the array\n * @param endIndex the index to stop joining from (exclusive). It is\n * an error to pass in an end index past the end of the array\n * @return the joined String, {@code null} if null array input\n */\n",
        "file": "Lang_20/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 3383,
        "name": "join",
        "start_line": 3368,
        "span_start": 3383,
        "bug_name": "Lang_20",
        "end_line": 3394
      }
    ]
  },
  "Lang_23": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Check if this extended message format is equal to another object.\n *\n * @param obj the object to compare to\n * @return true if this object equals the other, otherwise false\n */\n",
        "file": "Lang_23/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
        "span_end": 268,
        "name": "equals",
        "start_line": 264,
        "span_start": 263,
        "bug_name": "Lang_23",
        "end_line": 286
      }
    ]
  },
  "Lang_27": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Turns a string value into a java.lang.Number.</p>\n *\n * <p>First, the value is examined for a type qualifier on the end\n * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n * trying to create successively larger types from the type specified\n * until one is found that can represent the value.</p>\n *\n * <p>If a type specifier is not found, it will check for a decimal point\n * and then try successively larger types from <code>Integer</code> to\n * <code>BigInteger</code> and from <code>Float</code> to\n * <code>BigDecimal</code>.</p>\n *\n * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n * will be interpreted as a hexadecimal integer.  Values with leading\n * <code>0</code>'s will not be interpreted as octal.</p>\n *\n * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n *\n * <p>This method does not trim the input string, i.e., strings with leading\n * or trailing spaces will generate NumberFormatExceptions.</p>\n *\n * @param str  String containing a number, may be null\n * @return Number created from the string\n * @throws NumberFormatException if the value cannot be converted\n */\n",
        "file": "Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 479,
        "name": "createNumber",
        "start_line": 452,
        "span_start": 479,
        "bug_name": "Lang_27",
        "end_line": 602
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Turns a string value into a java.lang.Number.</p>\n *\n * <p>First, the value is examined for a type qualifier on the end\n * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n * trying to create successively larger types from the type specified\n * until one is found that can represent the value.</p>\n *\n * <p>If a type specifier is not found, it will check for a decimal point\n * and then try successively larger types from <code>Integer</code> to\n * <code>BigInteger</code> and from <code>Float</code> to\n * <code>BigDecimal</code>.</p>\n *\n * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n * will be interpreted as a hexadecimal integer.  Values with leading\n * <code>0</code>'s will not be interpreted as octal.</p>\n *\n * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n *\n * <p>This method does not trim the input string, i.e., strings with leading\n * or trailing spaces will generate NumberFormatExceptions.</p>\n *\n * @param str  String containing a number, may be null\n * @return Number created from the string\n * @throws NumberFormatException if the value cannot be converted\n */\n",
        "file": "Lang_27/src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 488,
        "name": "createNumber",
        "start_line": 452,
        "span_start": 489,
        "bug_name": "Lang_27",
        "end_line": 602
      }
    ]
  },
  "Lang_30": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Search a CharSequence to find the first index of any\n * character in the given set of characters.</p>\n *\n * <p>A <code>null</code> String will return <code>-1</code>.\n * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n *\n * <pre>\n * StringUtils.indexOfAny(null, *)                = -1\n * StringUtils.indexOfAny(\"\", *)                  = -1\n * StringUtils.indexOfAny(*, null)                = -1\n * StringUtils.indexOfAny(*, [])                  = -1\n * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n * </pre>\n *\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the index of any of the chars, -1 if no match or null input\n * @since 2.0\n */\n",
        "file": "Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1382,
        "name": "indexOfAny",
        "start_line": 1371,
        "span_start": 1376,
        "bug_name": "Lang_30",
        "end_line": 1395
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Checks if the CharSequence contains any character in the given\n * set of characters.</p>\n *\n * <p>A <code>null</code> CharSequence will return <code>false</code>.\n * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n *\n * <pre>\n * StringUtils.containsAny(null, *)                = false\n * StringUtils.containsAny(\"\", *)                  = false\n * StringUtils.containsAny(*, null)                = false\n * StringUtils.containsAny(*, [])                  = false\n * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n * StringUtils.containsAny(\"aba\", ['z'])           = false\n * </pre>\n *\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the <code>true</code> if any of the chars are found,\n * <code>false</code> if no match or null input\n * @since 2.4\n */\n",
        "file": "Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1457,
        "name": "containsAny",
        "start_line": 1451,
        "span_start": 1455,
        "bug_name": "Lang_30",
        "end_line": 1479
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Searches a CharSequence to find the first index of any\n * character not in the given set of characters.</p>\n *\n * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n *\n * <pre>\n * StringUtils.indexOfAnyBut(null, *)           = -1\n * StringUtils.indexOfAnyBut(\"\", *)             = -1\n * StringUtils.indexOfAnyBut(*, null)           = -1\n * StringUtils.indexOfAnyBut(*, [])             = -1\n * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n * </pre>\n *\n * @param cs  the CharSequence to check, may be null\n * @param searchChars  the chars to search for, may be null\n * @return the index of any of the chars, -1 if no match or null input\n * @since 2.0\n */\n",
        "file": "Lang_30/src/main/java/org/apache/commons/lang3/StringUtils.java",
        "span_end": 1539,
        "name": "indexOfAnyBut",
        "start_line": 1539,
        "span_start": 1533,
        "bug_name": "Lang_30",
        "end_line": 1564
      }
    ]
  },
  "Lang_32": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>\n * Registers the given object. Used by the reflection methods to avoid infinite loops.\n * </p>\n *\n * @param value\n *            The object to register.\n */\n",
        "file": "Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "span_end": 521,
        "name": "register",
        "start_line": 517,
        "span_start": 522,
        "bug_name": "Lang_32",
        "end_line": 524
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>\n * Unregisters the given object.\n * </p>\n *\n * <p>\n * Used by the reflection methods to avoid infinite loops.\n *\n * @param value\n *            The object to unregister.\n * @since 2.3\n */\n",
        "file": "Lang_32/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
        "span_end": 538,
        "name": "unregister",
        "start_line": 538,
        "span_start": 538,
        "bug_name": "Lang_32",
        "end_line": 548
      }
    ]
  },
  "Lang_34": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>\n * Returns the registry of objects being traversed by the <code>reflectionToString</code>\n * methods in the current thread.\n * </p>\n *\n * @return Set the registry of objects being traversed\n */\n",
        "file": "Lang_34/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "span_end": 148,
        "name": "getRegistry",
        "start_line": 147,
        "span_start": 148,
        "bug_name": "Lang_34",
        "end_line": 149
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>\n * Returns <code>true</code> if the registry contains the given object.\n * Used by the reflection methods to avoid infinite loops.\n * </p>\n *\n * @param value\n *                  The object to lookup in the registry.\n * @return boolean <code>true</code> if the registry contains the given\n *             object.\n */\n",
        "file": "Lang_34/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "span_end": 164,
        "name": "isRegistered",
        "start_line": 162,
        "span_start": 164,
        "bug_name": "Lang_34",
        "end_line": 165
      }
    ]
  },
  "Lang_35": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Copies the given array and adds the given element at the end of the new array.</p>\n *\n * <p>The new array contains the same elements of the input\n * array plus the given element in the last position. The component type of\n * the new array is the same as that of the input array.</p>\n *\n * <p>If the input array is <code>null</code>, a new one element array is returned\n *  whose component type is the same as the element, unless the element itself is null,\n *  in which case the return type is Object[]</p>\n *\n * <pre>\n * ArrayUtils.add(null, null)      = [null]\n * ArrayUtils.add(null, \"a\")       = [\"a\"]\n * ArrayUtils.add([\"a\"], null)     = [\"a\", null]\n * ArrayUtils.add([\"a\"], \"b\")      = [\"a\", \"b\"]\n * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n * </pre>\n *\n * @param array  the array to \"add\" the element to, may be <code>null</code>\n * @param element  the object to add, may be <code>null</code>\n * @return A new array containing the existing elements plus the new element\n * The returned array type will be that of the input array (unless null),\n * in which case it will have the same type as the element.\n * If both are null, an IllegalArgumentException is thrown\n * @since 2.1\n * @throws IllegalArgumentException if both arguments are null\n */\n",
        "file": "Lang_35/src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "span_end": 3295,
        "name": "add",
        "start_line": 3288,
        "span_start": 3295,
        "bug_name": "Lang_35",
        "end_line": 3301
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Inserts the specified element at the specified position in the array.\n * Shifts the element currently at that position (if any) and any subsequent\n * elements to the right (adds one to their indices).</p>\n *\n * <p>This method returns a new array with the same elements of the input\n * array plus the given element on the specified position. The component\n * type of the returned array is always the same as that of the input\n * array.</p>\n *\n * <p>If the input array is <code>null</code>, a new one element array is returned\n *  whose component type is the same as the element.</p>\n *\n * <pre>\n * ArrayUtils.add(null, 0, null)      = [null]\n * ArrayUtils.add(null, 0, \"a\")       = [\"a\"]\n * ArrayUtils.add([\"a\"], 1, null)     = [\"a\", null]\n * ArrayUtils.add([\"a\"], 1, \"b\")      = [\"a\", \"b\"]\n * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n * </pre>\n *\n * @param array  the array to add the element to, may be <code>null</code>\n * @param index  the position of the new object\n * @param element  the object to add\n * @return A new array containing the existing elements and the new element\n * @throws IndexOutOfBoundsException if the index is out of range\n * (index < 0 || index > array.length).\n * @throws IllegalArgumentException if both array and element are null\n */\n",
        "file": "Lang_35/src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "span_end": 3574,
        "name": "add",
        "start_line": 3567,
        "span_start": 3574,
        "bug_name": "Lang_35",
        "end_line": 3579
      }
    ]
  },
  "Lang_36": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Turns a string value into a java.lang.Number.</p>\n *\n * <p>First, the value is examined for a type qualifier on the end\n * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n * trying to create successively larger types from the type specified\n * until one is found that can represent the value.</p>\n *\n * <p>If a type specifier is not found, it will check for a decimal point\n * and then try successively larger types from <code>Integer</code> to\n * <code>BigInteger</code> and from <code>Float</code> to\n * <code>BigDecimal</code>.</p>\n *\n * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n * will be interpreted as a hexadecimal integer.  Values with leading\n * <code>0</code>'s will not be interpreted as octal.</p>\n *\n * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n *\n * <p>This method does not trim the input string, i.e., strings with leading\n * or trailing spaces will generate NumberFormatExceptions.</p>\n *\n * @param str  String containing a number, may be null\n * @return Number created from the string\n * @throws NumberFormatException if the value cannot be converted\n */\n",
        "file": "Lang_36/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 491,
        "name": "createNumber",
        "start_line": 448,
        "span_start": 491,
        "bug_name": "Lang_36",
        "end_line": 595
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Checks whether the String a valid Java number.</p>\n *\n * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n * qualifier, scientific notation and numbers marked with a type\n * qualifier (e.g. 123L).</p>\n *\n * <p><code>Null</code> and empty String will return\n * <code>false</code>.</p>\n *\n * @param str  the <code>String</code> to check\n * @return <code>true</code> if the string is a correctly formatted number\n */\n",
        "file": "Lang_36/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "span_end": 1387,
        "name": "isNumber",
        "start_line": 1312,
        "span_start": 1388,
        "bug_name": "Lang_36",
        "end_line": 1414
      }
    ]
  },
  "Lang_41": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Gets the class name minus the package name from a String.</p>\n *\n * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n *\n * @param className  the className to get the short name for\n * @return the class name of the class without the package name or an empty string\n */\n",
        "file": "Lang_41/src/java/org/apache/commons/lang/ClassUtils.java",
        "span_end": 194,
        "name": "getShortClassName",
        "start_line": 183,
        "span_start": 191,
        "bug_name": "Lang_41",
        "end_line": 217
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Gets the class name minus the package name from a String.</p>\n *\n * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n *\n * @param className  the className to get the short name for\n * @return the class name of the class without the package name or an empty string\n */\n",
        "file": "Lang_41/src/java/org/apache/commons/lang/ClassUtils.java",
        "span_end": 203,
        "name": "getShortClassName",
        "start_line": 183,
        "span_start": 203,
        "bug_name": "Lang_41",
        "end_line": 217
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Gets the package name of a <code>Class</code>.</p>\n *\n * @param cls  the class to get the package name for, may be <code>null</code>.\n * @return the package name or an empty string\n */\n",
        "file": "Lang_41/src/java/org/apache/commons/lang/ClassUtils.java",
        "span_end": 250,
        "name": "getPackageName",
        "start_line": 241,
        "span_start": 245,
        "bug_name": "Lang_41",
        "end_line": 246
      }
    ]
  },
  "Lang_46": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n *\n * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n *\n * <p>So a tab becomes the characters <code>'\\\\'</code> and\n * <code>'t'</code>.</p>\n *\n * <p>The only difference between Java strings and JavaScript strings\n * is that in JavaScript, a single quote must be escaped.</p>\n *\n * <p>Example:\n * <pre>\n * input string: He didn't say, \"Stop!\"\n * output string: He didn't say, \\\"Stop!\\\"\n * </pre>\n * </p>\n *\n * @param str  String to escape values in, may be null\n * @return String with escaped values, <code>null</code> if null string input\n */\n",
        "file": "Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 86,
        "name": "escapeJava",
        "start_line": 85,
        "span_start": 86,
        "bug_name": "Lang_46",
        "end_line": 87
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Escapes the characters in a <code>String</code> using Java String rules to\n * a <code>Writer</code>.</p>\n *\n * <p>A <code>null</code> string input has no effect.</p>\n *\n * @see #escapeJava(java.lang.String)\n * @param out  Writer to write escaped string into\n * @param str  String to escape values in, may be null\n * @throws IllegalArgumentException if the Writer is <code>null</code>\n * @throws IOException if error occurs on underlying Writer\n */\n",
        "file": "Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 102,
        "name": "escapeJava",
        "start_line": 101,
        "span_start": 102,
        "bug_name": "Lang_46",
        "end_line": 103
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n * <p>Escapes any values it finds into their JavaScript String form.\n * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n *\n * <p>So a tab becomes the characters <code>'\\\\'</code> and\n * <code>'t'</code>.</p>\n *\n * <p>The only difference between Java strings and JavaScript strings\n * is that in JavaScript, a single quote must be escaped.</p>\n *\n * <p>Example:\n * <pre>\n * input string: He didn't say, \"Stop!\"\n * output string: He didn\\'t say, \\\"Stop!\\\"\n * </pre>\n * </p>\n *\n * @param str  String to escape values in, may be null\n * @return String with escaped values, <code>null</code> if null string input\n */\n",
        "file": "Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 127,
        "name": "escapeJavaScript",
        "start_line": 126,
        "span_start": 127,
        "bug_name": "Lang_46",
        "end_line": 128
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Escapes the characters in a <code>String</code> using JavaScript String rules\n * to a <code>Writer</code>.</p>\n *\n * <p>A <code>null</code> string input has no effect.</p>\n *\n * @see #escapeJavaScript(java.lang.String)\n * @param out  Writer to write escaped string into\n * @param str  String to escape values in, may be null\n * @throws IllegalArgumentException if the Writer is <code>null</code>\n * @throws IOException if error occurs on underlying Writer\n */\n",
        "file": "Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 143,
        "name": "escapeJavaScript",
        "start_line": 142,
        "span_start": 143,
        "bug_name": "Lang_46",
        "end_line": 144
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n *\n * @param str String to escape values in, may be null\n * @param escapeSingleQuotes escapes single quotes if <code>true</code>\n * @param escapeForwardSlash TODO\n * @return the escaped string\n */\n",
        "file": "Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 160,
        "name": "escapeJavaStyleString",
        "start_line": 154,
        "span_start": 154,
        "bug_name": "Lang_46",
        "end_line": 167
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n *\n * @param out write to receieve the escaped string\n * @param str String to escape values in, may be null\n * @param escapeSingleQuote escapes single quotes if <code>true</code>\n * @param escapeForwardSlash TODO\n * @throws IOException if an IOException occurs\n */\n",
        "file": "Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 178,
        "name": "escapeJavaStyleString",
        "start_line": 178,
        "span_start": 178,
        "bug_name": "Lang_46",
        "end_line": 256
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Worker method for the {@link #escapeJavaScript(String)} method.</p>\n *\n * @param out write to receieve the escaped string\n * @param str String to escape values in, may be null\n * @param escapeSingleQuote escapes single quotes if <code>true</code>\n * @param escapeForwardSlash TODO\n * @throws IOException if an IOException occurs\n */\n",
        "file": "Lang_46/src/java/org/apache/commons/lang/StringEscapeUtils.java",
        "span_end": 244,
        "name": "escapeJavaStyleString",
        "start_line": 178,
        "span_start": 244,
        "bug_name": "Lang_46",
        "end_line": 256
      }
    ]
  },
  "Lang_47": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Appends an object to the builder padding on the left to a fixed width.\n * The <code>toString</code> of the object is used.\n * If the object is larger than the length, the left hand side is lost.\n * If the object is null, the null text value is used.\n *\n * @param obj  the object to append, null uses null text\n * @param width  the fixed field width, zero or negative has no effect\n * @param padChar  the pad character to use\n * @return this, to enable chaining\n */\n",
        "file": "Lang_47/src/java/org/apache/commons/lang/text/StrBuilder.java",
        "span_end": 1185,
        "name": "appendFixedWidthPadLeft",
        "start_line": 1182,
        "span_start": 1186,
        "bug_name": "Lang_47",
        "end_line": 1202
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Appends an object to the builder padding on the right to a fixed length.\n * The <code>toString</code> of the object is used.\n * If the object is larger than the length, the right hand side is lost.\n * If the object is null, null text value is used.\n *\n * @param obj  the object to append, null uses null text\n * @param width  the fixed field width, zero or negative has no effect\n * @param padChar  the pad character to use\n * @return this, to enable chaining\n */\n",
        "file": "Lang_47/src/java/org/apache/commons/lang/text/StrBuilder.java",
        "span_end": 1229,
        "name": "appendFixedWidthPadRight",
        "start_line": 1229,
        "span_start": 1230,
        "bug_name": "Lang_47",
        "end_line": 1249
      }
    ]
  },
  "Lang_50": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Gets a date formatter instance using the specified style, time\n * zone and locale.</p>\n *\n * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n * @param timeZone  optional time zone, overrides time zone of\n *  formatted date\n * @param locale  optional locale, overrides system locale\n * @return a localized standard date formatter\n * @throws IllegalArgumentException if the Locale has no date\n *  pattern defined\n */\n",
        "file": "Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "span_end": 294,
        "name": "getDateInstance",
        "start_line": 279,
        "span_start": 285,
        "bug_name": "Lang_50",
        "end_line": 304
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Gets a date/time formatter instance using the specified style,\n * time zone and locale.</p>\n *\n * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n * @param timeZone  optional time zone, overrides time zone of\n *  formatted date\n * @param locale  optional locale, overrides system locale\n * @return a localized standard date/time formatter\n * @throws IllegalArgumentException if the Locale has no date/time\n *  pattern defined\n */\n",
        "file": "Lang_50/src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "span_end": 473,
        "name": "getDateTimeInstance",
        "start_line": 456,
        "span_start": 465,
        "bug_name": "Lang_50",
        "end_line": 482
      }
    ]
  },
  "Lang_60": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Checks if the string builder contains the specified char.\n *\n * @param ch  the character to find\n * @return true if the builder contains the character\n */\n",
        "file": "Lang_60/src/java/org/apache/commons/lang/text/StrBuilder.java",
        "span_end": 1673,
        "name": "contains",
        "start_line": 1671,
        "span_start": 1673,
        "bug_name": "Lang_60",
        "end_line": 1679
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Searches the string builder to find the first reference to the specified char.\n *\n * @param ch  the character to find\n * @param startIndex  the index to start at, invalid index rounded to edge\n * @return the first index of the character, or -1 if not found\n */\n",
        "file": "Lang_60/src/java/org/apache/commons/lang/text/StrBuilder.java",
        "span_end": 1730,
        "name": "indexOf",
        "start_line": 1724,
        "span_start": 1730,
        "bug_name": "Lang_60",
        "end_line": 1736
      }
    ]
  },
  "Lang_62": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Unescapes the entities in a <code>String</code>.</p>\n *\n * <p>For example, if you have called addEntity(&quot;foo&quot;, 0xA1),\n * unescape(&quot;&amp;foo;&quot;) will return &quot;\\u00A1&quot;</p>\n *\n * @param str The <code>String</code> to escape.\n * @return A new escaped <code>String</code>.\n */\n",
        "file": "Lang_62/src/java/org/apache/commons/lang/Entities.java",
        "span_end": 849,
        "name": "unescape",
        "start_line": 813,
        "span_start": 850,
        "bug_name": "Lang_62",
        "end_line": 873
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Unescapes the escaped entities in the <code>String</code> passed and\n * writes the result to the <code>Writer</code> passed.</p>\n *\n * @param writer The <code>Writer</code> to write the results to; assumed to be non-null.\n * @param string The <code>String</code> to write the results to; assumed to be non-null.\n * @throws IOException when <code>Writer</code> passed throws the exception from\n *                                       calls to the {@link Writer#write(int)} methods.\n *\n * @see #escape(String)\n * @see Writer\n */\n",
        "file": "Lang_62/src/java/org/apache/commons/lang/Entities.java",
        "span_end": 925,
        "name": "unescape",
        "start_line": 887,
        "span_start": 920,
        "bug_name": "Lang_62",
        "end_line": 953
      }
    ]
  },
  "Lang_63": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Formats the time gap as a string, using the specified format.\n * Padding the left hand side of numbers with zeroes is optional and\n * the timezone may be specified.\n *\n * @param startMillis  the start of the duration\n * @param endMillis  the end of the duration\n * @param format  the way in which to format the duration\n * @param padWithZeros whether to pad the left hand side of numbers with 0's\n * @param timezone the millis are defined in\n * @return the time as a String\n */\n",
        "file": "Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "span_end": 324,
        "name": "formatPeriod",
        "start_line": 262,
        "span_start": 306,
        "bug_name": "Lang_63",
        "end_line": 356
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Parses a classic date format string into Tokens\n *\n * @param format to parse\n * @return Token[] of tokens\n */\n",
        "file": "Lang_63/src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
        "span_end": 443,
        "name": "lexx",
        "start_line": 442,
        "span_start": 432,
        "bug_name": "Lang_63",
        "end_line": 496
      }
    ]
  },
  "Lang_64": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Tests for order.</p>\n *\n * <p>The default ordering is numeric by value, but this\n * can be overridden by subclasses.</p>\n *\n * <p>NOTE: From v2.2 the enums must be of the same type.\n * If the parameter is in a different class loader than this instance,\n * reflection is used to compare the values.</p>\n *\n * @see java.lang.Comparable#compareTo(Object)\n * @param other  the other object to compare to\n * @return -ve if this is less than the other object, +ve if greater than,\n *  <code>0</code> of equal\n * @throws ClassCastException if other is not an <code>Enum</code>\n * @throws NullPointerException if other is <code>null</code>\n */\n",
        "file": "Lang_64/src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "span_end": 182,
        "name": "compareTo",
        "start_line": 182,
        "span_start": 183,
        "bug_name": "Lang_64",
        "end_line": 194
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Tests for order.</p>\n *\n * <p>The default ordering is numeric by value, but this\n * can be overridden by subclasses.</p>\n *\n * <p>NOTE: From v2.2 the enums must be of the same type.\n * If the parameter is in a different class loader than this instance,\n * reflection is used to compare the values.</p>\n *\n * @see java.lang.Comparable#compareTo(Object)\n * @param other  the other object to compare to\n * @return -ve if this is less than the other object, +ve if greater than,\n *  <code>0</code> of equal\n * @throws ClassCastException if other is not an <code>Enum</code>\n * @throws NullPointerException if other is <code>null</code>\n */\n",
        "file": "Lang_64/src/java/org/apache/commons/lang/enums/ValuedEnum.java",
        "span_end": 194,
        "name": "compareTo",
        "start_line": 182,
        "span_start": 192,
        "bug_name": "Lang_64",
        "end_line": 194
      }
    ]
  },
  "Lang_65": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Internal calculation method.</p>\n *\n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\n",
        "file": "Lang_65/src/java/org/apache/commons/lang/time/DateUtils.java",
        "span_end": 623,
        "name": "modify",
        "start_line": 619,
        "span_start": 624,
        "bug_name": "Lang_65",
        "end_line": 743
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Internal calculation method.</p>\n *\n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\n",
        "file": "Lang_65/src/java/org/apache/commons/lang/time/DateUtils.java",
        "span_end": 638,
        "name": "modify",
        "start_line": 619,
        "span_start": 631,
        "bug_name": "Lang_65",
        "end_line": 743
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>Internal calculation method.</p>\n *\n * @param val  the calendar\n * @param field  the field constant\n * @param round  true to round, false to truncate\n * @throws ArithmeticException if the year is over 280 million\n */\n",
        "file": "Lang_65/src/java/org/apache/commons/lang/time/DateUtils.java",
        "span_end": 709,
        "name": "modify",
        "start_line": 619,
        "span_start": 709,
        "bug_name": "Lang_65",
        "end_line": 743
      }
    ]
  },
  "Math_1": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Create a fraction given the double value and either the maximum error\n * allowed or the maximum number of denominator digits.\n * <p>\n *\n * NOTE: This constructor is called with EITHER - a valid epsilon value and\n * the maxDenominator set to Integer.MAX_VALUE (that way the maxDenominator\n * has no effect). OR - a valid maxDenominator value and the epsilon value\n * set to zero (that way epsilon only has effect if there is an exact match\n * before the maxDenominator value is reached).\n * </p>\n * <p>\n *\n * It has been done this way so that the same code can be (re)used for both\n * scenarios. However this could be confusing to users if it were part of\n * the public API and this constructor should therefore remain PRIVATE.\n * </p>\n *\n * See JIRA issue ticket MATH-181 for more details:\n *\n * https://issues.apache.org/jira/browse/MATH-181\n *\n * @param value\n *            the double value to convert to a fraction.\n * @param epsilon\n *            maximum error allowed. The resulting fraction is within\n *            <code>epsilon</code> of <code>value</code>, in absolute terms.\n * @param maxDenominator\n *            maximum denominator value allowed.\n * @param maxIterations\n *            maximum number of convergents.\n * @throws FractionConversionException\n *             if the continued fraction failed to converge.\n */\n",
        "file": "Math_1/src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
        "span_end": 305,
        "name": "BigFraction",
        "start_line": 269,
        "span_start": 306,
        "bug_name": "Math_1",
        "end_line": 338
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Create a fraction given the double value and either the maximum error\n * allowed or the maximum number of denominator digits.\n * <p>\n *\n * NOTE: This constructor is called with EITHER\n *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n *     (that way the maxDenominator has no effect).\n * OR\n *   - a valid maxDenominator value and the epsilon value set to zero\n *     (that way epsilon only has effect if there is an exact match before\n *     the maxDenominator value is reached).\n * </p><p>\n *\n * It has been done this way so that the same code can be (re)used for both\n * scenarios. However this could be confusing to users if it were part of\n * the public API and this constructor should therefore remain PRIVATE.\n * </p>\n *\n * See JIRA issue ticket MATH-181 for more details:\n *\n *     https://issues.apache.org/jira/browse/MATH-181\n *\n * @param value the double value to convert to a fraction.\n * @param epsilon maximum error allowed.  The resulting fraction is within\n *        {@code epsilon} of {@code value}, in absolute terms.\n * @param maxDenominator maximum denominator value allowed.\n * @param maxIterations maximum number of convergents\n * @throws FractionConversionException if the continued fraction failed to\n *         converge.\n */\n",
        "file": "Math_1/src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "span_end": 214,
        "name": "Fraction",
        "start_line": 178,
        "span_start": 215,
        "bug_name": "Math_1",
        "end_line": 246
      }
    ]
  },
  "Math_4": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Get the intersection of the instance and another sub-line.\n * <p>\n * This method is related to the {@link Line#intersection(Line)\n * intersection} method in the {@link Line Line} class, but in addition\n * to compute the point along infinite lines, it also checks the point\n * lies on both sub-line ranges.\n * </p>\n * @param subLine other sub-line which may intersect instance\n * @param includeEndPoints if true, endpoints are considered to belong to\n * instance (i.e. they are closed sets) and may be returned, otherwise endpoints\n * are considered to not belong to instance (i.e. they are open sets) and intersection\n * occurring on endpoints lead to null being returned\n * @return the intersection point if there is one, null if the sub-lines don't intersect\n */\n",
        "file": "Math_4/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
        "span_end": 113,
        "name": "intersection",
        "start_line": 110,
        "span_start": 114,
        "bug_name": "Math_4",
        "end_line": 130
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Get the intersection of the instance and another sub-line.\n * <p>\n * This method is related to the {@link Line#intersection(Line)\n * intersection} method in the {@link Line Line} class, but in addition\n * to compute the point along infinite lines, it also checks the point\n * lies on both sub-line ranges.\n * </p>\n * @param subLine other sub-line which may intersect instance\n * @param includeEndPoints if true, endpoints are considered to belong to\n * instance (i.e. they are closed sets) and may be returned, otherwise endpoints\n * are considered to not belong to instance (i.e. they are open sets) and intersection\n * occurring on endpoints lead to null being returned\n * @return the intersection point if there is one, null if the sub-lines don't intersect\n */\n",
        "file": "Math_4/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java",
        "span_end": 117,
        "name": "intersection",
        "start_line": 110,
        "span_start": 118,
        "bug_name": "Math_4",
        "end_line": 134
      }
    ]
  },
  "Math_6": {
    "bug_count": 12,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * @param checker Convergence checker.\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java",
        "span_end": 51,
        "name": "BaseOptimizer",
        "start_line": 47,
        "span_start": 51,
        "bug_name": "Math_6",
        "end_line": 52
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
        "span_end": 489,
        "name": "doOptimize",
        "start_line": 283,
        "span_start": 489,
        "bug_name": "Math_6",
        "end_line": 534
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java",
        "span_end": 223,
        "name": "doOptimize",
        "start_line": 191,
        "span_start": 214,
        "bug_name": "Math_6",
        "end_line": 287
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java",
        "span_end": 277,
        "name": "doOptimize",
        "start_line": 191,
        "span_start": 277,
        "bug_name": "Math_6",
        "end_line": 287
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java",
        "span_end": 387,
        "name": "doOptimize",
        "start_line": 367,
        "span_start": 388,
        "bug_name": "Math_6",
        "end_line": 516
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java",
        "span_end": 193,
        "name": "doOptimize",
        "start_line": 172,
        "span_start": 191,
        "bug_name": "Math_6",
        "end_line": 267
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java",
        "span_end": 227,
        "name": "doOptimize",
        "start_line": 172,
        "span_start": 227,
        "bug_name": "Math_6",
        "end_line": 267
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java",
        "span_end": 158,
        "name": "doOptimize",
        "start_line": 126,
        "span_start": 158,
        "bug_name": "Math_6",
        "end_line": 177
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java",
        "span_end": 175,
        "name": "doOptimize",
        "start_line": 126,
        "span_start": 175,
        "bug_name": "Math_6",
        "end_line": 177
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java",
        "span_end": 108,
        "name": "doOptimize",
        "start_line": 79,
        "span_start": 106,
        "bug_name": "Math_6",
        "end_line": 168
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java",
        "span_end": 160,
        "name": "doOptimize",
        "start_line": 79,
        "span_start": 160,
        "bug_name": "Math_6",
        "end_line": 168
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_6/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
        "span_end": 325,
        "name": "doOptimize",
        "start_line": 283,
        "span_start": 322,
        "bug_name": "Math_6",
        "end_line": 534
      }
    ]
  },
  "Math_7": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Accept a step, triggering events and step handlers.\n * @param interpolator step interpolator\n * @param y state vector at step end time, must be reset if an event\n * asks for resetting or if an events stops integration during the step\n * @param yDot placeholder array where to put the time derivative of the state vector\n * @param tEnd final integration time\n * @return time at end of step\n * @exception MaxCountExceededException if the interpolator throws one because\n * the number of functions evaluations is exceeded\n * @exception NoBracketingException if the location of an event cannot be bracketed\n * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n * @since 2.2\n */\n",
        "file": "Math_7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
        "span_end": 347,
        "name": "acceptStep",
        "start_line": 296,
        "span_start": 346,
        "bug_name": "Math_7",
        "end_line": 404
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Accept a step, triggering events and step handlers.\n * @param interpolator step interpolator\n * @param y state vector at step end time, must be reset if an event\n * asks for resetting or if an events stops integration during the step\n * @param yDot placeholder array where to put the time derivative of the state vector\n * @param tEnd final integration time\n * @return time at end of step\n * @exception MaxCountExceededException if the interpolator throws one because\n * the number of functions evaluations is exceeded\n * @exception NoBracketingException if the location of an event cannot be bracketed\n * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n * @since 2.2\n */\n",
        "file": "Math_7/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
        "span_end": 372,
        "name": "acceptStep",
        "start_line": 296,
        "span_start": 357,
        "bug_name": "Math_7",
        "end_line": 404
      }
    ]
  },
  "Math_14": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Computes the square-root of the weight matrix.\n *\n * @param m Symmetric, positive-definite (weight) matrix.\n * @return the square-root of the weight matrix.\n */\n",
        "file": "Math_14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java",
        "span_end": 267,
        "name": "squareRoot",
        "start_line": 266,
        "span_start": 267,
        "bug_name": "Math_14",
        "end_line": 278
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Creates a diagonal weight matrix.\n *\n * @param weight List of the values of the diagonal.\n */\n",
        "file": "Math_14/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java",
        "span_end": 46,
        "name": "Weight",
        "start_line": 41,
        "span_start": 43,
        "bug_name": "Math_14",
        "end_line": 44
      }
    ]
  },
  "Math_15": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Power function.  Compute x^y.\n *\n * @param x   a double\n * @param y   a double\n * @return double\n */\n",
        "file": "Math_15/src/main/java/org/apache/commons/math3/util/FastMath.java",
        "span_end": 1541,
        "name": "pow",
        "start_line": 1442,
        "span_start": 1541,
        "bug_name": "Math_15",
        "end_line": 1600
      }
    ]
  },
  "Math_16": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Compute the hyperbolic cosine of a number.\n * @param x number on which evaluation is done\n * @return hyperbolic cosine of x\n */\n",
        "file": "Math_16/src/main/java/org/apache/commons/math3/util/FastMath.java",
        "span_end": 399,
        "name": "cosh",
        "start_line": 384,
        "span_start": 394,
        "bug_name": "Math_16",
        "end_line": 447
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Compute the hyperbolic sine of a number.\n * @param x number on which evaluation is done\n * @return hyperbolic sine of x\n */\n",
        "file": "Math_16/src/main/java/org/apache/commons/math3/util/FastMath.java",
        "span_end": 460,
        "name": "sinh",
        "start_line": 453,
        "span_start": 455,
        "bug_name": "Math_16",
        "end_line": 572
      }
    ]
  },
  "Math_18": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * @param x Original objective variables.\n * @return the normalized objective variables.\n */\n",
        "file": "Math_18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "span_end": 932,
        "name": "encode",
        "start_line": 925,
        "span_start": 932,
        "bug_name": "Math_18",
        "end_line": 935
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param x Normalized objective variables.\n * @return the original objective variables.\n */\n",
        "file": "Math_18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "span_end": 958,
        "name": "decode",
        "start_line": 951,
        "span_start": 958,
        "bug_name": "Math_18",
        "end_line": 961
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param x Normalized objective variables.\n * @return {@code true} if in bounds.\n */\n",
        "file": "Math_18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "span_end": 995,
        "name": "isFeasible",
        "start_line": 985,
        "span_start": 990,
        "bug_name": "Math_18",
        "end_line": 1002
      }
    ]
  },
  "Math_21": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Decompose a symmetric positive semidefinite matrix.\n *\n * @param matrix Symmetric positive semidefinite matrix.\n * @param small Diagonal elements threshold under which  column are\n * considered to be dependent on previous ones and are discarded.\n * @exception NonPositiveDefiniteMatrixException if the matrix is not\n * positive semidefinite.\n */\n",
        "file": "Math_21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
        "span_end": 69,
        "name": "RectangularCholeskyDecomposition",
        "start_line": 62,
        "span_start": 69,
        "bug_name": "Math_21",
        "end_line": 154
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Decompose a symmetric positive semidefinite matrix.\n *\n * @param matrix Symmetric positive semidefinite matrix.\n * @param small Diagonal elements threshold under which  column are\n * considered to be dependent on previous ones and are discarded.\n * @exception NonPositiveDefiniteMatrixException if the matrix is not\n * positive semidefinite.\n */\n",
        "file": "Math_21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
        "span_end": 93,
        "name": "RectangularCholeskyDecomposition",
        "start_line": 62,
        "span_start": 79,
        "bug_name": "Math_21",
        "end_line": 154
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Decompose a symmetric positive semidefinite matrix.\n *\n * @param matrix Symmetric positive semidefinite matrix.\n * @param small Diagonal elements threshold under which  column are\n * considered to be dependent on previous ones and are discarded.\n * @exception NonPositiveDefiniteMatrixException if the matrix is not\n * positive semidefinite.\n */\n",
        "file": "Math_21/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
        "span_end": 128,
        "name": "RectangularCholeskyDecomposition",
        "start_line": 62,
        "span_start": 124,
        "bug_name": "Math_21",
        "end_line": 154
      }
    ]
  },
  "Math_22": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_22/src/main/java/org/apache/commons/math3/distribution/FDistribution.java",
        "span_end": 275,
        "name": "isSupportLowerBoundInclusive",
        "start_line": 274,
        "span_start": 275,
        "bug_name": "Math_22",
        "end_line": 276
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_22/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java",
        "span_end": 184,
        "name": "isSupportUpperBoundInclusive",
        "start_line": 183,
        "span_start": 184,
        "bug_name": "Math_22",
        "end_line": 185
      }
    ]
  },
  "Math_23": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 150,
        "name": "doOptimize",
        "start_line": 114,
        "span_start": 151,
        "bug_name": "Math_23",
        "end_line": 288
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 237,
        "name": "doOptimize",
        "start_line": 114,
        "span_start": 234,
        "bug_name": "Math_23",
        "end_line": 288
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_23/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 276,
        "name": "doOptimize",
        "start_line": 114,
        "span_start": 274,
        "bug_name": "Math_23",
        "end_line": 288
      }
    ]
  },
  "Math_24": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 230,
        "name": "doOptimize",
        "start_line": 108,
        "span_start": 230,
        "bug_name": "Math_24",
        "end_line": 271
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
        "span_end": 267,
        "name": "doOptimize",
        "start_line": 108,
        "span_start": 267,
        "bug_name": "Math_24",
        "end_line": 271
      }
    ]
  },
  "Math_26": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Create a fraction given the double value and either the maximum error\n * allowed or the maximum number of denominator digits.\n * <p>\n *\n * NOTE: This constructor is called with EITHER\n *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n *     (that way the maxDenominator has no effect).\n * OR\n *   - a valid maxDenominator value and the epsilon value set to zero\n *     (that way epsilon only has effect if there is an exact match before\n *     the maxDenominator value is reached).\n * </p><p>\n *\n * It has been done this way so that the same code can be (re)used for both\n * scenarios. However this could be confusing to users if it were part of\n * the public API and this constructor should therefore remain PRIVATE.\n * </p>\n *\n * See JIRA issue ticket MATH-181 for more details:\n *\n *     https://issues.apache.org/jira/browse/MATH-181\n *\n * @param value the double value to convert to a fraction.\n * @param epsilon maximum error allowed.  The resulting fraction is within\n *        {@code epsilon} of {@code value}, in absolute terms.\n * @param maxDenominator maximum denominator value allowed.\n * @param maxIterations maximum number of convergents\n * @throws FractionConversionException if the continued fraction failed to\n *         converge.\n */\n",
        "file": "Math_26/src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "span_end": 181,
        "name": "Fraction",
        "start_line": 175,
        "span_start": 181,
        "bug_name": "Math_26",
        "end_line": 238
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Create a fraction given the double value and either the maximum error\n * allowed or the maximum number of denominator digits.\n * <p>\n *\n * NOTE: This constructor is called with EITHER\n *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n *     (that way the maxDenominator has no effect).\n * OR\n *   - a valid maxDenominator value and the epsilon value set to zero\n *     (that way epsilon only has effect if there is an exact match before\n *     the maxDenominator value is reached).\n * </p><p>\n *\n * It has been done this way so that the same code can be (re)used for both\n * scenarios. However this could be confusing to users if it were part of\n * the public API and this constructor should therefore remain PRIVATE.\n * </p>\n *\n * See JIRA issue ticket MATH-181 for more details:\n *\n *     https://issues.apache.org/jira/browse/MATH-181\n *\n * @param value the double value to convert to a fraction.\n * @param epsilon maximum error allowed.  The resulting fraction is within\n *        {@code epsilon} of {@code value}, in absolute terms.\n * @param maxDenominator maximum denominator value allowed.\n * @param maxIterations maximum number of convergents\n * @throws FractionConversionException if the continued fraction failed to\n *         converge.\n */\n",
        "file": "Math_26/src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "span_end": 209,
        "name": "Fraction",
        "start_line": 175,
        "span_start": 209,
        "bug_name": "Math_26",
        "end_line": 238
      }
    ]
  },
  "Math_28": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n * @param tableau simple tableau for the problem\n * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n * @return row with the minimum ratio\n */\n",
        "file": "Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "span_end": 118,
        "name": "getPivotRow",
        "start_line": 90,
        "span_start": 119,
        "bug_name": "Math_28",
        "end_line": 158
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n * @param tableau simple tableau for the problem\n * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n * @return row with the minimum ratio\n */\n",
        "file": "Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "span_end": 127,
        "name": "getPivotRow",
        "start_line": 90,
        "span_start": 128,
        "bug_name": "Math_28",
        "end_line": 158
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n * @param tableau simple tableau for the problem\n * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n * @return row with the minimum ratio\n */\n",
        "file": "Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "span_end": 137,
        "name": "getPivotRow",
        "start_line": 90,
        "span_start": 138,
        "bug_name": "Math_28",
        "end_line": 158
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the row with the minimum ratio as given by the minimum ratio test (MRT).\n * @param tableau simple tableau for the problem\n * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n * @return row with the minimum ratio\n */\n",
        "file": "Math_28/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "span_end": 151,
        "name": "getPivotRow",
        "start_line": 90,
        "span_start": 152,
        "bug_name": "Math_28",
        "end_line": 158
      }
    ]
  },
  "Math_29": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "span_end": 352,
        "name": "ebeDivide",
        "start_line": 340,
        "span_start": 349,
        "bug_name": "Math_29",
        "end_line": 354
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
        "span_end": 373,
        "name": "ebeMultiply",
        "start_line": 357,
        "span_start": 374,
        "bug_name": "Math_29",
        "end_line": 386
      }
    ]
  },
  "Math_31": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>\n * Evaluates the continued fraction at the value x.\n * </p>\n *\n * <p>\n * The implementation of this method is based on the modified Lentz algorithm as described\n * on page 18 ff. in:\n * <ul>\n * <li>\n *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n * </li>\n * </ul>\n * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n * </p>\n *\n * @param x the evaluation point.\n * @param epsilon maximum error allowed.\n * @param maxIterations maximum number of convergents\n * @return the value of the continued fraction evaluated at x.\n * @throws ConvergenceException if the algorithm fails to converge.\n */\n",
        "file": "Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "span_end": 135,
        "name": "evaluate",
        "start_line": 123,
        "span_start": 134,
        "bug_name": "Math_31",
        "end_line": 179
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>\n * Evaluates the continued fraction at the value x.\n * </p>\n *\n * <p>\n * The implementation of this method is based on the modified Lentz algorithm as described\n * on page 18 ff. in:\n * <ul>\n * <li>\n *   I. J. Thompson,  A. R. Barnett. \"Coulomb and Bessel Functions of Complex Arguments and Order.\"\n *   <a target=\"_blank\" href=\"http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf\">\n *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>\n * </li>\n * </ul>\n * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in\n * <a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">Continued Fraction / MathWorld</a>.\n * </p>\n *\n * @param x the evaluation point.\n * @param epsilon maximum error allowed.\n * @param maxIterations maximum number of convergents\n * @return the value of the continued fraction evaluated at x.\n * @throws ConvergenceException if the algorithm fails to converge.\n */\n",
        "file": "Math_31/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "span_end": 170,
        "name": "evaluate",
        "start_line": 123,
        "span_start": 143,
        "bug_name": "Math_31",
        "end_line": 179
      }
    ]
  },
  "Math_35": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Creates a new ElitisticListPopulation instance.\n *\n * @param chromosomes list of chromosomes in the population\n * @param populationLimit maximal size of the population\n * @param elitismRate how many best chromosomes will be directly transferred to the\n *                    next generation [in %]\n * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range\n */\n",
        "file": "Math_35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
        "span_end": 51,
        "name": "ElitisticListPopulation",
        "start_line": 47,
        "span_start": 51,
        "bug_name": "Math_35",
        "end_line": 52
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Creates a new ListPopulation instance and initializes its inner\n * chromosome list.\n *\n * @param populationLimit maximal size of the population\n * @param elitismRate how many best chromosomes will be directly transferred to the\n *                    next generation [in %]\n * @throws OutOfRangeException if the elitism rate is outside the [0, 1] range\n */\n",
        "file": "Math_35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
        "span_end": 65,
        "name": "ElitisticListPopulation",
        "start_line": 63,
        "span_start": 65,
        "bug_name": "Math_35",
        "end_line": 66
      }
    ]
  },
  "Math_36": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>\n * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n * the numerator divided by denominator.\n * </p>\n *\n * @return the fraction as a <tt>double</tt>\n * @see java.lang.Number#doubleValue()\n */\n",
        "file": "Math_36/src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "span_end": 687,
        "name": "doubleValue",
        "start_line": 683,
        "span_start": 686,
        "bug_name": "Math_36",
        "end_line": 695
      }
    ]
  },
  "Math_37": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Compute the\n * <a href=\"http://mathworld.wolfram.com/Tangent.html\" TARGET=\"_top\">\n * tangent</a> of this complex number.\n * Implements the formula:\n * <pre>\n *  <code>\n *   tan(a + bi) = sin(2a)/(cos(2a)+cosh(2b)) + [sinh(2b)/(cos(2a)+cosh(2b))]i\n *  </code>\n * </pre>\n * where the (real) functions on the right-hand side are\n * {@link FastMath#sin}, {@link FastMath#cos}, {@link FastMath#cosh} and\n * {@link FastMath#sinh}.\n * <br/>\n * Returns {@link Complex#NaN} if either real or imaginary part of the\n * input argument is {@code NaN}.\n * <br/>\n * Infinite (or critical) values in real or imaginary parts of the input may\n * result in infinite or NaN values returned in parts of the result.\n * <pre>\n *  Examples:\n *  <code>\n *   tan(a &plusmn; INFINITY i) = 0 &plusmn; i\n *   tan(&plusmn;INFINITY + bi) = NaN + NaN i\n *   tan(&plusmn;INFINITY &plusmn; INFINITY i) = NaN + NaN i\n *   tan(&plusmn;&pi;/2 + 0 i) = &plusmn;INFINITY + NaN i\n *  </code>\n * </pre>\n *\n * @return the tangent of {@code this}.\n * @since 1.2\n */\n",
        "file": "Math_37/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 1020,
        "name": "tan",
        "start_line": 1017,
        "span_start": 1018,
        "bug_name": "Math_37",
        "end_line": 1034
      }
    ]
  },
  "Math_38": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n *     SUBROUTINE PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,\n *     BMAT and ZMAT for the first iteration, and it maintains the values of\n *     NF and KOPT. The vector X is also changed by PRELIM.\n *\n *     The arguments N, NPT, X, XL, XU, RHOBEG, IPRINT and MAXFUN are the\n *       same as the corresponding arguments in SUBROUTINE BOBYQA.\n *     The arguments XBASE, XPT, FVAL, HQ, PQ, BMAT, ZMAT, NDIM, SL and SU\n *       are the same as the corresponding arguments in BOBYQB, the elements\n *       of SL and SU being set in BOBYQA.\n *     GOPT is usually the gradient of the quadratic model at XOPT+XBASE, but\n *       it is set by PRELIM to the gradient of the quadratic model at XBASE.\n *       If XOPT is nonzero, BOBYQB will change it to its usual value later.\n *     NF is maintaned as the number of calls of CALFUN so far.\n *     KOPT will be such that the least calculated value of F so far is at\n *       the point XPT(KOPT,.)+XBASE in the space of the variables.\n *\n * @param lowerBound Lower bounds.\n * @param upperBound Upper bounds.\n */\n",
        "file": "Math_38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "span_end": 1663,
        "name": "prelim",
        "start_line": 1582,
        "span_start": 1660,
        "bug_name": "Math_38",
        "end_line": 1755
      },
      {
        "member_type": "method",
        "javadoc": "/**\n *     SUBROUTINE PRELIM sets the elements of XBASE, XPT, FVAL, GOPT, HQ, PQ,\n *     BMAT and ZMAT for the first iteration, and it maintains the values of\n *     NF and KOPT. The vector X is also changed by PRELIM.\n *\n *     The arguments N, NPT, X, XL, XU, RHOBEG, IPRINT and MAXFUN are the\n *       same as the corresponding arguments in SUBROUTINE BOBYQA.\n *     The arguments XBASE, XPT, FVAL, HQ, PQ, BMAT, ZMAT, NDIM, SL and SU\n *       are the same as the corresponding arguments in BOBYQB, the elements\n *       of SL and SU being set in BOBYQA.\n *     GOPT is usually the gradient of the quadratic model at XOPT+XBASE, but\n *       it is set by PRELIM to the gradient of the quadratic model at XBASE.\n *       If XOPT is nonzero, BOBYQB will change it to its usual value later.\n *     NF is maintaned as the number of calls of CALFUN so far.\n *     KOPT will be such that the least calculated value of F so far is at\n *       the point XPT(KOPT,.)+XBASE in the space of the variables.\n *\n * @param lowerBound Lower bounds.\n * @param upperBound Upper bounds.\n */\n",
        "file": "Math_38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java",
        "span_end": 1752,
        "name": "prelim",
        "start_line": 1582,
        "span_start": 1752,
        "bug_name": "Math_38",
        "end_line": 1755
      }
    ]
  },
  "Math_44": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Accept a step, triggering events and step handlers.\n * @param interpolator step interpolator\n * @param y state vector at step end time, must be reset if an event\n * asks for resetting or if an events stops integration during the step\n * @param yDot placeholder array where to put the time derivative of the state vector\n * @param tEnd final integration time\n * @return time at end of step\n * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n * @since 2.2\n */\n",
        "file": "Math_44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "span_end": 280,
        "name": "acceptStep",
        "start_line": 274,
        "span_start": 280,
        "bug_name": "Math_44",
        "end_line": 379
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Accept a step, triggering events and step handlers.\n * @param interpolator step interpolator\n * @param y state vector at step end time, must be reset if an event\n * asks for resetting or if an events stops integration during the step\n * @param yDot placeholder array where to put the time derivative of the state vector\n * @param tEnd final integration time\n * @return time at end of step\n * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n * @since 2.2\n */\n",
        "file": "Math_44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "span_end": 333,
        "name": "acceptStep",
        "start_line": 274,
        "span_start": 334,
        "bug_name": "Math_44",
        "end_line": 379
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Accept a step, triggering events and step handlers.\n * @param interpolator step interpolator\n * @param y state vector at step end time, must be reset if an event\n * asks for resetting or if an events stops integration during the step\n * @param yDot placeholder array where to put the time derivative of the state vector\n * @param tEnd final integration time\n * @return time at end of step\n * @exception MathIllegalStateException if the value of one event state cannot be evaluated\n * @since 2.2\n */\n",
        "file": "Math_44/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
        "span_end": 342,
        "name": "acceptStep",
        "start_line": 274,
        "span_start": 343,
        "bug_name": "Math_44",
        "end_line": 379
      }
    ]
  },
  "Math_46": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns a {@code Complex} whose value is\n * {@code (this / divisor)}.\n * Implements the definitional formula\n * <pre>\n *  <code>\n *    a + bi          ac + bd + (bc - ad)i\n *    ----------- = -------------------------\n *    c + di         c<sup>2</sup> + d<sup>2</sup>\n *  </code>\n * </pre>\n * but uses\n * <a href=\"http://doi.acm.org/10.1145/1039813.1039814\">\n * prescaling of operands</a> to limit the effects of overflows and\n * underflows in the computation.\n * <br/>\n * {@code Infinite} and {@code NaN} values are handled according to the\n * following rules, applied in the order presented:\n * <ul>\n *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n *   in either part, {@link #NaN} is returned.\n *  </li>\n *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n *   {@link #NaN} is returned.\n *  </li>\n *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n *  </li>\n *  <li>If {@code this} and {@code divisor} are both infinite,\n *   {@link #NaN} is returned.\n *  </li>\n *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or\n *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n *   infinite), {@link #ZERO} is returned.\n *  </li>\n *  <li>If {@code this} is infinite and {@code divisor} is finite,\n *   {@code NaN} values are returned in the parts of the result if the\n *   {@link java.lang.Double} rules applied to the definitional formula\n *   force {@code NaN} results.\n *  </li>\n * </ul>\n *\n * @param divisor Value by which this {@code Complex} is to be divided.\n * @return {@code this / divisor}.\n * @throws NullArgumentException if {@code divisor} is {@code null}.\n */\n",
        "file": "Math_46/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 260,
        "name": "divide",
        "start_line": 251,
        "span_start": 260,
        "bug_name": "Math_46",
        "end_line": 281
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns a {@code Complex} whose value is {@code (this / divisor)},\n * with {@code divisor} interpreted as a real number.\n *\n * @param  divisor Value by which this {@code Complex} is to be divided.\n * @return {@code this / divisor}.\n * @see #divide(Complex)\n */\n",
        "file": "Math_46/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 297,
        "name": "divide",
        "start_line": 291,
        "span_start": 297,
        "bug_name": "Math_46",
        "end_line": 304
      }
    ]
  },
  "Math_47": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Create a complex number given the real and imaginary parts.\n *\n * @param real Real part.\n * @param imaginary Imaginary part.\n */\n",
        "file": "Math_47/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 104,
        "name": "Complex",
        "start_line": 99,
        "span_start": 105,
        "bug_name": "Math_47",
        "end_line": 107
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns a {@code Complex} whose value is\n * {@code (this / divisor)}.\n * Implements the definitional formula\n * <pre>\n *  <code>\n *    a + bi          ac + bd + (bc - ad)i\n *    ----------- = -------------------------\n *    c + di         c<sup>2</sup> + d<sup>2</sup>\n *  </code>\n * </pre>\n * but uses\n * <a href=\"http://doi.acm.org/10.1145/1039813.1039814\">\n * prescaling of operands</a> to limit the effects of overflows and\n * underflows in the computation.\n * <br/>\n * {@code Infinite} and {@code NaN} values are handled according to the\n * following rules, applied in the order presented:\n * <ul>\n *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n *   in either part, {@link #NaN} is returned.\n *  </li>\n *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n *   {@link #NaN} is returned.\n *  </li>\n *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n *  </li>\n *  <li>If {@code this} and {@code divisor} are both infinite,\n *   {@link #NaN} is returned.\n *  </li>\n *  <li>If {@code this} is finite (i.e., has no {@code Infinite} or\n *   {@code NaN} parts) and {@code divisor} is infinite (one or both parts\n *   infinite), {@link #ZERO} is returned.\n *  </li>\n *  <li>If {@code this} is infinite and {@code divisor} is finite,\n *   {@code NaN} values are returned in the parts of the result if the\n *   {@link java.lang.Double} rules applied to the definitional formula\n *   force {@code NaN} results.\n *  </li>\n * </ul>\n *\n * @param divisor Value by which this {@code Complex} is to be divided.\n * @return {@code this / divisor}.\n * @throws NullArgumentException if {@code divisor} is {@code null}.\n */\n",
        "file": "Math_47/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 257,
        "name": "divide",
        "start_line": 251,
        "span_start": 256,
        "bug_name": "Math_47",
        "end_line": 280
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns a {@code Complex} whose value is {@code (this / divisor)},\n * with {@code divisor} interpreted as a real number.\n *\n * @param  divisor Value by which this {@code Complex} is to be divided.\n * @return {@code this / divisor}.\n * @see #divide(Complex)\n */\n",
        "file": "Math_47/src/main/java/org/apache/commons/math/complex/Complex.java",
        "span_end": 293,
        "name": "divide",
        "start_line": 290,
        "span_start": 293,
        "bug_name": "Math_47",
        "end_line": 302
      }
    ]
  },
  "Math_49": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 345,
        "name": "ebeDivide",
        "start_line": 342,
        "span_start": 345,
        "bug_name": "Math_49",
        "end_line": 351
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 358,
        "name": "ebeDivide",
        "start_line": 354,
        "span_start": 358,
        "bug_name": "Math_49",
        "end_line": 364
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 370,
        "name": "ebeMultiply",
        "start_line": 367,
        "span_start": 370,
        "bug_name": "Math_49",
        "end_line": 376
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 383,
        "name": "ebeMultiply",
        "start_line": 379,
        "span_start": 383,
        "bug_name": "Math_49",
        "end_line": 389
      }
    ]
  },
  "Math_52": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Build the rotation that transforms a pair of vector into another pair.\n *\n * <p>Except for possible scale factors, if the instance were applied to\n * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n * (v<sub>1</sub>, v<sub>2</sub>).</p>\n *\n * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n * not the same as the angular separation between v<sub>1</sub> and\n * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n * v<sub>2</sub>) plane.</p>\n *\n * @param u1 first vector of the origin pair\n * @param u2 second vector of the origin pair\n * @param v1 desired image of u1 by the rotation\n * @param v2 desired image of u2 by the rotation\n * @exception IllegalArgumentException if the norm of one of the vectors is zero\n */\n",
        "file": "Math_52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java",
        "span_end": 344,
        "name": "Rotation",
        "start_line": 313,
        "span_start": 344,
        "bug_name": "Math_52",
        "end_line": 391
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Build the rotation that transforms a pair of vector into another pair.\n *\n * <p>Except for possible scale factors, if the instance were applied to\n * the pair (u<sub>1</sub>, u<sub>2</sub>) it will produce the pair\n * (v<sub>1</sub>, v<sub>2</sub>).</p>\n *\n * <p>If the angular separation between u<sub>1</sub> and u<sub>2</sub> is\n * not the same as the angular separation between v<sub>1</sub> and\n * v<sub>2</sub>, then a corrected v'<sub>2</sub> will be used rather than\n * v<sub>2</sub>, the corrected vector will be in the (v<sub>1</sub>,\n * v<sub>2</sub>) plane.</p>\n *\n * @param u1 first vector of the origin pair\n * @param u2 second vector of the origin pair\n * @param v1 desired image of u1 by the rotation\n * @param v2 desired image of u2 by the rotation\n * @exception IllegalArgumentException if the norm of one of the vectors is zero\n */\n",
        "file": "Math_52/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java",
        "span_end": 359,
        "name": "Rotation",
        "start_line": 313,
        "span_start": 353,
        "bug_name": "Math_52",
        "end_line": 391
      }
    ]
  },
  "Math_54": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Create an instance from a double value.\n * @param field field to which this instance belongs\n * @param x value to convert to an instance\n */\n",
        "file": "Math_54/src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "span_end": 272,
        "name": "Dfp",
        "start_line": 256,
        "span_start": 273,
        "bug_name": "Math_54",
        "end_line": 317
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Convert the instance into a double.\n * @return a double approximating the instance\n * @see #toSplitDouble()\n */\n",
        "file": "Math_54/src/main/java/org/apache/commons/math/dfp/Dfp.java",
        "span_end": 2319,
        "name": "toDouble",
        "start_line": 2306,
        "span_start": 2319,
        "bug_name": "Math_54",
        "end_line": 2390
      }
    ]
  },
  "Math_55": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\n",
        "file": "Math_55/src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "span_end": 461,
        "name": "crossProduct",
        "start_line": 457,
        "span_start": 459,
        "bug_name": "Math_55",
        "end_line": 492
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Compute the cross-product of two vectors.\n * @param v1 first vector\n * @param v2 second vector\n * @return the cross product v1 ^ v2 as a new Vector\n */\n",
        "file": "Math_55/src/main/java/org/apache/commons/math/geometry/Vector3D.java",
        "span_end": 473,
        "name": "crossProduct",
        "start_line": 457,
        "span_start": 470,
        "bug_name": "Math_55",
        "end_line": 492
      }
    ]
  },
  "Math_61": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Create a new Poisson distribution with the given mean, convergence criterion\n * and maximum number of iterations.\n *\n * @param p the Poisson mean\n * @param epsilon the convergence criteria for cumulative probabilites\n * @param maxIterations the maximum number of iterations for cumulative probabilites\n * @since 2.1\n */\n",
        "file": "Math_61/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
        "span_end": 94,
        "name": "PoissonDistributionImpl",
        "start_line": 92,
        "span_start": 94,
        "bug_name": "Math_61",
        "end_line": 100
      }
    ]
  },
  "Math_62": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_62/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java",
        "span_end": 146,
        "name": "optimize",
        "start_line": 142,
        "span_start": 146,
        "bug_name": "Math_62",
        "end_line": 147
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_62/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java",
        "span_end": 162,
        "name": "optimize",
        "start_line": 150,
        "span_start": 160,
        "bug_name": "Math_62",
        "end_line": 182
      }
    ]
  },
  "Math_64": {
    "bug_count": 10,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 257,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 258,
        "bug_name": "Math_64",
        "end_line": 478
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 269,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 270,
        "bug_name": "Math_64",
        "end_line": 478
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 278,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 278,
        "bug_name": "Math_64",
        "end_line": 478
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 316,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 316,
        "bug_name": "Math_64",
        "end_line": 478
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 323,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 324,
        "bug_name": "Math_64",
        "end_line": 478
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 346,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 344,
        "bug_name": "Math_64",
        "end_line": 478
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 365,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 365,
        "bug_name": "Math_64",
        "end_line": 478
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 423,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 421,
        "bug_name": "Math_64",
        "end_line": 478
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 433,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 434,
        "bug_name": "Math_64",
        "end_line": 478
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 445,
        "name": "doOptimize",
        "start_line": 240,
        "span_start": 442,
        "bug_name": "Math_64",
        "end_line": 478
      }
    ]
  },
  "Math_65": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Get the Root Mean Square value.\n * Get the Root Mean Square value, i.e. the root of the arithmetic\n * mean of the square of all weighted residuals. This is related to the\n * criterion that is minimized by the optimizer as follows: if\n * <em>c</em> if the criterion, and <em>n</em> is the number of\n * measurements, then the RMS is <em>sqrt (c/n)</em>.\n *\n * @return RMS value\n */\n",
        "file": "Math_65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "span_end": 245,
        "name": "getRMS",
        "start_line": 239,
        "span_start": 240,
        "bug_name": "Math_65",
        "end_line": 241
      }
    ]
  },
  "Math_66": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Construct a solver.\n */\n",
        "file": "Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 47,
        "name": "BrentOptimizer",
        "start_line": 43,
        "span_start": 44,
        "bug_name": "Math_66",
        "end_line": 48
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Perform the optimization.\n *\n * @return the optimum.\n */\n",
        "file": "Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 67,
        "name": "doOptimize",
        "start_line": 55,
        "span_start": 57,
        "bug_name": "Math_66",
        "end_line": 60
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Find the minimum of the function within the interval {@code (lo, hi)}.\n *\n * If the function is defined on the interval {@code (lo, hi)}, then\n * this method finds an approximation {@code x} to the point at which\n * the function attains its minimum.<br/>\n * {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t}\n * and the function is never evaluated at two points closer together than\n * {@code tol}. {@code eps} should be no smaller than <em>2 macheps</em> and\n * preferable not much less than <em>sqrt(macheps)</em>, where\n * <em>macheps</em> is the relative machine precision. {@code t} should be\n * positive.\n * @param isMinim {@code true} when minimizing the function.\n * @param lo Lower bound of the interval.\n * @param mid Point inside the interval {@code [lo, hi]}.\n * @param hi Higher bound of the interval.\n * @param eps Relative accuracy.\n * @param t Absolute accuracy.\n * @return the optimum point.\n * @throws MaxIterationsExceededException if the maximum iteration count\n * is exceeded.\n * @throws FunctionEvaluationException if an error occurs evaluating\n * the function.\n */\n",
        "file": "Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 95,
        "name": "localMin",
        "start_line": 86,
        "span_start": 94,
        "bug_name": "Math_66",
        "end_line": 233
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Find the minimum of the function within the interval {@code (lo, hi)}.\n *\n * If the function is defined on the interval {@code (lo, hi)}, then\n * this method finds an approximation {@code x} to the point at which\n * the function attains its minimum.<br/>\n * {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t}\n * and the function is never evaluated at two points closer together than\n * {@code tol}. {@code eps} should be no smaller than <em>2 macheps</em> and\n * preferable not much less than <em>sqrt(macheps)</em>, where\n * <em>macheps</em> is the relative machine precision. {@code t} should be\n * positive.\n * @param isMinim {@code true} when minimizing the function.\n * @param lo Lower bound of the interval.\n * @param mid Point inside the interval {@code [lo, hi]}.\n * @param hi Higher bound of the interval.\n * @param eps Relative accuracy.\n * @param t Absolute accuracy.\n * @return the optimum point.\n * @throws MaxIterationsExceededException if the maximum iteration count\n * is exceeded.\n * @throws FunctionEvaluationException if an error occurs evaluating\n * the function.\n */\n",
        "file": "Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 127,
        "name": "localMin",
        "start_line": 86,
        "span_start": 119,
        "bug_name": "Math_66",
        "end_line": 233
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Find the minimum of the function within the interval {@code (lo, hi)}.\n *\n * If the function is defined on the interval {@code (lo, hi)}, then\n * this method finds an approximation {@code x} to the point at which\n * the function attains its minimum.<br/>\n * {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t}\n * and the function is never evaluated at two points closer together than\n * {@code tol}. {@code eps} should be no smaller than <em>2 macheps</em> and\n * preferable not much less than <em>sqrt(macheps)</em>, where\n * <em>macheps</em> is the relative machine precision. {@code t} should be\n * positive.\n * @param isMinim {@code true} when minimizing the function.\n * @param lo Lower bound of the interval.\n * @param mid Point inside the interval {@code [lo, hi]}.\n * @param hi Higher bound of the interval.\n * @param eps Relative accuracy.\n * @param t Absolute accuracy.\n * @return the optimum point.\n * @throws MaxIterationsExceededException if the maximum iteration count\n * is exceeded.\n * @throws FunctionEvaluationException if an error occurs evaluating\n * the function.\n */\n",
        "file": "Math_66/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
        "span_end": 201,
        "name": "localMin",
        "start_line": 86,
        "span_start": 200,
        "bug_name": "Math_66",
        "end_line": 233
      }
    ]
  },
  "Math_68": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Build an optimizer for least squares problems.\n * <p>The default values for the algorithm settings are:\n *   <ul>\n *    <li>{@link #setConvergenceChecker vectorial convergence checker}: null</li>\n *    <li>{@link #setInitialStepBoundFactor initial step bound factor}: 100.0</li>\n *    <li>{@link #setMaxIterations maximal iterations}: 1000</li>\n *    <li>{@link #setCostRelativeTolerance cost relative tolerance}: 1.0e-10</li>\n *    <li>{@link #setParRelativeTolerance parameters relative tolerance}: 1.0e-10</li>\n *    <li>{@link #setOrthoTolerance orthogonality tolerance}: 1.0e-10</li>\n *   </ul>\n * </p>\n * <p>These default values may be overridden after construction. If the {@link\n * #setConvergenceChecker vectorial convergence checker} is set to a non-null value, it\n * will be used instead of the {@link #setCostRelativeTolerance cost relative tolerance}\n * and {@link #setParRelativeTolerance parameters relative tolerance} settings.\n */\n",
        "file": "Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 165,
        "name": "LevenbergMarquardtOptimizer",
        "start_line": 160,
        "span_start": 166,
        "bug_name": "Math_68",
        "end_line": 172
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 251,
        "name": "doOptimize",
        "start_line": 220,
        "span_start": 247,
        "bug_name": "Math_68",
        "end_line": 454
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 303,
        "name": "doOptimize",
        "start_line": 220,
        "span_start": 303,
        "bug_name": "Math_68",
        "end_line": 454
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 344,
        "name": "doOptimize",
        "start_line": 220,
        "span_start": 345,
        "bug_name": "Math_68",
        "end_line": 454
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_68/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "span_end": 420,
        "name": "doOptimize",
        "start_line": 220,
        "span_start": 413,
        "bug_name": "Math_68",
        "end_line": 454
      }
    ]
  },
  "Math_71": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "span_end": 299,
        "name": "integrate",
        "start_line": 191,
        "span_start": 300,
        "bug_name": "Math_71",
        "end_line": 370
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
        "span_end": 179,
        "name": "integrate",
        "start_line": 95,
        "span_start": 180,
        "bug_name": "Math_71",
        "end_line": 223
      }
    ]
  },
  "Math_72": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Find a zero in the given interval with an initial guess.\n * <p>Throws <code>IllegalArgumentException</code> if the values of the\n * function at the three points have the same sign (note that it is\n * allowed to have endpoints with the same sign if the initial point has\n * opposite sign function-wise).</p>\n *\n * @param f function to solve.\n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @param initial the start value to use (must be set to min if no\n * initial point is known).\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException the maximum iteration count\n * is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating\n *  the function\n * @throws IllegalArgumentException if initial is not between min and max\n * (even if it <em>is</em> a root)\n */\n",
        "file": "Math_72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
        "span_end": 115,
        "name": "solve",
        "start_line": 98,
        "span_start": 115,
        "bug_name": "Math_72",
        "end_line": 144
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Find a zero in the given interval with an initial guess.\n * <p>Throws <code>IllegalArgumentException</code> if the values of the\n * function at the three points have the same sign (note that it is\n * allowed to have endpoints with the same sign if the initial point has\n * opposite sign function-wise).</p>\n *\n * @param f function to solve.\n * @param min the lower bound for the interval.\n * @param max the upper bound for the interval.\n * @param initial the start value to use (must be set to min if no\n * initial point is known).\n * @return the value where the function is zero\n * @throws MaxIterationsExceededException the maximum iteration count\n * is exceeded\n * @throws FunctionEvaluationException if an error occurs evaluating\n *  the function\n * @throws IllegalArgumentException if initial is not between min and max\n * (even if it <em>is</em> a root)\n */\n",
        "file": "Math_72/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
        "span_end": 127,
        "name": "solve",
        "start_line": 98,
        "span_start": 127,
        "bug_name": "Math_72",
        "end_line": 144
      }
    ]
  },
  "Math_76": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_76/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "span_end": 179,
        "name": "getU",
        "start_line": 153,
        "span_start": 162,
        "bug_name": "Math_76",
        "end_line": 201
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_76/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java",
        "span_end": 264,
        "name": "getV",
        "start_line": 236,
        "span_start": 248,
        "bug_name": "Math_76",
        "end_line": 283
      }
    ]
  },
  "Math_77": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_77/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
        "span_end": 721,
        "name": "getLInfNorm",
        "start_line": 717,
        "span_start": 721,
        "bug_name": "Math_77",
        "end_line": 724
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Optimized method to compute LInfDistance.\n * @param v The vector to compute from\n * @return the LInfDistance\n */\n",
        "file": "Math_77/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
        "span_end": 506,
        "name": "getLInfDistance",
        "start_line": 503,
        "span_start": 498,
        "bug_name": "Math_77",
        "end_line": 524
      }
    ]
  },
  "Math_78": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Evaluate the impact of the proposed step on the event handler.\n * @param interpolator step interpolator for the proposed step\n * @return true if the event handler triggers an event before\n * the end of the proposed step (this implies the step should be\n * rejected)\n * @exception DerivativeException if the interpolator fails to\n * compute the switching function somewhere within the step\n * @exception EventException if the switching function\n * cannot be evaluated\n * @exception ConvergenceException if an event cannot be located\n */\n",
        "file": "Math_78/src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "span_end": 190,
        "name": "evaluateStep",
        "start_line": 167,
        "span_start": 191,
        "bug_name": "Math_78",
        "end_line": 274
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Evaluate the impact of the proposed step on the event handler.\n * @param interpolator step interpolator for the proposed step\n * @return true if the event handler triggers an event before\n * the end of the proposed step (this implies the step should be\n * rejected)\n * @exception DerivativeException if the interpolator fails to\n * compute the switching function somewhere within the step\n * @exception EventException if the switching function\n * cannot be evaluated\n * @exception ConvergenceException if an event cannot be located\n */\n",
        "file": "Math_78/src/main/java/org/apache/commons/math/ode/events/EventState.java",
        "span_end": 198,
        "name": "evaluateStep",
        "start_line": 167,
        "span_start": 198,
        "bug_name": "Math_78",
        "end_line": 274
      }
    ]
  },
  "Math_81": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Compute the Gershgorin circles for all rows.\n */\n",
        "file": "Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "span_end": 602,
        "name": "computeGershgorinCircles",
        "start_line": 569,
        "span_start": 603,
        "bug_name": "Math_81",
        "end_line": 606
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Find realEigenvalues using dqd/dqds algorithms.\n * <p>This implementation is based on Beresford N. Parlett\n * and Osni A. Marques paper <a\n * href=\"http://www.netlib.org/lapack/lawnspdf/lawn155.pdf\">An\n * Implementation of the dqds Algorithm (Positive Case)</a> and on the\n * corresponding LAPACK routine DLASQ2.</p>\n * @param n number of rows of the block\n * @exception InvalidMatrixException if block cannot be diagonalized\n * after 30 * n iterations\n */\n",
        "file": "Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "span_end": 906,
        "name": "processGeneralBlock",
        "start_line": 823,
        "span_start": 905,
        "bug_name": "Math_81",
        "end_line": 929
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Compute the shift increment as an estimate of the smallest eigenvalue.\n * <p>This implementation is a translation of the LAPACK routine DLAZQ4.</p>\n * @param start start index\n * @param end end index\n * @param deflated number of realEigenvalues just deflated\n */\n",
        "file": "Math_81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "span_end": 1543,
        "name": "computeShiftIncrement",
        "start_line": 1431,
        "span_start": 1543,
        "bug_name": "Math_81",
        "end_line": 1673
      }
    ]
  },
  "Math_83": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Checks whether the given column is basic.\n * @param col index of the column to check\n * @return the row that the variable is basic in.  null if the column is not basic\n */\n",
        "file": "Math_83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "span_end": 292,
        "name": "getBasicRow",
        "start_line": 290,
        "span_start": 292,
        "bug_name": "Math_83",
        "end_line": 301
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Get the current solution.\n *\n * @return current solution\n */\n",
        "file": "Math_83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "span_end": 345,
        "name": "getSolution",
        "start_line": 339,
        "span_start": 341,
        "bug_name": "Math_83",
        "end_line": 358
      }
    ]
  },
  "Math_84": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "span_end": 63,
        "name": "iterateSimplex",
        "start_line": 60,
        "span_start": 64,
        "bug_name": "Math_84",
        "end_line": 108
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * {@inheritDoc}\n */\n",
        "file": "Math_84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
        "span_end": 93,
        "name": "iterateSimplex",
        "start_line": 60,
        "span_start": 92,
        "bug_name": "Math_84",
        "end_line": 108
      }
    ]
  },
  "Math_86": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Calculates the Cholesky decomposition of the given matrix.\n * @param matrix the matrix to decompose\n * @param relativeSymmetryThreshold threshold above which off-diagonal\n * elements are considered too different and matrix not symmetric\n * @param absolutePositivityThreshold threshold below which diagonal\n * elements are considered null and matrix not positive definite\n * @exception NonSquareMatrixException if matrix is not square\n * @exception NotSymmetricMatrixException if matrix is not symmetric\n * @exception NotPositiveDefiniteMatrixException if the matrix is not\n * strictly positive definite\n * @see #CholeskyDecompositionImpl(RealMatrix)\n * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n */\n",
        "file": "Math_86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "span_end": 116,
        "name": "CholeskyDecompositionImpl",
        "start_line": 93,
        "span_start": 114,
        "bug_name": "Math_86",
        "end_line": 151
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Calculates the Cholesky decomposition of the given matrix.\n * @param matrix the matrix to decompose\n * @param relativeSymmetryThreshold threshold above which off-diagonal\n * elements are considered too different and matrix not symmetric\n * @param absolutePositivityThreshold threshold below which diagonal\n * elements are considered null and matrix not positive definite\n * @exception NonSquareMatrixException if matrix is not square\n * @exception NotSymmetricMatrixException if matrix is not symmetric\n * @exception NotPositiveDefiniteMatrixException if the matrix is not\n * strictly positive definite\n * @see #CholeskyDecompositionImpl(RealMatrix)\n * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n */\n",
        "file": "Math_86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java",
        "span_end": 136,
        "name": "CholeskyDecompositionImpl",
        "start_line": 93,
        "span_start": 137,
        "bug_name": "Math_86",
        "end_line": 151
      }
    ]
  },
  "Math_90": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Adds 1 to the frequency count for v.\n * <p>\n * If other objects have already been added to this Frequency, v must\n * be comparable to those that have already been added.\n * </p>\n *\n * @param v the value to add.\n * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n * @throws ClassCastException if <code>v</code> is not Comparable\n * @deprecated use {@link #addValue(Comparable)} instead\n */\n",
        "file": "Math_90/src/java/org/apache/commons/math/stat/Frequency.java",
        "span_end": 109,
        "name": "addValue",
        "start_line": 108,
        "span_start": 110,
        "bug_name": "Math_90",
        "end_line": 111
      }
    ]
  },
  "Math_92": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns an exact representation of the <a\n * href=\"http://mathworld.wolfram.com/BinomialCoefficient.html\"> Binomial\n * Coefficient</a>, \"<code>n choose k</code>\", the number of\n * <code>k</code>-element subsets that can be selected from an\n * <code>n</code>-element set.\n * <p>\n * <Strong>Preconditions</strong>:\n * <ul>\n * <li> <code>0 <= k <= n </code> (otherwise\n * <code>IllegalArgumentException</code> is thrown)</li>\n * <li> The result is small enough to fit into a <code>long</code>. The\n * largest value of <code>n</code> for which all coefficients are\n * <code> < Long.MAX_VALUE</code> is 66. If the computed value exceeds\n * <code>Long.MAX_VALUE</code> an <code>ArithMeticException</code> is\n * thrown.</li>\n * </ul></p>\n *\n * @param n the size of the set\n * @param k the size of the subsets to be counted\n * @return <code>n choose k</code>\n * @throws IllegalArgumentException if preconditions are not met.\n * @throws ArithmeticException if the result is too large to be represented\n *         by a long integer.\n */\n",
        "file": "Math_92/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 207,
        "name": "binomialCoefficient",
        "start_line": 169,
        "span_start": 184,
        "bug_name": "Math_92",
        "end_line": 222
      }
    ]
  },
  "Math_93": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns n!. Shorthand for <code>n</code> <a\n * href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the\n * product of the numbers <code>1,...,n</code>.\n * <p>\n * <Strong>Preconditions</strong>:\n * <ul>\n * <li> <code>n >= 0</code> (otherwise\n * <code>IllegalArgumentException</code> is thrown)</li>\n * <li> The result is small enough to fit into a <code>long</code>. The\n * largest value of <code>n</code> for which <code>n!</code> <\n * Long.MAX_VALUE</code> is 20. If the computed value exceeds <code>Long.MAX_VALUE</code>\n * an <code>ArithMeticException </code> is thrown.</li>\n * </ul>\n * </p>\n *\n * @param n argument\n * @return <code>n!</code>\n * @throws ArithmeticException if the result is too large to be represented\n *         by a long integer.\n * @throws IllegalArgumentException if n < 0\n */\n",
        "file": "Math_93/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 346,
        "name": "factorial",
        "start_line": 344,
        "span_start": 345,
        "bug_name": "Math_93",
        "end_line": 353
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns n!. Shorthand for <code>n</code> <a\n * href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the\n * product of the numbers <code>1,...,n</code> as a <code>double</code>.\n * <p>\n * <Strong>Preconditions</strong>:\n * <ul>\n * <li> <code>n >= 0</code> (otherwise\n * <code>IllegalArgumentException</code> is thrown)</li>\n * <li> The result is small enough to fit into a <code>double</code>. The\n * largest value of <code>n</code> for which <code>n!</code> <\n * Double.MAX_VALUE</code> is 170. If the computed value exceeds\n * Double.MAX_VALUE, Double.POSITIVE_INFINITY is returned</li>\n * </ul>\n * </p>\n *\n * @param n argument\n * @return <code>n!</code>\n * @throws IllegalArgumentException if n < 0\n */\n",
        "file": "Math_93/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 376,
        "name": "factorialDouble",
        "start_line": 375,
        "span_start": 377,
        "bug_name": "Math_93",
        "end_line": 383
      }
    ]
  },
  "Math_98": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Returns the result of multiplying this by the vector <code>v</code>.\n *\n * @param v the vector to operate on\n * @return this*v\n * @throws IllegalArgumentException if columnDimension != v.size()\n */\n",
        "file": "Math_98/src/java/org/apache/commons/math/linear/BigMatrixImpl.java",
        "span_end": 991,
        "name": "operate",
        "start_line": 985,
        "span_start": 991,
        "bug_name": "Math_98",
        "end_line": 1000
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * @param v vector to operate on\n * @throws IllegalArgumentException if columnDimension != v.length\n * @return resulting vector\n */\n",
        "file": "Math_98/src/java/org/apache/commons/math/linear/RealMatrixImpl.java",
        "span_end": 779,
        "name": "operate",
        "start_line": 773,
        "span_start": 779,
        "bug_name": "Math_98",
        "end_line": 789
      }
    ]
  },
  "Math_99": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * <p>\n * Gets the greatest common divisor of the absolute value of two numbers,\n * using the \"binary gcd\" method which avoids division and modulo\n * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n * Stein (1961).\n * </p>\n * Special cases:\n * <ul>\n * <li>The invocations\n * <code>gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)</code>,\n * <code>gcd(Integer.MIN_VALUE, 0)</code> and\n * <code>gcd(0, Integer.MIN_VALUE)</code> throw an\n * <code>ArithmeticException</code>, because the result would be 2^31, which\n * is too large for an int value.</li>\n * <li>The result of <code>gcd(x, x)</code>, <code>gcd(0, x)</code> and\n * <code>gcd(x, 0)</code> is the absolute value of <code>x</code>, except\n * for the special cases above.\n * <li>The invocation <code>gcd(0, 0)</code> is the only one which returns\n * <code>0</code>.</li>\n * </ul>\n *\n * @param u any number\n * @param v any number\n * @return the greatest common divisor, never negative\n * @throws ArithmeticException\n *             if the result cannot be represented as a nonnegative int\n *             value\n * @since 1.1\n */\n",
        "file": "Math_99/src/java/org/apache/commons/math/util/MathUtils.java",
        "span_end": 542,
        "name": "gcd",
        "start_line": 539,
        "span_start": 543,
        "bug_name": "Math_99",
        "end_line": 597
      }
    ]
  },
  "Math_100": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Get the covariance matrix of unbound estimated parameters.\n * @param problem estimation problem\n * @return covariance matrix\n * @exception EstimationException if the covariance matrix\n * cannot be computed (singular problem)\n */\n",
        "file": "Math_100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "span_end": 166,
        "name": "getCovariances",
        "start_line": 158,
        "span_start": 166,
        "bug_name": "Math_100",
        "end_line": 188
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Guess the errors in unbound estimated parameters.\n * <p>Guessing is covariance-based, it only gives rough order of magnitude.</p>\n * @param problem estimation problem\n * @return errors in estimated parameters\n * @exception EstimationException if the covariances matrix cannot be computed\n * or the number of degrees of freedom is not positive (number of measurements\n * lesser or equal to number of parameters)\n */\n",
        "file": "Math_100/src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
        "span_end": 207,
        "name": "guessParametersErrors",
        "start_line": 199,
        "span_start": 202,
        "bug_name": "Math_100",
        "end_line": 214
      }
    ]
  },
  "Math_106": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Parses a string to produce a {@link Fraction} object.  This method\n * expects the string to be formatted as a proper fraction.\n * <p>\n * Minus signs are only allowed in the whole number part - i.e.,\n * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n * will result in a <code>ParseException</code>.\n *\n * @param source the string to parse\n * @param pos input/ouput parsing parameter.\n * @return the parsed {@link Fraction} object.\n */\n",
        "file": "Math_106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "span_end": 165,
        "name": "parse",
        "start_line": 130,
        "span_start": 165,
        "bug_name": "Math_106",
        "end_line": 214
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Parses a string to produce a {@link Fraction} object.  This method\n * expects the string to be formatted as a proper fraction.\n * <p>\n * Minus signs are only allowed in the whole number part - i.e.,\n * \"-3 1/2\" is legitimate and denotes -7/2, but \"-3 -1/2\" is invalid and\n * will result in a <code>ParseException</code>.\n *\n * @param source the string to parse\n * @param pos input/ouput parsing parameter.\n * @return the parsed {@link Fraction} object.\n */\n",
        "file": "Math_106/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
        "span_end": 200,
        "name": "parse",
        "start_line": 130,
        "span_start": 200,
        "bug_name": "Math_106",
        "end_line": 214
      }
    ]
  },
  "Mockito_2": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Starts the timer count down.\n */\n",
        "file": "Mockito_2/src/org/mockito/internal/util/Timer.java",
        "span_end": 28,
        "name": "start",
        "start_line": 26,
        "span_start": 28,
        "bug_name": "Mockito_2",
        "end_line": 28
      }
    ]
  },
  "Mockito_3": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_3/src/org/mockito/internal/invocation/InvocationMatcher.java",
        "span_end": 130,
        "name": "captureArgumentsFrom",
        "start_line": 118,
        "span_start": 127,
        "bug_name": "Mockito_3",
        "end_line": 143
      },
      {
        "member_type": "method",
        "file": "Mockito_3/src/org/mockito/internal/invocation/InvocationMatcher.java",
        "span_end": 142,
        "name": "captureArgumentsFrom",
        "start_line": 118,
        "span_start": 143,
        "bug_name": "Mockito_3",
        "end_line": 143
      }
    ]
  },
  "Mockito_4": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_4/src/org/mockito/exceptions/Reporter.java",
        "span_end": 424,
        "name": "noMoreInteractionsWanted",
        "start_line": 417,
        "span_start": 424,
        "bug_name": "Mockito_4",
        "end_line": 428
      },
      {
        "member_type": "method",
        "file": "Mockito_4/src/org/mockito/exceptions/Reporter.java",
        "span_end": 434,
        "name": "noMoreInteractionsWantedInOrder",
        "start_line": 430,
        "span_start": 434,
        "bug_name": "Mockito_4",
        "end_line": 437
      },
      {
        "member_type": "method",
        "file": "Mockito_4/src/org/mockito/exceptions/Reporter.java",
        "span_end": 676,
        "name": "exceptionCauseMessageIfAvailable",
        "start_line": 676,
        "span_start": 677,
        "bug_name": "Mockito_4",
        "end_line": 681
      }
    ]
  },
  "Mockito_6": {
    "bug_count": 20,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>String</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return empty String (\"\")\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 324,
        "name": "anyString",
        "start_line": 323,
        "span_start": 324,
        "bug_name": "Mockito_6",
        "end_line": 325
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>List</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return empty List.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 339,
        "name": "anyList",
        "start_line": 338,
        "span_start": 339,
        "bug_name": "Mockito_6",
        "end_line": 340
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Generic friendly alias to {@link Matchers#anyList()}.\n * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n * <p>\n * Any <code>List</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @param clazz Type owned by the list to avoid casting\n * @return empty List.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 358,
        "name": "anyListOf",
        "start_line": 357,
        "span_start": 358,
        "bug_name": "Mockito_6",
        "end_line": 359
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>Set</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return empty Set\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 373,
        "name": "anySet",
        "start_line": 372,
        "span_start": 373,
        "bug_name": "Mockito_6",
        "end_line": 374
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Generic friendly alias to {@link Matchers#anySet()}.\n * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n * <p>\n * Any <code>Set</code> or <code>null</code>\n * <p>\n * This method <b>*dones't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @param clazz Type owned by the Set to avoid casting\n * @return empty Set\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 392,
        "name": "anySetOf",
        "start_line": 391,
        "span_start": 392,
        "bug_name": "Mockito_6",
        "end_line": 393
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>Map</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return empty Map.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 407,
        "name": "anyMap",
        "start_line": 406,
        "span_start": 407,
        "bug_name": "Mockito_6",
        "end_line": 408
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Generic friendly alias to {@link Matchers#anyMap()}.\n * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n * <p>\n * Any <code>Map</code> or <code>null</code>\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @param keyClazz Type of the map key to avoid casting\n * @param valueClazz Type of the value to avoid casting\n * @return empty Map.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 427,
        "name": "anyMapOf",
        "start_line": 426,
        "span_start": 427,
        "bug_name": "Mockito_6",
        "end_line": 428
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>Collection</code> or <code>null</code>.\n * <p>\n * This method <b>*dones't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return empty Collection.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 442,
        "name": "anyCollection",
        "start_line": 441,
        "span_start": 442,
        "bug_name": "Mockito_6",
        "end_line": 443
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Generic friendly alias to {@link Matchers#anyCollection()}.\n * It's an alternative to &#064;SuppressWarnings(\"unchecked\") to keep code clean of compiler warnings.\n * <p>\n * Any <code>Collection</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @param clazz Type owned by the collection to avoid casting\n * @return empty Collection.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 461,
        "name": "anyCollectionOf",
        "start_line": 460,
        "span_start": 461,
        "bug_name": "Mockito_6",
        "end_line": 462
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>boolean</code>, <code>Boolean</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>false</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 122,
        "name": "anyBoolean",
        "start_line": 121,
        "span_start": 122,
        "bug_name": "Mockito_6",
        "end_line": 123
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>byte</code>, <code>Byte</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>0</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 137,
        "name": "anyByte",
        "start_line": 136,
        "span_start": 137,
        "bug_name": "Mockito_6",
        "end_line": 138
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>char</code>, <code>Character</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>0</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 152,
        "name": "anyChar",
        "start_line": 151,
        "span_start": 152,
        "bug_name": "Mockito_6",
        "end_line": 153
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any int, Integer or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>0</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 167,
        "name": "anyInt",
        "start_line": 166,
        "span_start": 167,
        "bug_name": "Mockito_6",
        "end_line": 168
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>long</code>, <code>Long</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>0</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 182,
        "name": "anyLong",
        "start_line": 181,
        "span_start": 182,
        "bug_name": "Mockito_6",
        "end_line": 183
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>float</code>, <code>Float</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>0</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 197,
        "name": "anyFloat",
        "start_line": 196,
        "span_start": 197,
        "bug_name": "Mockito_6",
        "end_line": 198
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>double</code>, <code>Double</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>0</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 212,
        "name": "anyDouble",
        "start_line": 211,
        "span_start": 212,
        "bug_name": "Mockito_6",
        "end_line": 213
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>short</code>, <code>Short</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>0</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 227,
        "name": "anyShort",
        "start_line": 226,
        "span_start": 227,
        "bug_name": "Mockito_6",
        "end_line": 228
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any <code>Object</code> or <code>null</code>.\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * Has aliases: {@link #any()} and {@link #any(Class clazz)}\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>null</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 244,
        "name": "anyObject",
        "start_line": 243,
        "span_start": 244,
        "bug_name": "Mockito_6",
        "end_line": 245
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any kind object, not necessary of the given class.\n * The class argument is provided only to avoid casting.\n * <p>\n * Sometimes looks better than <code>anyObject()</code> - especially when explicit casting is required\n * <p>\n * Alias to {@link Matchers#anyObject()}\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @param clazz The type to avoid casting\n * @return <code>null</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 292,
        "name": "any",
        "start_line": 291,
        "span_start": 292,
        "bug_name": "Mockito_6",
        "end_line": 293
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Any object or <code>null</code>.\n * <p>\n * Shorter alias to {@link Matchers#anyObject()}\n * <p>\n * This method <b>*doesn't do any type checks*</b>, it is only there to avoid casting\n * in your code. This might however change (type checks could be added) in a\n * future major release.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @return <code>null</code>.\n */\n",
        "file": "Mockito_6/src/org/mockito/Matchers.java",
        "span_end": 309,
        "name": "any",
        "start_line": 308,
        "span_start": 309,
        "bug_name": "Mockito_6",
        "end_line": 310
      }
    ]
  },
  "Mockito_10": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_10/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 71,
        "name": "deepStub",
        "start_line": 59,
        "span_start": 71,
        "bug_name": "Mockito_10",
        "end_line": 75
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Creates a mock using the Generics Metadata.\n *\n * <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data\n * that was resolved for the current return type, for this to happen we associate to the mock an new instance of\n * {@link ReturnsDeepStubs} answer in which we will store the returned type generic metadata.\n *\n * @param returnTypeGenericMetadata The metadata to use to create the new mock.\n * @param parentMock The parent of the current deep stub mock.\n * @return The mock\n */\n",
        "file": "Mockito_10/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 102,
        "name": "newDeepStubMock",
        "start_line": 88,
        "span_start": 87,
        "bug_name": "Mockito_10",
        "end_line": 103
      }
    ]
  },
  "Mockito_14": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_14/src/org/mockito/internal/MockHandler.java",
        "span_end": 78,
        "name": "handle",
        "start_line": 58,
        "span_start": 76,
        "bug_name": "Mockito_14",
        "end_line": 104
      },
      {
        "member_type": "method",
        "file": "Mockito_14/src/org/mockito/internal/MockitoCore.java",
        "span_end": 73,
        "name": "verify",
        "start_line": 68,
        "span_start": 73,
        "bug_name": "Mockito_14",
        "end_line": 76
      }
    ]
  },
  "Mockito_15": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_15/src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java",
        "span_end": 25,
        "name": "filterCandidate",
        "start_line": 19,
        "span_start": 25,
        "bug_name": "Mockito_15",
        "end_line": 43
      }
    ]
  },
  "Mockito_16": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_16/src/org/mockito/internal/MockitoCore.java",
        "span_end": 35,
        "name": "mock",
        "start_line": 32,
        "span_start": 32,
        "bug_name": "Mockito_16",
        "end_line": 38
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Creates a mock with some non-standard settings.\n * <p>\n * The number of configuration points for a mock grows\n * so we need a fluent way to introduce new configuration without adding more and more overloaded Mockito.mock() methods.\n * Hence {@link MockSettings}.\n * <pre>\n *   Listener mock = mock(Listener.class, withSettings()\n *     .name(\"firstListner\").defaultBehavior(RETURNS_SMART_NULLS));\n *   );\n * </pre>\n * <b>Use it carefully and occasionally</b>. What might be reason your test needs non-standard mocks?\n * Is the code under test so complicated that it requires non-standard mocks?\n * Wouldn't you prefer to refactor the code under test so it is testable in a simple way?\n * <p>\n * See also {@link Mockito#withSettings()}\n * <p>\n * See examples in javadoc for {@link Mockito} class\n *\n * @param classToMock class or interface to mock\n * @param mockSettings additional mock settings\n * @return mock object\n */\n",
        "file": "Mockito_16/src/org/mockito/Mockito.java",
        "span_end": 827,
        "name": "mock",
        "start_line": 826,
        "span_start": 827,
        "bug_name": "Mockito_16",
        "end_line": 828
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Creates a spy of the real object. The spy calls <b>real</b> methods unless they are stubbed.\n * <p>\n * Real spies should be used <b>carefully and occasionally</b>, for example when dealing with legacy code.\n * <p>\n * As usual you are going to read <b>the partial mock warning</b>:\n * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.\n * How does partial mock fit into this paradigm? Well, it just doesn't...\n * Partial mock usually means that the complexity has been moved to a different method on the same object.\n * In most cases, this is not the way you want to design your application.\n * <p>\n * However, there are rare cases when partial mocks come handy:\n * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)\n * However, I wouldn't use partial mocks for new, test-driven & well-designed code.\n * <p>\n * Example:\n *\n * <pre>\n *   List list = new LinkedList();\n *   List spy = spy(list);\n *\n *   //optionally, you can stub out some methods:\n *   when(spy.size()).thenReturn(100);\n *\n *   //using the spy calls <b>real</b> methods\n *   spy.add(\"one\");\n *   spy.add(\"two\");\n *\n *   //prints \"one\" - the first element of a list\n *   System.out.println(spy.get(0));\n *\n *   //size() method was stubbed - 100 is printed\n *   System.out.println(spy.size());\n *\n *   //optionally, you can verify\n *   verify(spy).add(\"one\");\n *   verify(spy).add(\"two\");\n * </pre>\n *\n * <h4>Important gotcha on spying real objects!</h4>\n *\n * 1. Sometimes it's impossible to use {@link Mockito#when(Object)} for stubbing spies. Example:\n *\n * <pre>\n *   List list = new LinkedList();\n *   List spy = spy(list);\n *\n *   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)\n *   when(spy.get(0)).thenReturn(\"foo\");\n *\n *   //You have to use doReturn() for stubbing\n *   doReturn(\"foo\").when(spy).get(0);\n * </pre>\n *\n * 2. Watch out for final methods.\n * Mockito doesn't mock final methods so the bottom line is: when you spy on real objects + you try to stub a final method = trouble.\n * What will happen is the real method will be called *on mock* but *not on the real instance* you passed to the spy() method.\n * Typically you may get a NullPointerException because mock instances don't have fields initiated.\n *\n * <p>\n * See examples in javadoc for {@link Mockito} class\n *\n * @param object\n *            to spy on\n * @return a spy of the real object\n */\n",
        "file": "Mockito_16/src/org/mockito/Mockito.java",
        "span_end": 899,
        "name": "spy",
        "start_line": 896,
        "span_start": 899,
        "bug_name": "Mockito_16",
        "end_line": 900
      }
    ]
  },
  "Mockito_17": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_17/src/org/mockito/internal/creation/MockSettingsImpl.java",
        "span_end": 22,
        "name": "serializable",
        "start_line": 22,
        "span_start": 20,
        "bug_name": "Mockito_17",
        "end_line": 25
      },
      {
        "member_type": "method",
        "file": "Mockito_17/src/org/mockito/internal/util/MockUtil.java",
        "span_end": 45,
        "name": "createMock",
        "start_line": 34,
        "span_start": 45,
        "bug_name": "Mockito_17",
        "end_line": 61
      }
    ]
  },
  "Mockito_19": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_19/src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java",
        "span_end": 15,
        "name": "filterCandidate",
        "start_line": 13,
        "span_start": 9,
        "bug_name": "Mockito_19",
        "end_line": 17
      },
      {
        "member_type": "method",
        "file": "Mockito_19/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java",
        "span_end": 23,
        "name": "filterCandidate",
        "start_line": 22,
        "span_start": 23,
        "bug_name": "Mockito_19",
        "end_line": 60
      },
      {
        "member_type": "method",
        "file": "Mockito_19/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java",
        "span_end": 31,
        "name": "filterCandidate",
        "start_line": 22,
        "span_start": 31,
        "bug_name": "Mockito_19",
        "end_line": 60
      },
      {
        "member_type": "method",
        "file": "Mockito_19/src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java",
        "span_end": 42,
        "name": "filterCandidate",
        "start_line": 22,
        "span_start": 42,
        "bug_name": "Mockito_19",
        "end_line": 60
      },
      {
        "member_type": "method",
        "file": "Mockito_19/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java",
        "span_end": 20,
        "name": "filterCandidate",
        "start_line": 20,
        "span_start": 20,
        "bug_name": "Mockito_19",
        "end_line": 29
      },
      {
        "member_type": "method",
        "file": "Mockito_19/src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java",
        "span_end": 27,
        "name": "filterCandidate",
        "start_line": 20,
        "span_start": 28,
        "bug_name": "Mockito_19",
        "end_line": 29
      },
      {
        "member_type": "method",
        "file": "Mockito_19/src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java",
        "span_end": 114,
        "name": "injectMockCandidatesOnFields",
        "start_line": 111,
        "span_start": 114,
        "bug_name": "Mockito_19",
        "end_line": 122
      }
    ]
  },
  "Mockito_20": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_20/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
        "span_end": 34,
        "name": "createMock",
        "start_line": 24,
        "span_start": 32,
        "bug_name": "Mockito_20",
        "end_line": 54
      },
      {
        "member_type": "method",
        "file": "Mockito_20/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
        "span_end": 45,
        "name": "createMock",
        "start_line": 24,
        "span_start": 45,
        "bug_name": "Mockito_20",
        "end_line": 54
      }
    ]
  },
  "Mockito_21": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_21/src/org/mockito/internal/creation/instance/ConstructorInstantiator.java",
        "span_end": 28,
        "name": "newInstance",
        "start_line": 13,
        "span_start": 17,
        "bug_name": "Mockito_21",
        "end_line": 34
      }
    ]
  },
  "Mockito_23": {
    "bug_count": 5,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 51,
        "name": "answer",
        "start_line": 47,
        "span_start": 44,
        "bug_name": "Mockito_23",
        "end_line": 59
      },
      {
        "member_type": "method",
        "file": "Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 59,
        "name": "answer",
        "start_line": 47,
        "span_start": 59,
        "bug_name": "Mockito_23",
        "end_line": 59
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Creates a mock using the Generics Metadata.\n *\n * <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data\n * that was resolved for the current return type, for this to happen we associate to the mock an new instance of\n * {@link ReturnsDeepStubs} answer in which we will store the returned type generic metadata.\n *\n * @param returnTypeGenericMetadata The metadata to use to create the new mock.\n * @return The mock\n */\n",
        "file": "Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 99,
        "name": "createNewDeepStubMock",
        "start_line": 98,
        "span_start": 100,
        "bug_name": "Mockito_23",
        "end_line": 103
      },
      {
        "member_type": "method",
        "file": "Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 114,
        "name": "withSettingsUsing",
        "start_line": 105,
        "span_start": 114,
        "bug_name": "Mockito_23",
        "end_line": 114
      },
      {
        "member_type": "method",
        "file": "Mockito_23/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 123,
        "name": "returnsDeepStubsAnswerUsing",
        "start_line": 116,
        "span_start": 123,
        "bug_name": "Mockito_23",
        "end_line": 123
      }
    ]
  },
  "Mockito_25": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_25/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 56,
        "name": "answer",
        "start_line": 47,
        "span_start": 53,
        "bug_name": "Mockito_25",
        "end_line": 57
      },
      {
        "member_type": "method",
        "file": "Mockito_25/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 68,
        "name": "getMock",
        "start_line": 59,
        "span_start": 68,
        "bug_name": "Mockito_25",
        "end_line": 72
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Creates a mock using the Generics Metadata.\n *\n * @param returnTypeGenericMetadata The metadata to use to create the new mock.\n * @return The mock\n */\n",
        "file": "Mockito_25/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
        "span_end": 83,
        "name": "createNewDeepStubMock",
        "start_line": 80,
        "span_start": 77,
        "bug_name": "Mockito_25",
        "end_line": 85
      }
    ]
  },
  "Mockito_30": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_30/src/org/mockito/exceptions/Reporter.java",
        "span_end": 441,
        "name": "smartNullPointerException",
        "start_line": 438,
        "span_start": 438,
        "bug_name": "Mockito_30",
        "end_line": 447
      },
      {
        "member_type": "method",
        "file": "Mockito_30/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "span_end": 56,
        "name": "intercept",
        "start_line": 51,
        "span_start": 56,
        "bug_name": "Mockito_30",
        "end_line": 58
      }
    ]
  },
  "Mockito_31": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_31/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
        "span_end": 60,
        "name": "formatMethodCall",
        "start_line": 60,
        "span_start": 60,
        "bug_name": "Mockito_31",
        "end_line": 63
      }
    ]
  },
  "Mockito_32": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "file": "Mockito_32/src/org/mockito/internal/configuration/SpyAnnotationEngine.java",
        "span_end": 49,
        "name": "process",
        "start_line": 28,
        "span_start": 49,
        "bug_name": "Mockito_32",
        "end_line": 62
      }
    ]
  },
  "Mockito_35": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Object argument that implements the given class.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @param <T>\n *            the accepted type.\n * @param clazz\n *            the class of the accepted type.\n * @return <code>null</code>.\n */\n",
        "file": "Mockito_35/src/org/mockito/Matchers.java",
        "span_end": 362,
        "name": "isA",
        "start_line": 361,
        "span_start": 362,
        "bug_name": "Mockito_35",
        "end_line": 363
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Object argument that is equal to the given value.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @param value\n *            the given value.\n * @return <code>null</code>.\n */\n",
        "file": "Mockito_35/src/org/mockito/Matchers.java",
        "span_end": 479,
        "name": "eq",
        "start_line": 478,
        "span_start": 479,
        "bug_name": "Mockito_35",
        "end_line": 480
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Object argument that is the same as the given value.\n * <p>\n * See examples in javadoc for {@link Matchers} class\n *\n * @param <T>\n *            the type of the object, it is passed through to prevent casts.\n * @param value\n *            the given value.\n * @return <code>null</code>.\n */\n",
        "file": "Mockito_35/src/org/mockito/Matchers.java",
        "span_end": 516,
        "name": "same",
        "start_line": 515,
        "span_start": 516,
        "bug_name": "Mockito_35",
        "end_line": 517
      }
    ]
  },
  "Time_1": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Always returns zero, indicating that sort order is not relevent.\n *\n * @return zero always\n */\n",
        "file": "Time_1/src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "span_end": 229,
        "name": "compareTo",
        "start_line": 226,
        "span_start": 227,
        "bug_name": "Time_1",
        "end_line": 228
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Constructs a Partial with the specified fields and values.\n * The fields must be specified in the order largest to smallest.\n * <p>\n * The constructor uses the specified chronology.\n *\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\n",
        "file": "Time_1/src/main/java/org/joda/time/Partial.java",
        "span_end": 221,
        "name": "Partial",
        "start_line": 189,
        "span_start": 217,
        "bug_name": "Time_1",
        "end_line": 260
      }
    ]
  },
  "Time_2": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Always returns zero, indicating that sort order is not relevent.\n *\n * @return zero always\n */\n",
        "file": "Time_2/src/main/java/org/joda/time/field/UnsupportedDurationField.java",
        "span_end": 226,
        "name": "compareTo",
        "start_line": 226,
        "span_start": 227,
        "bug_name": "Time_2",
        "end_line": 231
      },
      {
        "member_type": "constructor",
        "javadoc": "/**\n * Constructs a Partial with the specified fields and values.\n * The fields must be specified in the order largest to smallest.\n * <p>\n * The constructor uses the specified chronology.\n *\n * @param types  the types to create the partial from, not null\n * @param values  the values to store, not null\n * @param chronology  the chronology, null means ISO\n * @throws IllegalArgumentException if the types or values are invalid\n */\n",
        "file": "Time_2/src/main/java/org/joda/time/Partial.java",
        "span_end": 218,
        "name": "Partial",
        "start_line": 189,
        "span_start": 218,
        "bug_name": "Time_2",
        "end_line": 251
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets a copy of this date with the specified field set to a new value.\n * <p>\n * If this partial did not previously support the field, the new one will.\n * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.\n * <p>\n * For example, if the field type is <code>dayOfMonth</code> then the day\n * would be changed/added in the returned instance.\n *\n * @param fieldType  the field type to set, not null\n * @param value  the value to set\n * @return a copy of this instance with the field set\n * @throws IllegalArgumentException if the value is null or invalid\n */\n",
        "file": "Time_2/src/main/java/org/joda/time/Partial.java",
        "span_end": 448,
        "name": "with",
        "start_line": 428,
        "span_start": 449,
        "bug_name": "Time_2",
        "end_line": 479
      }
    ]
  },
  "Time_3": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Adds to the instant specifying the duration and multiple to add.\n *\n * @param type  a field type, usually obtained from DateTimeFieldType, not null\n * @param amount  the amount to add of this duration\n * @throws IllegalArgumentException if the value is null or invalid\n * @throws ArithmeticException if the result exceeds the capacity of the instant\n */\n",
        "file": "Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 639,
        "name": "add",
        "start_line": 635,
        "span_start": 639,
        "bug_name": "Time_3",
        "end_line": 642
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Set the day of week to the specified value.\n *\n * @param dayOfWeek  the day of the week\n * @throws IllegalArgumentException if the value is invalid\n */\n",
        "file": "Time_3/src/main/java/org/joda/time/MutableDateTime.java",
        "span_end": 764,
        "name": "setDayOfWeek",
        "start_line": 763,
        "span_start": 764,
        "bug_name": "Time_3",
        "end_line": 765
      }
    ]
  },
  "Time_6": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Factory method returns instances of the GJ cutover chronology. Any\n * cutover date may be specified.\n *\n * @param zone  the time zone to use, null is default\n * @param gregorianCutover  the cutover to use, null means default\n * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4\n */\n",
        "file": "Time_6/src/main/java/org/joda/time/chrono/GJChronology.java",
        "span_end": 195,
        "name": "getInstance",
        "start_line": 185,
        "span_start": 196,
        "bug_name": "Time_6",
        "end_line": 234
      },
      {
        "member_type": "method",
        "file": "Time_6/src/main/java/org/joda/time/chrono/GJChronology.java",
        "span_end": 978,
        "name": "add",
        "start_line": 977,
        "span_start": 979,
        "bug_name": "Time_6",
        "end_line": 1008
      },
      {
        "member_type": "method",
        "file": "Time_6/src/main/java/org/joda/time/chrono/GJChronology.java",
        "span_end": 1000,
        "name": "add",
        "start_line": 977,
        "span_start": 1001,
        "bug_name": "Time_6",
        "end_line": 1008
      }
    ]
  },
  "Time_9": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n * This method assumes 60 minutes in an hour, and standard length minutes.\n * <p>\n * This factory is a convenient way of constructing zones with a fixed offset.\n * The minutes value is always positive and in the range 0 to 59.\n * If constructed with the values (-2, 30), the resulting zone is '-02:30'.\n *\n * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive\n * @return the DateTimeZone object for the offset\n * @throws IllegalArgumentException if the offset or minute is too large or too small\n */\n",
        "file": "Time_9/src/main/java/org/joda/time/DateTimeZone.java",
        "span_end": 266,
        "name": "forOffsetHoursMinutes",
        "start_line": 254,
        "span_start": 257,
        "bug_name": "Time_9",
        "end_line": 277
      }
    ]
  },
  "Time_10": {
    "bug_count": 1,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Calculates the number of whole units between the two specified partial datetimes.\n * <p>\n * The two partials must contain the same fields, for example you can specify\n * two <code>LocalDate</code> objects.\n *\n * @param start  the start partial date, validated to not be null\n * @param end  the end partial date, validated to not be null\n * @param zeroInstance  the zero instance constant, must not be null\n * @return the period\n * @throws IllegalArgumentException if the partials are null or invalid\n */\n",
        "file": "Time_10/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
        "span_end": 104,
        "name": "between",
        "start_line": 89,
        "span_start": 104,
        "bug_name": "Time_10",
        "end_line": 107
      }
    ]
  },
  "Time_12": {
    "bug_count": 4,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Constructs a LocalDate from a <code>java.util.Calendar</code>\n * using exactly the same field values.\n * <p>\n * Each field is queried from the Calendar and assigned to the LocalDate.\n * This is useful if you have been using the Calendar as a local date,\n * ignoring the zone.\n * <p>\n * One advantage of this method is that this method is unaffected if the\n * version of the time zone data differs between the JDK and Joda-Time.\n * That is because the local field values are transferred, calculated using\n * the JDK time zone data and without using the Joda-Time time zone data.\n * <p>\n * This factory method ignores the type of the calendar and always\n * creates a LocalDate with ISO chronology. It is expected that you\n * will only pass in instances of <code>GregorianCalendar</code> however\n * this is not validated.\n *\n * @param calendar  the Calendar to extract fields from, not null\n * @return the created local date, not null\n * @throws IllegalArgumentException if the calendar is null\n * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n */\n",
        "file": "Time_12/src/main/java/org/joda/time/LocalDate.java",
        "span_end": 212,
        "name": "fromCalendarFields",
        "start_line": 206,
        "span_start": 210,
        "bug_name": "Time_12",
        "end_line": 217
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Constructs a LocalDate from a <code>java.util.Date</code>\n * using exactly the same field values.\n * <p>\n * Each field is queried from the Date and assigned to the LocalDate.\n * This is useful if you have been using the Date as a local date,\n * ignoring the zone.\n * <p>\n * One advantage of this method is that this method is unaffected if the\n * version of the time zone data differs between the JDK and Joda-Time.\n * That is because the local field values are transferred, calculated using\n * the JDK time zone data and without using the Joda-Time time zone data.\n * <p>\n * This factory method always creates a LocalDate with ISO chronology.\n *\n * @param date  the Date to extract fields from, not null\n * @return the created local date, not null\n * @throws IllegalArgumentException if the calendar is null\n * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n */\n",
        "file": "Time_12/src/main/java/org/joda/time/LocalDate.java",
        "span_end": 243,
        "name": "fromDateFields",
        "start_line": 239,
        "span_start": 243,
        "bug_name": "Time_12",
        "end_line": 255
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Constructs a LocalDateTime from a <code>java.util.Calendar</code>\n * using exactly the same field values.\n * <p>\n * Each field is queried from the Calendar and assigned to the LocalDateTime.\n * This is useful if you have been using the Calendar as a local date,\n * ignoring the zone.\n * <p>\n * One advantage of this method is that this method is unaffected if the\n * version of the time zone data differs between the JDK and Joda-Time.\n * That is because the local field values are transferred, calculated using\n * the JDK time zone data and without using the Joda-Time time zone data.\n * <p>\n * This factory method ignores the type of the calendar and always\n * creates a LocalDateTime with ISO chronology. It is expected that you\n * will only pass in instances of <code>GregorianCalendar</code> however\n * this is not validated.\n *\n * @param calendar  the Calendar to extract fields from, not null\n * @return the created local date-time, not null\n * @throws IllegalArgumentException if the calendar is null\n * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n */\n",
        "file": "Time_12/src/main/java/org/joda/time/LocalDateTime.java",
        "span_end": 201,
        "name": "fromCalendarFields",
        "start_line": 195,
        "span_start": 199,
        "bug_name": "Time_12",
        "end_line": 210
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Constructs a LocalDateTime from a <code>java.util.Date</code>\n * using exactly the same field values.\n * <p>\n * Each field is queried from the Date and assigned to the LocalDateTime.\n * This is useful if you have been using the Date as a local date,\n * ignoring the zone.\n * <p>\n * One advantage of this method is that this method is unaffected if the\n * version of the time zone data differs between the JDK and Joda-Time.\n * That is because the local field values are transferred, calculated using\n * the JDK time zone data and without using the Joda-Time time zone data.\n * <p>\n * This factory method always creates a LocalDateTime with ISO chronology.\n *\n * @param date  the Date to extract fields from, not null\n * @return the created local date-time, not null\n * @throws IllegalArgumentException if the calendar is null\n * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n */\n",
        "file": "Time_12/src/main/java/org/joda/time/LocalDateTime.java",
        "span_end": 236,
        "name": "fromDateFields",
        "start_line": 232,
        "span_start": 236,
        "bug_name": "Time_12",
        "end_line": 252
      }
    ]
  },
  "Time_13": {
    "bug_count": 3,
    "entries": [
      {
        "member_type": "method",
        "file": "Time_13/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "span_end": 1098,
        "name": "calculatePrintedLength",
        "start_line": 1088,
        "span_start": 1098,
        "bug_name": "Time_13",
        "end_line": 1118
      },
      {
        "member_type": "method",
        "file": "Time_13/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "span_end": 1132,
        "name": "printTo",
        "start_line": 1120,
        "span_start": 1133,
        "bug_name": "Time_13",
        "end_line": 1153
      },
      {
        "member_type": "method",
        "file": "Time_13/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
        "span_end": 1141,
        "name": "printTo",
        "start_line": 1120,
        "span_start": 1142,
        "bug_name": "Time_13",
        "end_line": 1153
      }
    ]
  },
  "Time_23": {
    "bug_count": 2,
    "entries": [
      {
        "member_type": "method",
        "javadoc": "/**\n * Converts an old style id to a new style id.\n *\n * @param id  the old style id\n * @return the new style id, null if not found\n */\n",
        "file": "Time_23/src/main/java/org/joda/time/DateTimeZone.java",
        "span_end": 563,
        "name": "getConvertedId",
        "start_line": 558,
        "span_start": 564,
        "bug_name": "Time_23",
        "end_line": 599
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Converts an old style id to a new style id.\n *\n * @param id  the old style id\n * @return the new style id, null if not found\n */\n",
        "file": "Time_23/src/main/java/org/joda/time/DateTimeZone.java",
        "span_end": 588,
        "name": "getConvertedId",
        "start_line": 558,
        "span_start": 572,
        "bug_name": "Time_23",
        "end_line": 599
      }
    ]
  },
  "Time_26": {
    "bug_count": 7,
    "entries": [
      {
        "member_type": "method",
        "file": "Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 436,
        "name": "add",
        "start_line": 428,
        "span_start": 436,
        "bug_name": "Time_26",
        "end_line": 438
      },
      {
        "member_type": "method",
        "file": "Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 448,
        "name": "add",
        "start_line": 440,
        "span_start": 448,
        "bug_name": "Time_26",
        "end_line": 450
      },
      {
        "member_type": "method",
        "file": "Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 467,
        "name": "addWrapField",
        "start_line": 452,
        "span_start": 460,
        "bug_name": "Time_26",
        "end_line": 475
      },
      {
        "member_type": "method",
        "file": "Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 481,
        "name": "set",
        "start_line": 477,
        "span_start": 481,
        "bug_name": "Time_26",
        "end_line": 482
      },
      {
        "member_type": "method",
        "file": "Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 528,
        "name": "roundFloor",
        "start_line": 520,
        "span_start": 528,
        "bug_name": "Time_26",
        "end_line": 530
      },
      {
        "member_type": "method",
        "file": "Time_26/src/main/java/org/joda/time/chrono/ZonedChronology.java",
        "span_end": 540,
        "name": "roundCeiling",
        "start_line": 532,
        "span_start": 540,
        "bug_name": "Time_26",
        "end_line": 542
      },
      {
        "member_type": "method",
        "javadoc": "/**\n * Set values which may be out of bounds by adding the difference between\n * the new value and the current value.\n */\n",
        "file": "Time_26/src/main/java/org/joda/time/field/LenientDateTimeField.java",
        "span_end": 74,
        "name": "set",
        "start_line": 69,
        "span_start": 75,
        "bug_name": "Time_26",
        "end_line": 76
      }
    ]
  }
}