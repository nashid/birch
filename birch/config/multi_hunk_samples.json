{
    "Chart_2": {
        "buggy_hunks": {
            "0": {
                "start_line": 755,
                "end_line": 760,
                "file": "source/org/jfree/data/general/DatasetUtilities.java",
                "code": "<START_BUG>\n                    lvalue = intervalXYData.getStartXValue(series, item);\n                    uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n<END_BUG>"
            },
            "1": {
                "start_line": 1242,
                "end_line": 1247,
                "file": "source/org/jfree/data/general/DatasetUtilities.java",
                "code": "<START_BUG>\n                    double lvalue = ixyd.getStartYValue(series, item);\n                    double uvalue = ixyd.getEndYValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n<END_BUG>"
            }
        },
        "buggy_code": {
            "0": {
                "start_line": 754,
                "end_line": 761,
                "file": "source/org/jfree/data/general/DatasetUtilities.java",
                "code": "for (int item = 0; item < itemCount; item++) {\n                    lvalue = intervalXYData.getStartXValue(series, item);\n                    uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);"
            },
            "1": {
                "start_line": 1241,
                "end_line": 1248,
                "file": "source/org/jfree/data/general/DatasetUtilities.java",
                "code": "for (int item = 0; item < itemCount; item++) {\n                    double lvalue = ixyd.getStartYValue(series, item);\n                    double uvalue = ixyd.getEndYValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n                        maximum = Math.max(maximum, uvalue);"
            }
        },
        "delineated_bug": {
            "0": {
                "start_line": 754,
                "end_line": 761,
                "file": "source/org/jfree/data/general/DatasetUtilities.java",
                "code": "for (int item = 0; item < itemCount; item++) {\n<START_BUG>\n                    lvalue = intervalXYData.getStartXValue(series, item);\n                    uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n<END_BUG>\n                        maximum = Math.max(maximum, uvalue);"
            },
            "1": {
                "start_line": 1241,
                "end_line": 1248,
                "file": "source/org/jfree/data/general/DatasetUtilities.java",
                "code": "for (int item = 0; item < itemCount; item++) {\n<START_BUG>\n                    double lvalue = ixyd.getStartYValue(series, item);\n                    double uvalue = ixyd.getEndYValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n<END_BUG>\n                        maximum = Math.max(maximum, uvalue);"
            }
        },
        "bug_count": 2,
        "triggered_tests": {
            "0": {
                "test_path": "org.jfree.data.general.junit.DatasetUtilitiesTests",
                "test_method": "testBug2849731_2",
                "test_code": "testBug2849731_2() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(1.0, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(1.0, r.getLowerBound(), EPSILON);\n        assertEquals(1.5, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\n        r = DatasetUtilities.iterateDomainBounds(d);\n        assertEquals(0.5, r.getLowerBound(), EPSILON);\n        assertEquals(1.5, r.getUpperBound(), EPSILON);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "1": {
                "test_path": "org.jfree.data.general.junit.DatasetUtilitiesTests",
                "test_method": "testBug2849731_3",
                "test_code": "testBug2849731_3() {\n        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\n        XYIntervalSeries s = new XYIntervalSeries(\"S1\");\n        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\n        d.addSeries(s);\n        Range r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);\n        assertEquals(1.5, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);\n        assertEquals(2.5, r.getUpperBound(), EPSILON);\n\n        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\n        r = DatasetUtilities.iterateRangeBounds(d);\n        assertEquals(1.5, r.getLowerBound(), EPSILON);\n        assertEquals(3.5, r.getUpperBound(), EPSILON);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            }
        },
        "buggy_files": {
            "0": "source/org/jfree/data/general/DatasetUtilities.java"
        },
        "bug_report": {
            "url": "https://sourceforge.net/p/jfreechart/bugs/959",
            "bug_description": "All explained in this forum post:"
        },
        "hunk_type": "single_file_two_hunks",
        "hunk_mapping": {
            "0": [
                {
                    "start_line": 755,
                    "end_line": 760,
                    "file": "source/org/jfree/data/general/DatasetUtilities.java",
                    "code": "<START_BUG>\n                    lvalue = intervalXYData.getStartXValue(series, item);\n                    uvalue = intervalXYData.getEndXValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n<END_BUG>"
                }
            ],
            "1": [
                {
                    "start_line": 1242,
                    "end_line": 1247,
                    "file": "source/org/jfree/data/general/DatasetUtilities.java",
                    "code": "<START_BUG>\n                    double lvalue = ixyd.getStartYValue(series, item);\n                    double uvalue = ixyd.getEndYValue(series, item);\n                    if (!Double.isNaN(lvalue)) {\n                        minimum = Math.min(minimum, lvalue);\n                    }\n                    if (!Double.isNaN(uvalue)) {\n<END_BUG>"
                }
            ]
        }
    },
    "Chart_4": {
        "buggy_hunks": {
            "0": {
                "start_line": 4493,
                "end_line": 4492,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "<START_BUG>\n<END_BUG>"
            },
            "1": {
                "start_line": 4501,
                "end_line": 4500,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "<START_BUG>\n<END_BUG>"
            }
        },
        "buggy_code": {
            "0": {
                "start_line": 4472,
                "end_line": 4498,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "if (d != null) {\n                XYItemRenderer r = getRendererForDataset(d);\n                if (isDomainAxis) {\n                    if (r != null) {\n                        result = Range.combine(result, r.findDomainBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findDomainBounds(d));\n                    }\n                }\n                else {\n                    if (r != null) {\n                        result = Range.combine(result, r.findRangeBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findRangeBounds(d));\n                    }\n                }\n                \n                    Collection c = r.getAnnotations();\n                    Iterator i = c.iterator();\n                    while (i.hasNext()) {\n                        XYAnnotation a = (XYAnnotation) i.next();\n                        if (a instanceof XYAnnotationBoundsInfo) {\n                            includedAnnotations.add(a);"
            },
            "1": {
                "start_line": 4425,
                "end_line": 4518,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "public Range getDataRange(ValueAxis axis) {\n\n        Range result = null;\n        List mappedDatasets = new ArrayList();\n        List includedAnnotations = new ArrayList();\n        boolean isDomainAxis = true;\n\n        // is it a domain axis?\n        int domainIndex = getDomainAxisIndex(axis);\n        if (domainIndex >= 0) {\n            isDomainAxis = true;\n            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                    new Integer(domainIndex)));\n            if (domainIndex == 0) {\n                // grab the plot's annotations\n                Iterator iterator = this.annotations.iterator();\n                while (iterator.hasNext()) {\n                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n                    if (annotation instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(annotation);\n                    }\n                }\n            }\n        }\n\n        // or is it a range axis?\n        int rangeIndex = getRangeAxisIndex(axis);\n        if (rangeIndex >= 0) {\n            isDomainAxis = false;\n            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                    new Integer(rangeIndex)));\n            if (rangeIndex == 0) {\n                Iterator iterator = this.annotations.iterator();\n                while (iterator.hasNext()) {\n                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n                    if (annotation instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(annotation);\n                    }\n                }\n            }\n        }\n\n        // iterate through the datasets that map to the axis and get the union\n        // of the ranges.\n        Iterator iterator = mappedDatasets.iterator();\n        while (iterator.hasNext()) {\n            XYDataset d = (XYDataset) iterator.next();\n            if (d != null) {\n                XYItemRenderer r = getRendererForDataset(d);\n                if (isDomainAxis) {\n                    if (r != null) {\n                        result = Range.combine(result, r.findDomainBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findDomainBounds(d));\n                    }\n                }\n                else {\n                    if (r != null) {\n                        result = Range.combine(result, r.findRangeBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findRangeBounds(d));\n                    }\n                }\n                \n                    Collection c = r.getAnnotations();\n                    Iterator i = c.iterator();\n                    while (i.hasNext()) {\n                        XYAnnotation a = (XYAnnotation) i.next();\n                        if (a instanceof XYAnnotationBoundsInfo) {\n                            includedAnnotations.add(a);\n                        }\n                    }\n            }\n        }\n\n        Iterator it = includedAnnotations.iterator();\n        while (it.hasNext()) {\n            XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n            if (xyabi.getIncludeInDataBounds()) {\n                if (isDomainAxis) {\n                    result = Range.combine(result, xyabi.getXRange());\n                }\n                else {\n                    result = Range.combine(result, xyabi.getYRange());\n                }\n            }\n        }\n\n        return result;"
            }
        },
        "delineated_bug": {
            "0": {
                "start_line": 4472,
                "end_line": 4498,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "if (d != null) {\n                XYItemRenderer r = getRendererForDataset(d);\n                if (isDomainAxis) {\n                    if (r != null) {\n                        result = Range.combine(result, r.findDomainBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findDomainBounds(d));\n                    }\n                }\n                else {\n                    if (r != null) {\n                        result = Range.combine(result, r.findRangeBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findRangeBounds(d));\n                    }\n                }\n                \n<END_BUG>\n<START_BUG>\n                    Collection c = r.getAnnotations();\n                    Iterator i = c.iterator();\n                    while (i.hasNext()) {\n                        XYAnnotation a = (XYAnnotation) i.next();\n                        if (a instanceof XYAnnotationBoundsInfo) {\n                            includedAnnotations.add(a);"
            },
            "1": {
                "start_line": 4425,
                "end_line": 4518,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "public Range getDataRange(ValueAxis axis) {\n\n        Range result = null;\n        List mappedDatasets = new ArrayList();\n        List includedAnnotations = new ArrayList();\n        boolean isDomainAxis = true;\n\n        // is it a domain axis?\n        int domainIndex = getDomainAxisIndex(axis);\n        if (domainIndex >= 0) {\n            isDomainAxis = true;\n            mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                    new Integer(domainIndex)));\n            if (domainIndex == 0) {\n                // grab the plot's annotations\n                Iterator iterator = this.annotations.iterator();\n                while (iterator.hasNext()) {\n                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n                    if (annotation instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(annotation);\n                    }\n                }\n            }\n        }\n\n        // or is it a range axis?\n        int rangeIndex = getRangeAxisIndex(axis);\n        if (rangeIndex >= 0) {\n            isDomainAxis = false;\n            mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                    new Integer(rangeIndex)));\n            if (rangeIndex == 0) {\n                Iterator iterator = this.annotations.iterator();\n                while (iterator.hasNext()) {\n                    XYAnnotation annotation = (XYAnnotation) iterator.next();\n                    if (annotation instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(annotation);\n                    }\n                }\n            }\n        }\n\n        // iterate through the datasets that map to the axis and get the union\n        // of the ranges.\n        Iterator iterator = mappedDatasets.iterator();\n        while (iterator.hasNext()) {\n            XYDataset d = (XYDataset) iterator.next();\n            if (d != null) {\n                XYItemRenderer r = getRendererForDataset(d);\n                if (isDomainAxis) {\n                    if (r != null) {\n                        result = Range.combine(result, r.findDomainBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findDomainBounds(d));\n                    }\n                }\n                else {\n                    if (r != null) {\n                        result = Range.combine(result, r.findRangeBounds(d));\n                    }\n                    else {\n                        result = Range.combine(result,\n                                DatasetUtilities.findRangeBounds(d));\n                    }\n                }\n                \n                    Collection c = r.getAnnotations();\n                    Iterator i = c.iterator();\n                    while (i.hasNext()) {\n                        XYAnnotation a = (XYAnnotation) i.next();\n                        if (a instanceof XYAnnotationBoundsInfo) {\n                            includedAnnotations.add(a);\n                        }\n                    }\n<END_BUG>\n<START_BUG>\n            }\n        }\n\n        Iterator it = includedAnnotations.iterator();\n        while (it.hasNext()) {\n            XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n            if (xyabi.getIncludeInDataBounds()) {\n                if (isDomainAxis) {\n                    result = Range.combine(result, xyabi.getXRange());\n                }\n                else {\n                    result = Range.combine(result, xyabi.getYRange());\n                }\n            }\n        }\n\n        return result;"
            }
        },
        "bug_count": 2,
        "triggered_tests": {
            "0": {
                "test_path": "org.jfree.chart.axis.junit.LogAxisTests",
                "test_method": "testXYAutoRange1",
                "test_code": "testXYAutoRange1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "1": {
                "test_path": "org.jfree.chart.axis.junit.LogAxisTests",
                "test_method": "testXYAutoRange2",
                "test_code": "testXYAutoRange2() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "2": {
                "test_path": "org.jfree.chart.axis.junit.NumberAxisTests",
                "test_method": "testXYAutoRange1",
                "test_code": "testXYAutoRange1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getDomainAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "3": {
                "test_path": "org.jfree.chart.axis.junit.NumberAxisTests",
                "test_method": "testXYAutoRange2",
                "test_code": "testXYAutoRange2() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "4": {
                "test_path": "org.jfree.chart.axis.junit.ValueAxisTests",
                "test_method": "testAxisMargins",
                "test_code": "testAxisMargins() {\n        XYSeries series = new XYSeries(\"S1\");\n        series.add(100.0, 1.1);\n        series.add(200.0, 2.2);\n        XYSeriesCollection dataset = new XYSeriesCollection(series);\n        dataset.setIntervalWidth(0.0);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Title\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL,\n            false, false, false\n        );\n        ValueAxis domainAxis = ((XYPlot) chart.getPlot()).getDomainAxis();\n        Range r = domainAxis.getRange();\n        assertEquals(110.0, r.getLength(), EPSILON);\n        domainAxis.setLowerMargin(0.10);\n        domainAxis.setUpperMargin(0.10);\n        r = domainAxis.getRange();\n        assertEquals(120.0, r.getLength(), EPSILON);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "5": {
                "test_path": "org.jfree.chart.junit.JFreeChartTests",
                "test_method": "testSerialization4",
                "test_code": "testSerialization4() {\n\n        RegularTimePeriod t = new Day();\n        TimeSeries series = new TimeSeries(\"Series 1\");\n        series.add(t, 36.4);\n        t = t.next();\n        series.add(t, 63.5);\n        TimeSeriesCollection dataset = new TimeSeriesCollection();\n        dataset.addSeries(series);\n\n        JFreeChart c1 = ChartFactory.createTimeSeriesChart(\"Test\", \"Date\",\n                \"Value\", dataset, true, true, true);\n        JFreeChart c2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(c1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n                    buffer.toByteArray()));\n            c2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(c1, c2);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "6": {
                "test_path": "org.jfree.chart.junit.ScatterPlotTests",
                "test_method": "testDrawWithNullInfo",
                "test_code": "testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n\n        assertTrue(success);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "7": {
                "test_path": "org.jfree.chart.junit.ScatterPlotTests",
                "test_method": "testSetSeriesToolTipGenerator",
                "test_code": "testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n        assertTrue(tt2 == tt);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "8": {
                "test_path": "org.jfree.chart.junit.ScatterPlotTests",
                "test_method": "testReplaceDataset",
                "test_code": "testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "9": {
                "test_path": "org.jfree.chart.junit.TimeSeriesChartTests",
                "test_method": "testDrawWithNullInfo",
                "test_code": "testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "10": {
                "test_path": "org.jfree.chart.junit.TimeSeriesChartTests",
                "test_method": "testSetSeriesToolTipGenerator",
                "test_code": "testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n        assertTrue(tt2 == tt);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "11": {
                "test_path": "org.jfree.chart.junit.TimeSeriesChartTests",
                "test_method": "testReplaceDataset",
                "test_code": "testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "12": {
                "test_path": "org.jfree.chart.junit.XYAreaChartTests",
                "test_method": "testDrawWithNullInfo",
                "test_code": "testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "13": {
                "test_path": "org.jfree.chart.junit.XYAreaChartTests",
                "test_method": "testSetSeriesToolTipGenerator",
                "test_code": "testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0,\n                false);\n        assertTrue(tt2 == tt);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "14": {
                "test_path": "org.jfree.chart.junit.XYAreaChartTests",
                "test_method": "testReplaceDataset",
                "test_code": "testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "15": {
                "test_path": "org.jfree.chart.junit.XYStepAreaChartTests",
                "test_method": "testDrawWithNullInfo",
                "test_code": "testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "16": {
                "test_path": "org.jfree.chart.junit.XYStepAreaChartTests",
                "test_method": "testSetSeriesToolTipGenerator",
                "test_code": "testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n        assertTrue(tt2 == tt);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "17": {
                "test_path": "org.jfree.chart.junit.XYStepAreaChartTests",
                "test_method": "testReplaceDataset",
                "test_code": "testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "18": {
                "test_path": "org.jfree.chart.junit.XYStepChartTests",
                "test_method": "testDrawWithNullInfo",
                "test_code": "testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n          e.printStackTrace();\n        }\n        assertTrue(success);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "19": {
                "test_path": "org.jfree.chart.junit.XYStepChartTests",
                "test_method": "testSetSeriesToolTipGenerator",
                "test_code": "testSetSeriesToolTipGenerator() {\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        XYItemRenderer renderer = plot.getRenderer();\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n        assertTrue(tt2 == tt);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "20": {
                "test_path": "org.jfree.chart.junit.XYStepChartTests",
                "test_method": "testReplaceDataset",
                "test_code": "testReplaceDataset() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "21": {
                "test_path": "org.jfree.chart.plot.junit.XYPlotTests",
                "test_method": "testDrawRangeGridlines",
                "test_code": "testDrawRangeGridlines() {\n        DefaultXYDataset dataset = new DefaultXYDataset();\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        XYPlot plot = (XYPlot) chart.getPlot();\n        plot.setRenderer(null);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100,\n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            }
        },
        "buggy_files": {
            "0": "source/org/jfree/chart/plot/XYPlot.java"
        },
        "bug_report": {
            "url": "UNKNOWN",
            "bug_description": ""
        },
        "hunk_type": "single_file_two_hunks",
        "hunk_mapping": {
            "0": [
                {
                    "start_line": 4493,
                    "end_line": 4492,
                    "file": "source/org/jfree/chart/plot/XYPlot.java",
                    "code": "<START_BUG>\n<END_BUG>"
                }
            ],
            "1": [
                {
                    "start_line": 4501,
                    "end_line": 4500,
                    "file": "source/org/jfree/chart/plot/XYPlot.java",
                    "code": "<START_BUG>\n<END_BUG>"
                }
            ]
        }
    },
    "Chart_14": {
        "buggy_hunks": {
            "0": {
                "start_line": 2166,
                "end_line": 2165,
                "file": "source/org/jfree/chart/plot/CategoryPlot.java",
                "code": "<START_BUG>\n<END_BUG>"
            },
            "1": {
                "start_line": 2448,
                "end_line": 2447,
                "file": "source/org/jfree/chart/plot/CategoryPlot.java",
                "code": "<START_BUG>\n<END_BUG>"
            },
            "2": {
                "start_line": 2293,
                "end_line": 2292,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "<START_BUG>\n<END_BUG>"
            },
            "3": {
                "start_line": 2529,
                "end_line": 2528,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "<START_BUG>\n<END_BUG>"
            }
        },
        "buggy_code": {
            "0": {
                "start_line": 2155,
                "end_line": 2171,
                "file": "source/org/jfree/chart/plot/CategoryPlot.java",
                "code": "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }"
            },
            "1": {
                "start_line": 2434,
                "end_line": 2453,
                "file": "source/org/jfree/chart/plot/CategoryPlot.java",
                "code": "public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }"
            },
            "2": {
                "start_line": 2282,
                "end_line": 2298,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }"
            },
            "3": {
                "start_line": 2515,
                "end_line": 2534,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }"
            }
        },
        "delineated_bug": {
            "0": {
                "start_line": 2155,
                "end_line": 2171,
                "file": "source/org/jfree/chart/plot/CategoryPlot.java",
                "code": "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n<END_BUG>\n<START_BUG>\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }"
            },
            "1": {
                "start_line": 2434,
                "end_line": 2453,
                "file": "source/org/jfree/chart/plot/CategoryPlot.java",
                "code": "public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n<END_BUG>\n<START_BUG>\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }"
            },
            "2": {
                "start_line": 2282,
                "end_line": 2298,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "public boolean removeDomainMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer(\n                    index));\n        }\n<END_BUG>\n<START_BUG>\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }"
            },
            "3": {
                "start_line": 2515,
                "end_line": 2534,
                "file": "source/org/jfree/chart/plot/XYPlot.java",
                "code": "public boolean removeRangeMarker(int index, Marker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' argument.\");\n        }\n        ArrayList markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer(\n                    index));\n        }\n        else {\n            markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer(\n                    index));\n        }\n<END_BUG>\n<START_BUG>\n        boolean removed = markers.remove(marker);\n        if (removed && notify) {\n            fireChangeEvent();\n        }\n        return removed;\n    }"
            }
        },
        "bug_count": 4,
        "triggered_tests": {
            "0": {
                "test_path": "org.jfree.chart.plot.junit.CategoryPlotTests",
                "test_method": "testRemoveRangeMarker",
                "test_code": "testRemoveRangeMarker() (DG);\n *\n */\n\npackage org.jfree.chart.plot.junit;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.GradientPaint;\nimport java.awt.Graphics2D;\nimport java.awt.Stroke;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInput;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.chart.annotations.CategoryTextAnnotation;\nimport org.jfree.chart.axis.AxisLocation;\nimport org.jfree.chart.axis.AxisSpace;\nimport org.jfree.chart.axis.CategoryAnchor;\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.NumberAxis;\nimport org.jfree.chart.event.MarkerChangeListener;\nimport org.jfree.chart.plot.CategoryMarker;\nimport org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.DatasetRenderingOrder;\nimport org.jfree.chart.plot.IntervalMarker;\nimport org.jfree.chart.plot.Marker;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.plot.ValueMarker;\nimport org.jfree.chart.renderer.category.AreaRenderer;\nimport org.jfree.chart.renderer.category.BarRenderer;\nimport org.jfree.chart.renderer.category.CategoryItemRenderer;\nimport org.jfree.chart.renderer.category.LineAndShapeRenderer;\nimport org.jfree.chart.util.Layer;\nimport org.jfree.chart.util.RectangleInsets;\nimport org.jfree.chart.util.SortOrder;\nimport org.jfree.data.Range;\nimport org.jfree.data.category.DefaultCategoryDataset;\n\n/**\n * Tests for the {@link CategoryPlot}",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "1": {
                "test_path": "org.jfree.chart.plot.junit.CategoryPlotTests",
                "test_method": "testRemoveDomainMarker",
                "test_code": "testRemoveDomainMarker() and \n *               testRemoveRangeMarker() (DG);\n *\n */\n\npackage org.jfree.chart.plot.junit;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.GradientPaint;\nimport java.awt.Graphics2D;\nimport java.awt.Stroke;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInput;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.chart.annotations.CategoryTextAnnotation;\nimport org.jfree.chart.axis.AxisLocation;\nimport org.jfree.chart.axis.AxisSpace;\nimport org.jfree.chart.axis.CategoryAnchor;\nimport org.jfree.chart.axis.CategoryAxis;\nimport org.jfree.chart.axis.NumberAxis;\nimport org.jfree.chart.event.MarkerChangeListener;\nimport org.jfree.chart.plot.CategoryMarker;\nimport org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.DatasetRenderingOrder;\nimport org.jfree.chart.plot.IntervalMarker;\nimport org.jfree.chart.plot.Marker;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.plot.ValueMarker;\nimport org.jfree.chart.renderer.category.AreaRenderer;\nimport org.jfree.chart.renderer.category.BarRenderer;\nimport org.jfree.chart.renderer.category.CategoryItemRenderer;\nimport org.jfree.chart.renderer.category.LineAndShapeRenderer;\nimport org.jfree.chart.util.Layer;\nimport org.jfree.chart.util.RectangleInsets;\nimport org.jfree.chart.util.SortOrder;\nimport org.jfree.data.Range;\nimport org.jfree.data.category.DefaultCategoryDataset;\n\n/**\n * Tests for the {@link CategoryPlot}",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "2": {
                "test_path": "org.jfree.chart.plot.junit.XYPlotTests",
                "test_method": "testRemoveRangeMarker",
                "test_code": "testRemoveRangeMarker() (DG);\n * \n */\n\npackage org.jfree.chart.plot.junit;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.GradientPaint;\nimport java.awt.Graphics2D;\nimport java.awt.Stroke;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInput;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.chart.LegendItemCollection;\nimport org.jfree.chart.annotations.XYTextAnnotation;\nimport org.jfree.chart.axis.AxisLocation;\nimport org.jfree.chart.axis.DateAxis;\nimport org.jfree.chart.axis.NumberAxis;\nimport org.jfree.chart.event.MarkerChangeListener;\nimport org.jfree.chart.labels.StandardXYToolTipGenerator;\nimport org.jfree.chart.plot.IntervalMarker;\nimport org.jfree.chart.plot.Marker;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.plot.ValueMarker;\nimport org.jfree.chart.plot.XYPlot;\nimport org.jfree.chart.renderer.xy.DefaultXYItemRenderer;\nimport org.jfree.chart.renderer.xy.StandardXYItemRenderer;\nimport org.jfree.chart.renderer.xy.XYBarRenderer;\nimport org.jfree.chart.renderer.xy.XYItemRenderer;\nimport org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;\nimport org.jfree.chart.util.Layer;\nimport org.jfree.chart.util.RectangleInsets;\nimport org.jfree.data.time.Day;\nimport org.jfree.data.time.MonthConstants;\nimport org.jfree.data.time.TimeSeries;\nimport org.jfree.data.time.TimeSeriesCollection;\nimport org.jfree.data.xy.DefaultXYDataset;\nimport org.jfree.data.xy.IntervalXYDataset;\nimport org.jfree.data.xy.XYDataset;\nimport org.jfree.data.xy.XYSeries;\nimport org.jfree.data.xy.XYSeriesCollection;\n\n/**\n * Tests for the {@link XYPlot}",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "3": {
                "test_path": "org.jfree.chart.plot.junit.XYPlotTests",
                "test_method": "testRemoveDomainMarker",
                "test_code": "testRemoveDomainMarker() and \n *               testRemoveRangeMarker() (DG);\n * \n */\n\npackage org.jfree.chart.plot.junit;\n\nimport java.awt.BasicStroke;\nimport java.awt.Color;\nimport java.awt.GradientPaint;\nimport java.awt.Graphics2D;\nimport java.awt.Stroke;\nimport java.awt.geom.Point2D;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInput;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\nimport org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.chart.LegendItemCollection;\nimport org.jfree.chart.annotations.XYTextAnnotation;\nimport org.jfree.chart.axis.AxisLocation;\nimport org.jfree.chart.axis.DateAxis;\nimport org.jfree.chart.axis.NumberAxis;\nimport org.jfree.chart.event.MarkerChangeListener;\nimport org.jfree.chart.labels.StandardXYToolTipGenerator;\nimport org.jfree.chart.plot.IntervalMarker;\nimport org.jfree.chart.plot.Marker;\nimport org.jfree.chart.plot.PlotOrientation;\nimport org.jfree.chart.plot.ValueMarker;\nimport org.jfree.chart.plot.XYPlot;\nimport org.jfree.chart.renderer.xy.DefaultXYItemRenderer;\nimport org.jfree.chart.renderer.xy.StandardXYItemRenderer;\nimport org.jfree.chart.renderer.xy.XYBarRenderer;\nimport org.jfree.chart.renderer.xy.XYItemRenderer;\nimport org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;\nimport org.jfree.chart.util.Layer;\nimport org.jfree.chart.util.RectangleInsets;\nimport org.jfree.data.time.Day;\nimport org.jfree.data.time.MonthConstants;\nimport org.jfree.data.time.TimeSeries;\nimport org.jfree.data.time.TimeSeriesCollection;\nimport org.jfree.data.xy.DefaultXYDataset;\nimport org.jfree.data.xy.IntervalXYDataset;\nimport org.jfree.data.xy.XYDataset;\nimport org.jfree.data.xy.XYSeries;\nimport org.jfree.data.xy.XYSeriesCollection;\n\n/**\n * Tests for the {@link XYPlot}",
                "clean_err_msg": "java.lang.NullPointerException"
            }
        },
        "buggy_files": {
            "0": "source/org/jfree/chart/plot/CategoryPlot.java",
            "1": "source/org/jfree/chart/plot/XYPlot.java"
        },
        "bug_report": {
            "url": "UNKNOWN",
            "bug_description": ""
        },
        "hunk_type": "multi_file_four_or_more_hunks",
        "hunk_mapping": {
            "0": [
                {
                    "start_line": 2166,
                    "end_line": 2165,
                    "file": "source/org/jfree/chart/plot/CategoryPlot.java",
                    "code": "<START_BUG>\n<END_BUG>"
                }
            ],
            "1": [
                {
                    "start_line": 2448,
                    "end_line": 2447,
                    "file": "source/org/jfree/chart/plot/CategoryPlot.java",
                    "code": "<START_BUG>\n<END_BUG>"
                }
            ],
            "2": [
                {
                    "start_line": 2293,
                    "end_line": 2292,
                    "file": "source/org/jfree/chart/plot/XYPlot.java",
                    "code": "<START_BUG>\n<END_BUG>"
                }
            ],
            "3": [
                {
                    "start_line": 2529,
                    "end_line": 2528,
                    "file": "source/org/jfree/chart/plot/XYPlot.java",
                    "code": "<START_BUG>\n<END_BUG>"
                }
            ]
        }
    },
    "Chart_15": {
        "buggy_hunks": {
            "0": {
                "start_line": 1378,
                "end_line": 1377,
                "file": "source/org/jfree/chart/plot/PiePlot.java",
                "code": "<START_BUG>\n<END_BUG>"
            },
            "1": {
                "start_line": 2051,
                "end_line": 2052,
                "file": "source/org/jfree/chart/plot/PiePlot.java",
                "code": "<START_BUG>\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n<END_BUG>"
            }
        },
        "buggy_code": {
            "0": {
                "start_line": 1377,
                "end_line": 1388,
                "file": "source/org/jfree/chart/plot/PiePlot.java",
                "code": "public double getMaximumExplodePercent() {\n        double result = 0.0;\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }"
            },
            "1": {
                "start_line": 2046,
                "end_line": 2055,
                "file": "source/org/jfree/chart/plot/PiePlot.java",
                "code": "public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n        state.setLatestAngle(plot.getStartAngle());\n        return state;"
            }
        },
        "delineated_bug": {
            "0": {
                "start_line": 1377,
                "end_line": 1388,
                "file": "source/org/jfree/chart/plot/PiePlot.java",
                "code": "public double getMaximumExplodePercent() {\n<END_BUG>\n<START_BUG>\n        double result = 0.0;\n        Iterator iterator = this.dataset.getKeys().iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Number explode = (Number) this.explodePercentages.get(key);\n            if (explode != null) {\n                result = Math.max(result, explode.doubleValue());   \n            }\n        }\n        return result;\n    }"
            },
            "1": {
                "start_line": 2046,
                "end_line": 2055,
                "file": "source/org/jfree/chart/plot/PiePlot.java",
                "code": "public PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea,\n            PiePlot plot, Integer index, PlotRenderingInfo info) {\n     \n        PiePlotState state = new PiePlotState(info);\n        state.setPassesRequired(2);\n<START_BUG>\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n<END_BUG>\n        state.setLatestAngle(plot.getStartAngle());\n        return state;"
            }
        },
        "bug_count": 2,
        "triggered_tests": {
            "0": {
                "test_path": "org.jfree.chart.plot.junit.PiePlot3DTests",
                "test_method": "testDrawWithNullDataset",
                "test_code": "testDrawWithNullDataset() {\n        JFreeChart chart = ChartFactory.createPieChart3D(\"Test\", null, true, \n                false, false);\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }",
                "clean_err_msg": "junit.framework.AssertionFailedError"
            }
        },
        "buggy_files": {
            "0": "source/org/jfree/chart/plot/PiePlot.java"
        },
        "bug_report": {
            "url": "UNKNOWN",
            "bug_description": ""
        },
        "hunk_type": "single_file_two_hunks",
        "hunk_mapping": {
            "0": [
                {
                    "start_line": 1378,
                    "end_line": 1377,
                    "file": "source/org/jfree/chart/plot/PiePlot.java",
                    "code": "<START_BUG>\n<END_BUG>"
                }
            ],
            "1": [
                {
                    "start_line": 2051,
                    "end_line": 2052,
                    "file": "source/org/jfree/chart/plot/PiePlot.java",
                    "code": "<START_BUG>\n            state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                    plot.getDataset()));\n<END_BUG>"
                }
            ]
        }
    },
    "Chart_16": {
        "buggy_hunks": {
            "0": {
                "start_line": 207,
                "end_line": 208,
                "file": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                "code": "<START_BUG>\n                this.seriesKeys = null;\n                this.categoryKeys = null;\n<END_BUG>"
            },
            "1": {
                "start_line": 338,
                "end_line": 338,
                "file": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                "code": "<START_BUG>\n        if (categoryKeys.length != this.startData[0].length) {\n<END_BUG>"
            }
        },
        "buggy_code": {
            "0": {
                "start_line": 206,
                "end_line": 209,
                "file": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                "code": "else {\n                this.seriesKeys = null;\n                this.categoryKeys = null;\n            }"
            },
            "1": {
                "start_line": 334,
                "end_line": 351,
                "file": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                "code": "public void setCategoryKeys(Comparable[] categoryKeys) {\n        if (categoryKeys == null) {\n            throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n        }\n        if (categoryKeys.length != this.startData[0].length) {\n            throw new IllegalArgumentException(\n                    \"The number of categories does not match the data.\");\n        }\n        for (int i = 0; i < categoryKeys.length; i++) {\n            if (categoryKeys[i] == null) {\n                throw new IllegalArgumentException(\n                    \"DefaultIntervalCategoryDataset.setCategoryKeys(): \"\n                    + \"null category not permitted.\");\n            }\n        }\n        this.categoryKeys = categoryKeys;\n        fireDatasetChanged();\n    }"
            }
        },
        "delineated_bug": {
            "0": {
                "start_line": 206,
                "end_line": 209,
                "file": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                "code": "else {\n<START_BUG>\n                this.seriesKeys = null;\n                this.categoryKeys = null;\n<END_BUG>\n            }"
            },
            "1": {
                "start_line": 334,
                "end_line": 351,
                "file": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                "code": "public void setCategoryKeys(Comparable[] categoryKeys) {\n        if (categoryKeys == null) {\n            throw new IllegalArgumentException(\"Null 'categoryKeys' argument.\");\n        }\n<START_BUG>\n        if (categoryKeys.length != this.startData[0].length) {\n<END_BUG>\n            throw new IllegalArgumentException(\n                    \"The number of categories does not match the data.\");\n        }\n        for (int i = 0; i < categoryKeys.length; i++) {\n            if (categoryKeys[i] == null) {\n                throw new IllegalArgumentException(\n                    \"DefaultIntervalCategoryDataset.setCategoryKeys(): \"\n                    + \"null category not permitted.\");\n            }\n        }\n        this.categoryKeys = categoryKeys;\n        fireDatasetChanged();\n    }"
            }
        },
        "bug_count": 2,
        "triggered_tests": {
            "0": {
                "test_path": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
                "test_method": "testGetCategoryIndex",
                "test_code": "testGetCategoryIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getCategoryIndex(\"ABC\"));\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "1": {
                "test_path": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
                "test_method": "testSetCategoryKeys",
                "test_code": "testSetCategoryKeys() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tboolean pass = true;\n    \ttry {\n    \t\tempty.setCategoryKeys(new String[0]);\n    \t}\n    \tcatch (RuntimeException e) {\n    \t\tpass = false;\n    \t}\n    \tassertTrue(pass);\n    }",
                "clean_err_msg": "junit.framework.AssertionFailedError"
            },
            "2": {
                "test_path": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
                "test_method": "testGetSeriesIndex",
                "test_code": "testGetSeriesIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getSeriesIndex(\"ABC\"));\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "3": {
                "test_path": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
                "test_method": "testGetRowCount",
                "test_code": "testGetRowCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        assertEquals(0, empty.getColumnCount());\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "4": {
                "test_path": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
                "test_method": "testGetRowIndex",
                "test_code": "testGetRowIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getRowIndex(\"ABC\"));\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "5": {
                "test_path": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
                "test_method": "testGetColumnCount",
                "test_code": "testGetColumnCount() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n        assertEquals(0, empty.getColumnCount());\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "6": {
                "test_path": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
                "test_method": "testGetColumnIndex",
                "test_code": "testGetColumnIndex() {\n    \t// check an empty dataset\n    \tDefaultIntervalCategoryDataset empty \n    \t        = new DefaultIntervalCategoryDataset(new double[0][0], \n    \t        \t\tnew double[0][0]);\n    \tassertEquals(-1, empty.getColumnIndex(\"ABC\"));\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            },
            "7": {
                "test_path": "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests",
                "test_method": "testCloning2",
                "test_code": "testCloning2() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);\n        assertTrue(d1.getClass() == d2.getClass());\n        assertTrue(d1.equals(d2));\t\n    }",
                "clean_err_msg": "java.lang.NullPointerException"
            }
        },
        "buggy_files": {
            "0": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java"
        },
        "bug_report": {
            "url": "https://sourceforge.net/p/jfreechart/bugs/834",
            "bug_description": "The method getRowCount() in class org.jfree.data.category.DefaultIntervalCategoryDataset says that it \"Returns the number of series in the dataset (possibly zero).\""
        },
        "hunk_type": "single_file_two_hunks",
        "hunk_mapping": {
            "0": [
                {
                    "start_line": 207,
                    "end_line": 208,
                    "file": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                    "code": "<START_BUG>\n                this.seriesKeys = null;\n                this.categoryKeys = null;\n<END_BUG>"
                }
            ],
            "1": [
                {
                    "start_line": 338,
                    "end_line": 338,
                    "file": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
                    "code": "<START_BUG>\n        if (categoryKeys.length != this.startData[0].length) {\n<END_BUG>"
                }
            ]
        }
    }
}